


theory Exprs

use map.Map
use map.Const

use int.Int 




(* identifiers *)

type ident

function mk_ident int : ident




(* expressions *)

type operator = Oplus | Ominus | Omult (*| Odiv*)

type expr =
  | Econst int
  | Evar ident
  | Ebin expr operator expr
  | Einc expr (*increment*)
  | Edec expr (*decrement*)

(* program states *)

type state = map ident int

(*
let rec division (v1:int) (d:int)  : int  = 
  ensures{ d>0}
  if v1< d  then 0 
  else 1 + division (v1 - d) d 

*)

(*Função auxiliar para as operações de soma multiplicação e subtração *)
function aux (v1:int) (op:operator) (v2:int) : int  =
  match op with 
    |Oplus   -> v1+v2 
    |Ominus  -> v1-v2   
    |Omult   -> v1*v2 
    (* |Odiv ->  division v1 v2 *)
end





(* semantics of expressions *)

function eval_expr (s:state) (e:expr) : int =
   match e with
    | Econst x -> x
    | Evar x   -> get s x
    | Ebin x1 op x2 -> aux (eval_expr s x1) op (eval_expr s x2)
    | Einc x ->  (aux (eval_expr s x ) Oplus  1 )
    | Edec x ->  (aux (eval_expr s x ) Ominus  1 )
    end
    
(* ------ Goals to eval_expr ------- *)

  
  goal Test13 :
    let s = const 0 in
    eval_expr s (Econst 13) = 13

  goal Test42 :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in
    eval_expr s (Evar x) = 42

  goal Test55 :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in
    eval_expr s (Ebin (Evar x) Oplus (Econst 13)) = 55

   (*Teste para a incrementação*)
  goal Test_inc : 
    let x = mk_ident 1 in
    let s = set (const 0) x 1 in
        eval_expr s (Einc (Evar x)) = 2 
        
  (*Teste para a decrementação*)      
  goal Test_dec : 
    let x = mk_ident 1 in
    let s = set (const 0) x 1 in
        eval_expr s (Edec (Evar x)) = 0

(* --------------------------------- *)

(* semantics of expressions as an evaluation relation   *)
(* this always terminates, and thus was written as a    *)
(* function before, but we can write it as an inductive *)
(* predicate and prove a correspondence between the two *)


inductive eval_expr_rel state expr state int =
    | econst : forall n:int, s:state.
               eval_expr_rel s (Econst n) s n
    | evar : forall n:ident, s:state.
               eval_expr_rel s (Evar n) s (get s n)
    | ebin : forall n1,n2:int ,x1,x2:expr, s1,s2,s3:state ,op:operator.
              (eval_expr_rel s1 x1 s2 n1)  /\ (eval_expr_rel s2 x2 s3 n2) -> (eval_expr_rel s1 (Ebin x1 op x2) s3 (aux n1 op n2))
        
    | einc : forall n1:int, s:state, e:expr. 
                eval_expr_rel s e s n1 -> (*calcula o valor de e e coloca em n1*)
                eval_expr_rel s (Einc e) s (aux n1 Oplus 1) 

    | edec : forall n1:int, s:state, e:expr.
                eval_expr_rel s e s n1 -> (*calcula o valor de "e" e coloca em n1*)
                eval_expr_rel s (Edec e) s (aux n1 Ominus 1)          
     
 
(* ------ Goals to eval_expr_rel ------- *)
     

  goal Test13r :
    let s = const 0 in
    eval_expr_rel s (Econst 13) s 13

  goal Test42r :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in 
    eval_expr_rel s (Evar x) s 42
(*Para esta prova tem de se fazer algumas instruçoes:
  split_vc-> 0->assert (eval_expr_rel s (Evar x) s 42) ->  0 -> CVC4(Done)
                                                           1-> assert (eval_expr_rel s (Econst 13) s 13) ->CVC4(Done)
*)
  goal Test55r :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in
    eval_expr_rel s (Ebin (Evar x) Oplus (Econst 13)) s 55
    
   (*Teste para a incrementação*)
  goal Test_inc_r : 
    let x = mk_ident 1 in
    let s = set (const 0) x 1 in
        eval_expr_rel s (Einc (Evar x)) s 2
        
  (*Teste para a decrementação*)      
  goal Test_dec_r : 
    let x = mk_ident 1 in
    let s = set (const 0) x 1 in
        eval_expr_rel s (Edec (Evar x)) s 0

(* ------------------------------------- *)


        
(*O estado inicial(s) apos a execução do  eval_expr_rel(s2) permanece igual.
Ou seja, sempre que essa é executada, implica que os estados s=s2 
Para provar basta fazer induction_pr.
*)
lemma no_side_effects:forall e:expr, s,s2:state, n:int.
(eval_expr_rel s e s2 n) -> s=s2

                          
(*Dado que a equivalencia pode ser desdobrada em 2 implicações, A <-> B equivalente a (A -> B) ^ (B -> A) 
  foi aplicada essa tranformação atraves do split_all_full.Para provar basta:
    split_all_full-> 0->induction_ty_lex->0->introduce premises (Done)
                     1->induction_ty_lex  (Done)
    
*)

lemma expr_eval:
    forall e:expr, s:state, n:int.   (eval_expr_rel s e s n) <-> (eval_expr s e = n) 



goal Test55r2 :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in
    eval_expr_rel s (Ebin (Evar x) Oplus (Econst 13)) s 55




end



theory Programs

use map.Map 
use map.Const

use Exprs



(* statements *)

type stmt =
  | Sskip
  | Sassign ident expr
  | Sseq stmt stmt
  | Sif expr stmt stmt
  | Swhile expr stmt



(* big step semantics - Serve para executar um dado stm, e ser possivel a avaliar os estados antes e depois do statement. *)

  inductive big_step state stmt state =
   
  | big_step_seq:
    forall s1 s2 s3:state, i1 i2:stmt.
      big_step s1 i1 s2  -> (*executa o primeiro declaração *)
      big_step s2 i2 s3  -> (*executa o segundo  declaração  *)
      big_step s1 (Sseq i1 i2) s3 

  | big_step_skip:
    forall s1:state.
      big_step s1 (Sskip) s1 (* o estado final  permance igual ao inicial.*)
  
  | big_step_assign:
    forall s1:state, e:expr,x:ident.
       big_step s1 (Sassign x e) s1[x <- eval_expr s1 e]  (* substitui o valor de x pelo valor *)
      
  | big_step_if_true:
    forall s1 s2:state, e:expr,i1 i2 :stmt.
       (eval_expr s1 e) = 0 ->  (* O true de uma expr é representado por 0, logo se for true ...*)
       big_step  s1 i1 s2 ->    (*executa i2*)
      big_step  s1 (Sif e i1 i2) s2
      
  | big_step_if_false:
    forall s1 s2:state, e:expr,i1 i2 :stmt.
       not ((eval_expr s1 e) = 0) ->  (*se for falso *)
       big_step  s1 i2 s2 ->          (*executa i2*)
      big_step  s1 (Sif e i1 i2) s2
      
  | big_step_while_cfalse:
      forall s1:state, e:expr,i1 :stmt.
       not ((eval_expr s1 e) = 0) ->
      big_step  s1 (Swhile e i1) s1 (*permanece no mesmo estado*)
  | big_step_while_ctrue:
      forall s1 s2:state, e:expr,i1 :stmt.
      (eval_expr s1 e) = 0 -> 
        big_step  s1 i1 s2   -> (* executa uma vez o corpo do ciclo. *)
          big_step  s1 (Swhile e i1) s2 


  goal Assign42 :
    let x = mk_ident 0 in
    let s = const 0 in
    forall s':state.
      big_step s (Sassign x (Econst 42)) s' ->
        get s' x = 42


  goal If42 :
    let x = mk_ident 0 in
    let s = set (const 0) x 0 in
    forall s1:state.
      big_step s
        (Sif (Evar x)
             (Sassign x (Econst 13))
             (Sassign x (Econst 42)))
	 s1 ->
	 get s1 x = 13
	 
	 
	(*Prova de que  uma sequencia de instrunções funciona*)
	goal Seq :
    let x = mk_ident 0 in
    let s = set (const 0) x 0 in
    forall s1:state.
      big_step s
        (Sseq
             (Sassign x (Econst 13)) (*coloca o valor 13 no x*)
             (Sassign x (Econst  (get s x)  ))) (*volta a colocar o valor inicial*) 
	 s1 ->
	 get s1 x = 0


	 
	 
	 

(* Com induction_pr é possível fazer a prova.  *)
  goal big_step_determinism:
    forall s s':state, i :stmt.
      big_step s i s'  ->  forall s'': state. big_step s i s''  -> s' = s''


end




