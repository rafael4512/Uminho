
module InsertionSort

  use int.Int
  use ref.Ref
  use array.Array
  use array.IntArraySorted
  use array.ArrayPermut
  use array.ArrayEq
  
  let swap (a: array int) (i: int) (j: int) =
    requires { 0 <= i < length a /\ 0 <= j < length a }
    ensures { exchange (old a) a i j }
   let v = a[i] in
    a[i] <- a[j];
    a[j] <- v



  let insertion_sort3 (a: array int) =
    ensures {permut_all (old a) a /\ sorted a }
  label L in
    for i = 1 to length a - 1 do
      invariant { permut_all (old a) a /\ sorted_sub a 0 i
        }
      let j = ref i in(* iterador(para trás) que vai de i até encontrar um elemento que menor que este *)
      while !j > 0 && a[!j - 1] > a[!j] do
       invariant { 0 <= !j <= i } (* limitar variavel*)
       invariant { permut_all (old a) a} (* o array nunca perde informação.*)
       invariant { sorted_sub a 0 !j  /\ sorted_sub a !j (i+1) }  (*  o sub array de 0 a j exclusive está ordenado e de j a i, inclusive está ordenado *)
       invariant { forall t1 t2:int. 0 <= t1 < !j /\ !j+1 <= t2 <= i -> a[t1] <= a[t2] }(*Todos os elementos do primeiro sub array(0..j-1) são menores ou iguais que os elementos do segundo(j+1..i)*)
       variant { !j }
        swap a (!j-1) !j;
        j := !j - 1
      done
  done

end
module SelectionSort

  use int.Int
  use ref.Ref
  use array.Array
  use array.IntArraySorted
  use array.ArrayPermut
  use array.ArrayEq
 
  let swap (a: array int) (i: int) (j: int) =
    requires { 0 <= i < length a /\ 0 <= j < length a }
    ensures { exchange (old a) a i j }
   let v = a[i] in
    a[i] <- a[j];
    a[j] <- v



  let selection_sort_2 (a: array int) =
    ensures { sorted a }
    ensures { permut_all (old a) a }
  for i = 0 to length a - 1 do
      invariant{sorted_sub a 0 i /\ permut_all (old a) a} (*O sub array entre 0 e i está ordenado e o array nunca perde informação.*)
      invariant {forall t1 t2: int. 0 <= t1 < i <= t2 < length a -> a[t1] <= a[t2]}(* todos os elementos entre 0 e i são sempre os mais pequenos. *)
      let min = ref i in
      for j = i + 1 to length a - 1 do
        invariant { i<=(!min)<j} (* o min está sempre entre i e j *)
        invariant { forall t: int. i <= t < j -> a[!min] <= a[t]}(*todos os elementos do sub array entre i e j é sao maiores que min  *)
        if a[j] < a[!min] then min := j
      done;
      if !min <> i then swap a !min i
    done



end      