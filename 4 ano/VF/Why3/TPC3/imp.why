


theory Exprs

use map.Map
use map.Const

use int.Int 




(* identifiers *)

type ident

function mk_ident int : ident




(* expressions *)

type operator = Oplus | Ominus | Omult

type expr =
  | Econst int
  | Evar ident
  | Ebin expr operator expr


(* program states *)

type state = map ident int



(* semantics of expressions *)

function eval_expr (s:state) (e:expr) : int =
   match e with
    | Econst x -> x
    | Evar x   -> s[x]
    | Ebin x1 Oplus x2 -> (eval_expr s x1) + (eval_expr s x2)
    | Ebin x1 Ominus x2 -> (eval_expr s x1) - (eval_expr s x2)
    | Ebin x1 Omult x2 -> (eval_expr s x1) * (eval_expr s x2)
    end
    




  goal Test13 :
    let s = const 0 in
    eval_expr s (Econst 13) = 13

  goal Test42 :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in
    eval_expr s (Evar x) = 42

  goal Test55 :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in
    eval_expr s (Ebin (Evar x) Oplus (Econst 13)) = 55



(* semantics of expressions as an evaluation relation   *)
(* this always terminates, and thus was written as a    *)
(* function before, but we can write it as an inductive *)
(* predicate and prove a correspondence between the two *)

(*
lemma aux:forall x1 x2 :expr , s:state,res:int. 
    (eval_expr_rel s (Ebin x1 Oplus x2) s res )->  eval_expr_rel s x1 s r1 /\ eval_expr_rel s x1 s r2 /\ res=r1+r2 
 
*)

function aux (v1:int) (op:operator) (v2:int) : int  =
  match op with 
    |Oplus   -> v1+v2 
    |Ominus  -> v1-v2   
    |Omult   -> v1*v2 
end




inductive eval_expr_rel state expr state int =
    | econst : forall n:int, s:state.
               eval_expr_rel s (Econst n) s n
    | evar : forall n:ident, s:state.
               eval_expr_rel s (Evar n) s s[n]
    | ebin : forall n1,n2:int ,x1,x2:expr, s1,s2,s3:state ,op:operator.
              (eval_expr_rel s1 x1 s1 n1)  -> (eval_expr_rel s2 x2 s2 n2) -> (eval_expr_rel s3 (Ebin x1 op x2) s3 (aux n1 op n2))
              
 
let lemma eval_ebin (r:int) (x:ident )(s2:state) =   assert {eval_expr_rel s2 (Evar x) s2 42 }



     
  goal Test13r :
    let s = const 0 in
    eval_expr_rel s (Econst 13) s 13

  goal Test42r :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in
    eval_expr_rel s (Evar x) s 42

  goal Test55r :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in
    eval_expr_rel s (Ebin (Evar x) Oplus (Econst 13)) s 55

(*O estado inicial(s) apos a execução do  eval_expr_rel(s2) permanece igual.
Ou seja, sempre que essa é executada, implica que os estados s=s2 *)
lemma no_side_effects:forall e:expr, s,s2:state, n:int.
(eval_expr_rel s e s2 n) -> s=s2


                          
(*Dado que a equivalencia pode ser desdobrada em 2 implicações, A <-> B equivalente a (A -> B) ^ (B -> A) 
foi aplicada essa tranformação à  formula do enunciado.
Não é obrigatório usar o induction_pr, através desta simplificação o solver cvc4 conseguiu provar com sucesso.
*)
lemma expr_eval:
    forall e:expr, s:state, n:int. (eval_expr_rel s e s n) -> (eval_expr s e = n) /\  (eval_expr s e = n)  -> (eval_expr_rel s e s n) 



goal Test55r2 :
    let x = mk_ident 0 in
    let s = set (const 0) x 42 in
    eval_expr_rel s (Ebin (Evar x) Oplus (Econst 13)) s 55




end



theory Programs

use map.Map 
use map.Const

use Exprs



(* statements *)

type stmt =
  | Sskip
  | Sassign ident expr
  | Sseq stmt stmt
  | Sif expr stmt stmt
  | Swhile expr stmt



(* big step semantics *)

  inductive big_step state stmt state =

  | big_step_seq:
    forall s1 s2 s3:state, i1 i2:stmt.
      big_step s1 i1 s2  ->
      big_step s2 i2 s3  ->
      big_step s1 (Sseq i1 i2) s3 



  goal Assign42 :
    let x = mk_ident 0 in
    let s = const 0 in
    forall s':state.
      big_step s (Sassign x (Econst 42)) s' ->
        get s' x = 42


  goal If42 :
    let x = mk_ident 0 in
    let s = set (const 0) x 0 in
    forall s1:state, i:stmt.
      big_step s
        (Sif (Evar x)
             (Sassign x (Econst 13))
             (Sassign x (Econst 42)))
	 s1 ->
	 get s1 x = 13



  goal big_step_determinism:
    forall s s':state, i :stmt.
      big_step s i s'  ->  forall s'': state. big_step s i s''  -> s' = s''




end


