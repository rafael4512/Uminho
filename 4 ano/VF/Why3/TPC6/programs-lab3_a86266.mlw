
module Bintree_insert

  use  int.Int
  use  list.List
  use  list.Mem
  use  list.Append
  use  list.Permut
  use  list.Length
  use  list.SortedInt
  use  list.NumOcc


     

  type tree 'a = Empty | Node (tree 'a) 'a (tree 'a)
(*retorna o numero de elementos de uma arvore*)
  let rec function size (t: tree 'a) : int =
    match t with
    |  Empty -> 0
    |  Node l _ r -> 1 + (size l) + (size r)
    end
(*verifica se um elemento pertence a uma arvore*)                                    
  predicate memt (t : tree int) (k : int) = 
    match t with
    |  Empty -> false
    |  Node l e r -> (e = k) \/ memt l k \/ memt r k
    end
(*  Todos os elementos da arvore são menores ou iguais a X *)                              
  let rec predicate leq_tree (x : int) (t: tree int) =
    ensures { result <-> forall k:int. memt t k -> k <= x}
      match t with 
      | Empty -> true
      | Node l e r -> leq_tree x l && e <= x && leq_tree x r
      end

(* Todos os elementos da arvore são maiores ou iguais a X*)
  predicate geq_tree (x : int) (t : tree int) =
      forall k : int. memt t k -> x <= k

(* verifica se uma arvore está inorder *)
  predicate sortedBT (t : tree int) = 
    match t with
    |  Empty -> true
    |  Node l e r -> leq_tree e l   /\  geq_tree e r /\ sortedBT l /\ sortedBT r
    end

(* numero de occurencias de  x na arvore*)
  function num_occ (x: 'a) (t: tree 'a) : int =
    match t with
    |  Empty -> 0
    |  Node l e r -> (if e = x then 1 else 0)+ num_occ x l + num_occ x r 
    end
   
(* get arvores esquerda ou arvore direita*)
  function get (x:int) (t: tree 'a) : tree 'a =
    match t with
    |  Empty -> Empty 
    |  Node l e r -> (if x = 0 then l else r) 
    end
   



(*adiciona um elemento a uma arvore*)
let rec add (t : tree int) (v : int) : tree int =
    requires { sortedBT t }               (* está ordenada antes *)
    ensures { sortedBT result }           (* está ordenada depois*)
    ensures { size result = size t + 1 }  (* o tamanho aumenta 1 unidade *)
    ensures { forall x:int. memt result x <-> ( (x = v) \/ (memt t x) ) } (* todos os elementos da tree final , existiam na inicial e vice versa, menos o caso de v. *)
    ensures { forall x:int. num_occ x result = if x = v then 1 + num_occ x t else num_occ x t }(* o numero de occureencias de cada elemento mantem-se excepto para v que aumenta. *)
    variant { t } 
    match t with
    | Empty -> Node (Empty) v (Empty)
    | Node t1 x t2 -> if v <= x then Node (add t1 v) x t2 else Node t1 x (add t2 v)
    end
  
(*Controi uma arvore de inteiros apartir de uma lista de inteiros através da funcao add *)
let rec list_to_tree (l:list int) : tree int
    ensures { sortedBT result } (* No final  a avore está ordenada*)
    ensures { forall x:int. memt result x <-> mem x l }(* todos os membros da lista estarao na arvore*)
    ensures { forall x:int. num_occ x result = NumOcc.num_occ x l } (* o numero de ocurencias na lista é o mesmo que na arvore para todos os elementos. *)
    variant { l } (*  *)
  = match l with
    | Nil -> Empty
    | Cons head tail -> add (list_to_tree tail) head
    end 

(*retorna todos os elementos inferiores ou iguais a x*)
let rec elems_inf (x : int)(l:list int) : list int

  ensures { forall e:int. (e <= x) ->  NumOcc.num_occ e result = NumOcc.num_occ e l } (* o numero de ocurencias de cada elementeo inferior ao x tem de ser igual no final da execução *)
  ensures { forall e:int. mem e result ->  e <= x } (* Se um elemento pertence ao resultado final, é pq é inferior ou igual ao x *)
  ensures { forall e:int. mem e l /\ e<= x  -> mem e result } (* Se um elementeo pertence à lista inicial e este é menor ou igual que x, tem de pertencer À lista final  *)
  ensures { length result <= length l} (*O tamanho da lista final é inferior ou igual ao tamanho da lista inicial*)
  variant { l } (* variavel que descresce ao longo da recursividade*)
    = match l with
    | Nil -> Nil
    | Cons y ys -> if y <= x  then  Cons y  (elems_inf  x ys)  else elems_inf  x ys
    end 
(*retorna todos os elementos superiores a x*)
let rec elems_sup (x : int)(l:list int) : list int
  ensures { forall e:int. e > x ->  NumOcc.num_occ e result = NumOcc.num_occ e l }(* o numero de ocurencias de cada elementeo inferior ao x tem de ser igual no final da execução *)
  ensures { forall e:int. mem e result ->  e > x }(* Se um elemento pertence ao resultado final, é pq é superior ao x *)
  ensures { forall e:int. mem e l /\ e > x  -> mem e result } (* Se um elementeo pertence à lista inicial e este é maior que x, tem de pertencer À lista final  *)
  ensures { length result <= length l} (*O tamanho da lista final é inferior ou igual ao tamanho da lista inicial*)
  variant { l } (* variavel que descresce ao longo da recursividade*)
    = match l with
    | Nil -> Nil
    | Cons y ys -> if y > x  then  Cons y  (elems_sup  x ys)  else elems_sup  x ys
    end 

(*Controi uma arvore de inteiros apartir de uma lista de inteiros *)
let rec  build_tree(l:list int) : tree int
  ensures { sortedBT result } (*A arvore no final está ordenada *)
  ensures { forall e:int. mem e l <->  memt result e } (* todos os elmentos da lista estão na arvore*)
  ensures { forall x:int. num_occ x result = NumOcc.num_occ x l } (*o numero de ocurrencias de cada elemento na lista é o mesmo que na arvore final *)
  variant { length l } (* variavel que descresce ao longo da recursividade*)
  = match l with
    | Nil -> Empty
    | Cons y ys -> Node (build_tree (elems_inf y ys))  y (build_tree (elems_sup y ys))                                       
    end 


end


