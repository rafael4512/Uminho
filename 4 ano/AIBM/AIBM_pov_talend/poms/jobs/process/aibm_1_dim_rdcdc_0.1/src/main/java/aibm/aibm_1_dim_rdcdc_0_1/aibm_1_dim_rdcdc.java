// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package aibm.aibm_1_dim_rdcdc_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: aibm_1_dim_rdcdc Purpose: project1<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class aibm_1_dim_rdcdc implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "aibm_1_dim_rdcdc";
	private final String projectName = "AIBM";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					aibm_1_dim_rdcdc.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(aibm_1_dim_rdcdc.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_color;

		public int getId_color() {
			return this.id_color;
		}

		public String desc_color;

		public String getDesc_color() {
			return this.desc_color;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_color;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.id_color != other.id_color)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id_color = this.id_color;
			other.desc_color = this.desc_color;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.id_color = this.id_color;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_color = dis.readInt();

					this.desc_color = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_color);

				// String

				writeString(this.desc_color, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_color=" + String.valueOf(id_color));
			sb.append(",desc_color=" + desc_color);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_color, other.id_color);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_district;

		public int getId_district() {
			return this.id_district;
		}

		public String district;

		public String getDistrict() {
			return this.district;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_district;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.id_district != other.id_district)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.id_district = this.id_district;
			other.district = this.district;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.id_district = this.id_district;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_district = dis.readInt();

					this.district = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_district);

				// String

				writeString(this.district, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_district=" + String.valueOf(id_district));
			sb.append(",district=" + district);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_district, other.id_district);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_cause;

		public int getId_cause() {
			return this.id_cause;
		}

		public String desc_cause;

		public String getDesc_cause() {
			return this.desc_cause;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_cause;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id_cause != other.id_cause)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id_cause = this.id_cause;
			other.desc_cause = this.desc_cause;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id_cause = this.id_cause;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_cause = dis.readInt();

					this.desc_cause = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_cause);

				// String

				writeString(this.desc_cause, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_cause=" + String.valueOf(id_cause));
			sb.append(",desc_cause=" + desc_cause);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_cause, other.id_cause);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_destination;

		public int getId_destination() {
			return this.id_destination;
		}

		public String desc_destination;

		public String getDesc_destination() {
			return this.desc_destination;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_destination;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.id_destination != other.id_destination)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id_destination = this.id_destination;
			other.desc_destination = this.desc_destination;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.id_destination = this.id_destination;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_destination = dis.readInt();

					this.desc_destination = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_destination);

				// String

				writeString(this.desc_destination, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_destination=" + String.valueOf(id_destination));
			sb.append(",desc_destination=" + desc_destination);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_destination, other.id_destination);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_reason;

		public int getId_reason() {
			return this.id_reason;
		}

		public String desc_reason;

		public String getDesc_reason() {
			return this.desc_reason;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_reason;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id_reason != other.id_reason)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id_reason = this.id_reason;
			other.desc_reason = this.desc_reason;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id_reason = this.id_reason;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_reason = dis.readInt();

					this.desc_reason = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_reason);

				// String

				writeString(this.desc_reason, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_reason=" + String.valueOf(id_reason));
			sb.append(",desc_reason=" + desc_reason);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_reason, other.id_reason);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class reasonStruct implements routines.system.IPersistableRow<reasonStruct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_reason;

		public int getId_reason() {
			return this.id_reason;
		}

		public String desc_reason;

		public String getDesc_reason() {
			return this.desc_reason;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_reason;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final reasonStruct other = (reasonStruct) obj;

			if (this.id_reason != other.id_reason)
				return false;

			return true;
		}

		public void copyDataTo(reasonStruct other) {

			other.id_reason = this.id_reason;
			other.desc_reason = this.desc_reason;

		}

		public void copyKeysDataTo(reasonStruct other) {

			other.id_reason = this.id_reason;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_reason = dis.readInt();

					this.desc_reason = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_reason);

				// String

				writeString(this.desc_reason, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_reason=" + String.valueOf(id_reason));
			sb.append(",desc_reason=" + desc_reason);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(reasonStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_reason, other.id_reason);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class destinationStruct implements routines.system.IPersistableRow<destinationStruct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_destination;

		public int getId_destination() {
			return this.id_destination;
		}

		public String desc_destination;

		public String getDesc_destination() {
			return this.desc_destination;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_destination;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final destinationStruct other = (destinationStruct) obj;

			if (this.id_destination != other.id_destination)
				return false;

			return true;
		}

		public void copyDataTo(destinationStruct other) {

			other.id_destination = this.id_destination;
			other.desc_destination = this.desc_destination;

		}

		public void copyKeysDataTo(destinationStruct other) {

			other.id_destination = this.id_destination;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_destination = dis.readInt();

					this.desc_destination = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_destination);

				// String

				writeString(this.desc_destination, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_destination=" + String.valueOf(id_destination));
			sb.append(",desc_destination=" + desc_destination);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(destinationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_destination, other.id_destination);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class causeStruct implements routines.system.IPersistableRow<causeStruct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_cause;

		public int getId_cause() {
			return this.id_cause;
		}

		public String desc_cause;

		public String getDesc_cause() {
			return this.desc_cause;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_cause;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final causeStruct other = (causeStruct) obj;

			if (this.id_cause != other.id_cause)
				return false;

			return true;
		}

		public void copyDataTo(causeStruct other) {

			other.id_cause = this.id_cause;
			other.desc_cause = this.desc_cause;

		}

		public void copyKeysDataTo(causeStruct other) {

			other.id_cause = this.id_cause;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_cause = dis.readInt();

					this.desc_cause = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_cause);

				// String

				writeString(this.desc_cause, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_cause=" + String.valueOf(id_cause));
			sb.append(",desc_cause=" + desc_cause);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(causeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_cause, other.id_cause);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class districtStruct implements routines.system.IPersistableRow<districtStruct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_district;

		public int getId_district() {
			return this.id_district;
		}

		public String district;

		public String getDistrict() {
			return this.district;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_district;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final districtStruct other = (districtStruct) obj;

			if (this.id_district != other.id_district)
				return false;

			return true;
		}

		public void copyDataTo(districtStruct other) {

			other.id_district = this.id_district;
			other.district = this.district;

		}

		public void copyKeysDataTo(districtStruct other) {

			other.id_district = this.id_district;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_district = dis.readInt();

					this.district = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_district);

				// String

				writeString(this.district, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_district=" + String.valueOf(id_district));
			sb.append(",district=" + district);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(districtStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_district, other.id_district);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class colorStruct implements routines.system.IPersistableRow<colorStruct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_color;

		public int getId_color() {
			return this.id_color;
		}

		public String desc_color;

		public String getDesc_color() {
			return this.desc_color;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_color;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final colorStruct other = (colorStruct) obj;

			if (this.id_color != other.id_color)
				return false;

			return true;
		}

		public void copyDataTo(colorStruct other) {

			other.id_color = this.id_color;
			other.desc_color = this.desc_color;

		}

		public void copyKeysDataTo(colorStruct other) {

			other.id_color = this.id_color;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.id_color = dis.readInt();

					this.desc_color = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_color);

				// String

				writeString(this.desc_color, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_color=" + String.valueOf(id_color));
			sb.append(",desc_color=" + desc_color);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(colorStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_color, other.id_color);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_AIBM_aibm_1_dim_rdcdc = new byte[0];
		static byte[] commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[0];

		public Integer URG_EPISODE;

		public Integer getURG_EPISODE() {
			return this.URG_EPISODE;
		}

		public java.util.Date DATE_OF_BIRTH;

		public java.util.Date getDATE_OF_BIRTH() {
			return this.DATE_OF_BIRTH;
		}

		public Character SEX;

		public Character getSEX() {
			return this.SEX;
		}

		public String DISTRICT;

		public String getDISTRICT() {
			return this.DISTRICT;
		}

		public java.util.Date DT_ADMITION_URG;

		public java.util.Date getDT_ADMITION_URG() {
			return this.DT_ADMITION_URG;
		}

		public Integer ID_EXT_CAUSE;

		public Integer getID_EXT_CAUSE() {
			return this.ID_EXT_CAUSE;
		}

		public String DESC_EXTERNAL_CAUSE;

		public String getDESC_EXTERNAL_CAUSE() {
			return this.DESC_EXTERNAL_CAUSE;
		}

		public Integer ID_PROF_ADMITION;

		public Integer getID_PROF_ADMITION() {
			return this.ID_PROF_ADMITION;
		}

		public java.util.Date DT_ADMITION_TRAIGE;

		public java.util.Date getDT_ADMITION_TRAIGE() {
			return this.DT_ADMITION_TRAIGE;
		}

		public Integer ID_PROF_TRIAGE;

		public Integer getID_PROF_TRIAGE() {
			return this.ID_PROF_TRIAGE;
		}

		public Integer PAIN_SCALE;

		public Integer getPAIN_SCALE() {
			return this.PAIN_SCALE;
		}

		public Integer ID_COLOR;

		public Integer getID_COLOR() {
			return this.ID_COLOR;
		}

		public String DESC_COLOR;

		public String getDESC_COLOR() {
			return this.DESC_COLOR;
		}

		public String COD_DIAGNOSIS;

		public String getCOD_DIAGNOSIS() {
			return this.COD_DIAGNOSIS;
		}

		public String DIAGNOSIS;

		public String getDIAGNOSIS() {
			return this.DIAGNOSIS;
		}

		public String DIAGNOSIS_NOTES;

		public String getDIAGNOSIS_NOTES() {
			return this.DIAGNOSIS_NOTES;
		}

		public java.util.Date DT_DIAGNOSIS;

		public java.util.Date getDT_DIAGNOSIS() {
			return this.DT_DIAGNOSIS;
		}

		public Integer ID_PROF_DIAGNOSIS;

		public Integer getID_PROF_DIAGNOSIS() {
			return this.ID_PROF_DIAGNOSIS;
		}

		public Integer ID_DESTINATION;

		public Integer getID_DESTINATION() {
			return this.ID_DESTINATION;
		}

		public String DESC_DESTINATION;

		public String getDESC_DESTINATION() {
			return this.DESC_DESTINATION;
		}

		public Integer ID_PROF_DISCHARGE;

		public Integer getID_PROF_DISCHARGE() {
			return this.ID_PROF_DISCHARGE;
		}

		public java.util.Date DT_DISCHARGE;

		public java.util.Date getDT_DISCHARGE() {
			return this.DT_DISCHARGE;
		}

		public Integer ID_REASON;

		public Integer getID_REASON() {
			return this.ID_REASON;
		}

		public String DESC_REASON;

		public String getDESC_REASON() {
			return this.DESC_REASON;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIBM_aibm_1_dim_rdcdc.length) {
					if (length < 1024 && commonByteArray_AIBM_aibm_1_dim_rdcdc.length == 0) {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[1024];
					} else {
						commonByteArray_AIBM_aibm_1_dim_rdcdc = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length);
				strReturn = new String(commonByteArray_AIBM_aibm_1_dim_rdcdc, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIBM_aibm_1_dim_rdcdc) {

				try {

					int length = 0;

					this.URG_EPISODE = readInteger(dis);

					this.DATE_OF_BIRTH = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SEX = null;
					} else {
						this.SEX = dis.readChar();
					}

					this.DISTRICT = readString(dis);

					this.DT_ADMITION_URG = readDate(dis);

					this.ID_EXT_CAUSE = readInteger(dis);

					this.DESC_EXTERNAL_CAUSE = readString(dis);

					this.ID_PROF_ADMITION = readInteger(dis);

					this.DT_ADMITION_TRAIGE = readDate(dis);

					this.ID_PROF_TRIAGE = readInteger(dis);

					this.PAIN_SCALE = readInteger(dis);

					this.ID_COLOR = readInteger(dis);

					this.DESC_COLOR = readString(dis);

					this.COD_DIAGNOSIS = readString(dis);

					this.DIAGNOSIS = readString(dis);

					this.DIAGNOSIS_NOTES = readString(dis);

					this.DT_DIAGNOSIS = readDate(dis);

					this.ID_PROF_DIAGNOSIS = readInteger(dis);

					this.ID_DESTINATION = readInteger(dis);

					this.DESC_DESTINATION = readString(dis);

					this.ID_PROF_DISCHARGE = readInteger(dis);

					this.DT_DISCHARGE = readDate(dis);

					this.ID_REASON = readInteger(dis);

					this.DESC_REASON = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.URG_EPISODE, dos);

				// java.util.Date

				writeDate(this.DATE_OF_BIRTH, dos);

				// Character

				if (this.SEX == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.SEX);
				}

				// String

				writeString(this.DISTRICT, dos);

				// java.util.Date

				writeDate(this.DT_ADMITION_URG, dos);

				// Integer

				writeInteger(this.ID_EXT_CAUSE, dos);

				// String

				writeString(this.DESC_EXTERNAL_CAUSE, dos);

				// Integer

				writeInteger(this.ID_PROF_ADMITION, dos);

				// java.util.Date

				writeDate(this.DT_ADMITION_TRAIGE, dos);

				// Integer

				writeInteger(this.ID_PROF_TRIAGE, dos);

				// Integer

				writeInteger(this.PAIN_SCALE, dos);

				// Integer

				writeInteger(this.ID_COLOR, dos);

				// String

				writeString(this.DESC_COLOR, dos);

				// String

				writeString(this.COD_DIAGNOSIS, dos);

				// String

				writeString(this.DIAGNOSIS, dos);

				// String

				writeString(this.DIAGNOSIS_NOTES, dos);

				// java.util.Date

				writeDate(this.DT_DIAGNOSIS, dos);

				// Integer

				writeInteger(this.ID_PROF_DIAGNOSIS, dos);

				// Integer

				writeInteger(this.ID_DESTINATION, dos);

				// String

				writeString(this.DESC_DESTINATION, dos);

				// Integer

				writeInteger(this.ID_PROF_DISCHARGE, dos);

				// java.util.Date

				writeDate(this.DT_DISCHARGE, dos);

				// Integer

				writeInteger(this.ID_REASON, dos);

				// String

				writeString(this.DESC_REASON, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("URG_EPISODE=" + String.valueOf(URG_EPISODE));
			sb.append(",DATE_OF_BIRTH=" + String.valueOf(DATE_OF_BIRTH));
			sb.append(",SEX=" + String.valueOf(SEX));
			sb.append(",DISTRICT=" + DISTRICT);
			sb.append(",DT_ADMITION_URG=" + String.valueOf(DT_ADMITION_URG));
			sb.append(",ID_EXT_CAUSE=" + String.valueOf(ID_EXT_CAUSE));
			sb.append(",DESC_EXTERNAL_CAUSE=" + DESC_EXTERNAL_CAUSE);
			sb.append(",ID_PROF_ADMITION=" + String.valueOf(ID_PROF_ADMITION));
			sb.append(",DT_ADMITION_TRAIGE=" + String.valueOf(DT_ADMITION_TRAIGE));
			sb.append(",ID_PROF_TRIAGE=" + String.valueOf(ID_PROF_TRIAGE));
			sb.append(",PAIN_SCALE=" + String.valueOf(PAIN_SCALE));
			sb.append(",ID_COLOR=" + String.valueOf(ID_COLOR));
			sb.append(",DESC_COLOR=" + DESC_COLOR);
			sb.append(",COD_DIAGNOSIS=" + COD_DIAGNOSIS);
			sb.append(",DIAGNOSIS=" + DIAGNOSIS);
			sb.append(",DIAGNOSIS_NOTES=" + DIAGNOSIS_NOTES);
			sb.append(",DT_DIAGNOSIS=" + String.valueOf(DT_DIAGNOSIS));
			sb.append(",ID_PROF_DIAGNOSIS=" + String.valueOf(ID_PROF_DIAGNOSIS));
			sb.append(",ID_DESTINATION=" + String.valueOf(ID_DESTINATION));
			sb.append(",DESC_DESTINATION=" + DESC_DESTINATION);
			sb.append(",ID_PROF_DISCHARGE=" + String.valueOf(ID_PROF_DISCHARGE));
			sb.append(",DT_DISCHARGE=" + String.valueOf(DT_DISCHARGE));
			sb.append(",ID_REASON=" + String.valueOf(ID_REASON));
			sb.append(",DESC_REASON=" + DESC_REASON);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				reasonStruct reason = new reasonStruct();
				row1Struct row1 = new row1Struct();
				destinationStruct destination = new destinationStruct();
				row3Struct row3 = new row3Struct();
				causeStruct cause = new causeStruct();
				row4Struct row4 = new row4Struct();
				districtStruct district = new districtStruct();
				row5Struct row5 = new row5Struct();
				colorStruct color = new colorStruct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tDBOutput_8 = 0;

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;

				int rejectedCount_tDBOutput_8 = 0;

				String tableName_tDBOutput_8 = "Dim_Reason";
				boolean whetherReject_tDBOutput_8 = false;

				java.util.Calendar calendar_tDBOutput_8 = java.util.Calendar.getInstance();
				calendar_tDBOutput_8.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_8 = calendar_tDBOutput_8.getTime().getTime();
				calendar_tDBOutput_8.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_8 = calendar_tDBOutput_8.getTime().getTime();
				long date_tDBOutput_8;

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbProperties_tDBOutput_8 = "noDatetimeStringSync=true";
				String url_tDBOutput_8 = null;
				if (dbProperties_tDBOutput_8 == null || dbProperties_tDBOutput_8.trim().length() == 0) {
					url_tDBOutput_8 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_8 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_8.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_8 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_8 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ properties_tDBOutput_8;
				}
				String driverClass_tDBOutput_8 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_8 = "root";

				final String decryptedPassword_tDBOutput_8 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:v4yd6mP1o35gnO5v7e3G6Cd4w6Urp8N07sxHvW2OwA0eNqDhPQ==");

				String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;
				java.lang.Class.forName(driverClass_tDBOutput_8);

				conn_tDBOutput_8 = java.sql.DriverManager.getConnection(url_tDBOutput_8, dbUser_tDBOutput_8,
						dbPwd_tDBOutput_8);

				resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
				conn_tDBOutput_8.setAutoCommit(false);
				int commitEvery_tDBOutput_8 = 10000;
				int commitCounter_tDBOutput_8 = 0;

				int count_tDBOutput_8 = 0;

				String insert_tDBOutput_8 = "INSERT INTO `" + "Dim_Reason"
						+ "` (`id_reason`,`desc_reason`) VALUES (?,?)";
				int batchSize_tDBOutput_8 = 100;
				int batchSizeCounter_tDBOutput_8 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "reason");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int id_reason;
					String desc_reason;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.id_reason;

							result = prime * result + ((this.desc_reason == null) ? 0 : this.desc_reason.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.id_reason != other.id_reason)
							return false;

						if (this.desc_reason == null) {
							if (other.desc_reason != null)
								return false;

						} else if (!this.desc_reason.equals(other.desc_reason))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tDBOutput_7 = 0;

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;

				int rejectedCount_tDBOutput_7 = 0;

				String tableName_tDBOutput_7 = "Dim_Destination";
				boolean whetherReject_tDBOutput_7 = false;

				java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar.getInstance();
				calendar_tDBOutput_7.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_7 = calendar_tDBOutput_7.getTime().getTime();
				calendar_tDBOutput_7.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_7 = calendar_tDBOutput_7.getTime().getTime();
				long date_tDBOutput_7;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbProperties_tDBOutput_7 = "noDatetimeStringSync=true";
				String url_tDBOutput_7 = null;
				if (dbProperties_tDBOutput_7 == null || dbProperties_tDBOutput_7.trim().length() == 0) {
					url_tDBOutput_7 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_7 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_7.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_7 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_7 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ properties_tDBOutput_7;
				}
				String driverClass_tDBOutput_7 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_7 = "root";

				final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:9icTvwoljrFUoov6jrGJ2kAZVSIMNLjbTUct9Oxn5g4R+sEDdA==");

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
				java.lang.Class.forName(driverClass_tDBOutput_7);

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(url_tDBOutput_7, dbUser_tDBOutput_7,
						dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;

				String insert_tDBOutput_7 = "INSERT INTO `" + "Dim_Destination"
						+ "` (`id_destination`,`desc_destination`) VALUES (?,?)";
				int batchSize_tDBOutput_7 = 100;
				int batchSizeCounter_tDBOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "destination");
				}

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int id_destination;
					String desc_destination;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.id_destination;

							result = prime * result
									+ ((this.desc_destination == null) ? 0 : this.desc_destination.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.id_destination != other.id_destination)
							return false;

						if (this.desc_destination == null) {
							if (other.desc_destination != null)
								return false;

						} else if (!this.desc_destination.equals(other.desc_destination))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;

				int rejectedCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "Dim_Cause";
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
				calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				long date_tDBOutput_4;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbProperties_tDBOutput_4 = "noDatetimeStringSync=true";
				String url_tDBOutput_4 = null;
				if (dbProperties_tDBOutput_4 == null || dbProperties_tDBOutput_4.trim().length() == 0) {
					url_tDBOutput_4 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_4 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_4.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_4 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ properties_tDBOutput_4;
				}
				String driverClass_tDBOutput_4 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_4 = "root";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:x5xCUUwSWYXeb0kNaG8aXyV4XEgK17M8chxtiLCXU/AMXRtTZw==");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
				java.lang.Class.forName(driverClass_tDBOutput_4);

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, dbUser_tDBOutput_4,
						dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;

				String insert_tDBOutput_4 = "INSERT INTO `" + "Dim_Cause" + "` (`id_cause`,`desc_cause`) VALUES (?,?)";
				int batchSize_tDBOutput_4 = 100;
				int batchSizeCounter_tDBOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "cause");
				}

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int id_cause;
					String desc_cause;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.id_cause;

							result = prime * result + ((this.desc_cause == null) ? 0 : this.desc_cause.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.id_cause != other.id_cause)
							return false;

						if (this.desc_cause == null) {
							if (other.desc_cause != null)
								return false;

						} else if (!this.desc_cause.equals(other.desc_cause))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;

				int rejectedCount_tDBOutput_6 = 0;

				String tableName_tDBOutput_6 = "Dim_District";
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar.getInstance();
				calendar_tDBOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
				calendar_tDBOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
				long date_tDBOutput_6;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbProperties_tDBOutput_6 = "noDatetimeStringSync=true";
				String url_tDBOutput_6 = null;
				if (dbProperties_tDBOutput_6 == null || dbProperties_tDBOutput_6.trim().length() == 0) {
					url_tDBOutput_6 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_6 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_6.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_6 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ properties_tDBOutput_6;
				}
				String driverClass_tDBOutput_6 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_6 = "root";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:wu0yZmPiEd3phDUczyBSJT0vTQACqIchG/iohMM6m28ruvIIGg==");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;
				java.lang.Class.forName(driverClass_tDBOutput_6);

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6, dbUser_tDBOutput_6,
						dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;

				String insert_tDBOutput_6 = "INSERT INTO `" + "Dim_District"
						+ "` (`id_district`,`district`) VALUES (?,?)";
				int batchSize_tDBOutput_6 = 100;
				int batchSizeCounter_tDBOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "district");
				}

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String district;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.district == null) ? 0 : this.district.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.district == null) {
							if (other.district != null)
								return false;

						} else if (!this.district.equals(other.district))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;

				int rejectedCount_tDBOutput_5 = 0;

				String tableName_tDBOutput_5 = "Dim_Color";
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
				calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
				calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
				long date_tDBOutput_5;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbProperties_tDBOutput_5 = "noDatetimeStringSync=true";
				String url_tDBOutput_5 = null;
				if (dbProperties_tDBOutput_5 == null || dbProperties_tDBOutput_5.trim().length() == 0) {
					url_tDBOutput_5 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_5 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_5.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_5 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "urgency" + "?"
							+ properties_tDBOutput_5;
				}
				String driverClass_tDBOutput_5 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_5 = "root";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:hjJzMMDGpkwOlnlENsqgxhZcUzag9/6TjerPb7NF9u9NJ3B2ew==");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				java.lang.Class.forName(driverClass_tDBOutput_5);

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5,
						dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;

				String insert_tDBOutput_5 = "INSERT INTO `" + "Dim_Color" + "` (`id_color`,`desc_color`) VALUES (?,?)";
				int batchSize_tDBOutput_5 = 100;
				int batchSizeCounter_tDBOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());

				currentComponent = "tUniqRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "color");
				}

				int tos_count_tUniqRow_5 = 0;

				class KeyStruct_tUniqRow_5 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int id_color;
					String desc_color;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.id_color;

							result = prime * result + ((this.desc_color == null) ? 0 : this.desc_color.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

						if (this.id_color != other.id_color)
							return false;

						if (this.desc_color == null) {
							if (other.desc_color != null)
								return false;

						} else if (!this.desc_color.equals(other.desc_color))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;
				KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
				java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				reasonStruct reason_tmp = new reasonStruct();
				destinationStruct destination_tmp = new destinationStruct();
				causeStruct cause_tmp = new causeStruct();
				districtStruct district_tmp = new districtStruct();
				colorStruct color_tmp = new colorStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "/Users/ril/Desktop/AIBM/AIBM-TP/urgency_episodes_new.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/ril/Desktop/AIBM/AIBM-TP/urgency_episodes_new.csv", "UTF-8", ";", "##", false,
								1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.URG_EPISODE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"URG_EPISODE", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.URG_EPISODE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.DATE_OF_BIRTH = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DATE_OF_BIRTH", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.DATE_OF_BIRTH = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.SEX = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"SEX", "row2", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row2.SEX = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row2.DISTRICT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.DT_ADMITION_URG = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DT_ADMITION_URG", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.DT_ADMITION_URG = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.ID_EXT_CAUSE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_EXT_CAUSE", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.ID_EXT_CAUSE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row2.DESC_EXTERNAL_CAUSE = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.ID_PROF_ADMITION = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_PROF_ADMITION", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.ID_PROF_ADMITION = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.DT_ADMITION_TRAIGE = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DT_ADMITION_TRAIGE", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.DT_ADMITION_TRAIGE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.ID_PROF_TRIAGE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_PROF_TRIAGE", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.ID_PROF_TRIAGE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.PAIN_SCALE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"PAIN_SCALE", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.PAIN_SCALE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.ID_COLOR = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_COLOR", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.ID_COLOR = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row2.DESC_COLOR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row2.COD_DIAGNOSIS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row2.DIAGNOSIS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row2.DIAGNOSIS_NOTES = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.DT_DIAGNOSIS = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DT_DIAGNOSIS", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.DT_DIAGNOSIS = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.ID_PROF_DIAGNOSIS = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_PROF_DIAGNOSIS", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.ID_PROF_DIAGNOSIS = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 18;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.ID_DESTINATION = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_DESTINATION", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.ID_DESTINATION = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row2.DESC_DESTINATION = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.ID_PROF_DISCHARGE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_PROF_DISCHARGE", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.ID_PROF_DISCHARGE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 21;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.DT_DISCHARGE = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DT_DISCHARGE", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.DT_DISCHARGE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 22;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.ID_REASON = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_REASON", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.ID_REASON = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row2.DESC_REASON = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								reason = null;
								destination = null;
								cause = null;
								district = null;
								color = null;

// # Output table : 'reason'
								reason_tmp.id_reason = row2.ID_REASON;
								reason_tmp.desc_reason = row2.DESC_REASON;
								reason = reason_tmp;

// # Output table : 'destination'
								destination_tmp.id_destination = row2.ID_DESTINATION;
								destination_tmp.desc_destination = row2.DESC_DESTINATION;
								destination = destination_tmp;

// # Output table : 'cause'
								cause_tmp.id_cause = row2.ID_EXT_CAUSE;
								cause_tmp.desc_cause = row2.DESC_EXTERNAL_CAUSE;
								cause = cause_tmp;

// # Output table : 'district'
								district_tmp.id_district = 0;
								district_tmp.district = row2.DISTRICT;
								district = district_tmp;

// # Output table : 'color'
								color_tmp.id_color = row2.ID_COLOR;
								color_tmp.desc_color = row2.DESC_COLOR;
								color = color_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "reason"
							if (reason != null) {

								/**
								 * [tUniqRow_1 main ] start
								 */

								currentComponent = "tUniqRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "reason");
								}

								row1 = null;
								finder_tUniqRow_1.id_reason = reason.id_reason;
								if (reason.desc_reason == null) {
									finder_tUniqRow_1.desc_reason = null;
								} else {
									finder_tUniqRow_1.desc_reason = reason.desc_reason.toLowerCase();
								}
								finder_tUniqRow_1.hashCodeDirty = true;
								if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
									KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

									new_tUniqRow_1.id_reason = reason.id_reason;
									if (reason.desc_reason == null) {
										new_tUniqRow_1.desc_reason = null;
									} else {
										new_tUniqRow_1.desc_reason = reason.desc_reason.toLowerCase();
									}

									keystUniqRow_1.add(new_tUniqRow_1);
									if (row1 == null) {

										row1 = new row1Struct();
									}
									row1.id_reason = reason.id_reason;
									row1.desc_reason = reason.desc_reason;
									nb_uniques_tUniqRow_1++;
								} else {
									nb_duplicates_tUniqRow_1++;
								}

								tos_count_tUniqRow_1++;

								/**
								 * [tUniqRow_1 main ] stop
								 */

								/**
								 * [tUniqRow_1 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_begin ] stop
								 */
// Start of branch "row1"
								if (row1 != null) {

									/**
									 * [tDBOutput_8 main ] start
									 */

									currentComponent = "tDBOutput_8";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
									}

									whetherReject_tDBOutput_8 = false;
									pstmt_tDBOutput_8.setInt(1, row1.id_reason);

									if (row1.desc_reason == null) {
										pstmt_tDBOutput_8.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(2, row1.desc_reason);
									}

									pstmt_tDBOutput_8.addBatch();
									nb_line_tDBOutput_8++;

									batchSizeCounter_tDBOutput_8++;
									if (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8) {
										try {
											int countSum_tDBOutput_8 = 0;
											for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8.executeBatch()) {
												countSum_tDBOutput_8 += (countEach_tDBOutput_8 == java.sql.Statement.EXECUTE_FAILED
														? 0
														: 1);
											}
											insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_8 = 0;
											for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
												countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
														: countEach_tDBOutput_8);
											}
											insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
											System.err.println(e.getMessage());
										}

										batchSizeCounter_tDBOutput_8 = 0;
									}
									commitCounter_tDBOutput_8++;

									if (commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {

										try {
											int countSum_tDBOutput_8 = 0;
											for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8.executeBatch()) {
												countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : 1);
											}
											insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_8 = 0;
											for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
												countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
														: countEach_tDBOutput_8);
											}
											insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
											System.err.println(e.getMessage());

										}
										conn_tDBOutput_8.commit();
										commitCounter_tDBOutput_8 = 0;

									}

									tos_count_tDBOutput_8++;

									/**
									 * [tDBOutput_8 main ] stop
									 */

									/**
									 * [tDBOutput_8 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_8";

									/**
									 * [tDBOutput_8 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_8 process_data_end ] start
									 */

									currentComponent = "tDBOutput_8";

									/**
									 * [tDBOutput_8 process_data_end ] stop
									 */

								} // End of branch "row1"

								/**
								 * [tUniqRow_1 process_data_end ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_end ] stop
								 */

							} // End of branch "reason"

// Start of branch "destination"
							if (destination != null) {

								/**
								 * [tUniqRow_2 main ] start
								 */

								currentComponent = "tUniqRow_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "destination");
								}

								row3 = null;
								finder_tUniqRow_2.id_destination = destination.id_destination;
								if (destination.desc_destination == null) {
									finder_tUniqRow_2.desc_destination = null;
								} else {
									finder_tUniqRow_2.desc_destination = destination.desc_destination.toLowerCase();
								}
								finder_tUniqRow_2.hashCodeDirty = true;
								if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
									KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

									new_tUniqRow_2.id_destination = destination.id_destination;
									if (destination.desc_destination == null) {
										new_tUniqRow_2.desc_destination = null;
									} else {
										new_tUniqRow_2.desc_destination = destination.desc_destination.toLowerCase();
									}

									keystUniqRow_2.add(new_tUniqRow_2);
									if (row3 == null) {

										row3 = new row3Struct();
									}
									row3.id_destination = destination.id_destination;
									row3.desc_destination = destination.desc_destination;
									nb_uniques_tUniqRow_2++;
								} else {
									nb_duplicates_tUniqRow_2++;
								}

								tos_count_tUniqRow_2++;

								/**
								 * [tUniqRow_2 main ] stop
								 */

								/**
								 * [tUniqRow_2 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_2";

								/**
								 * [tUniqRow_2 process_data_begin ] stop
								 */
// Start of branch "row3"
								if (row3 != null) {

									/**
									 * [tDBOutput_7 main ] start
									 */

									currentComponent = "tDBOutput_7";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
									}

									whetherReject_tDBOutput_7 = false;
									pstmt_tDBOutput_7.setInt(1, row3.id_destination);

									if (row3.desc_destination == null) {
										pstmt_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_7.setString(2, row3.desc_destination);
									}

									pstmt_tDBOutput_7.addBatch();
									nb_line_tDBOutput_7++;

									batchSizeCounter_tDBOutput_7++;
									if (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7) {
										try {
											int countSum_tDBOutput_7 = 0;
											for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
												countSum_tDBOutput_7 += (countEach_tDBOutput_7 == java.sql.Statement.EXECUTE_FAILED
														? 0
														: 1);
											}
											insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_7 = 0;
											for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
												countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
														: countEach_tDBOutput_7);
											}
											insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
											System.err.println(e.getMessage());
										}

										batchSizeCounter_tDBOutput_7 = 0;
									}
									commitCounter_tDBOutput_7++;

									if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {

										try {
											int countSum_tDBOutput_7 = 0;
											for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
												countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : 1);
											}
											insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_7 = 0;
											for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
												countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
														: countEach_tDBOutput_7);
											}
											insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
											System.err.println(e.getMessage());

										}
										conn_tDBOutput_7.commit();
										commitCounter_tDBOutput_7 = 0;

									}

									tos_count_tDBOutput_7++;

									/**
									 * [tDBOutput_7 main ] stop
									 */

									/**
									 * [tDBOutput_7 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_7";

									/**
									 * [tDBOutput_7 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_7 process_data_end ] start
									 */

									currentComponent = "tDBOutput_7";

									/**
									 * [tDBOutput_7 process_data_end ] stop
									 */

								} // End of branch "row3"

								/**
								 * [tUniqRow_2 process_data_end ] start
								 */

								currentComponent = "tUniqRow_2";

								/**
								 * [tUniqRow_2 process_data_end ] stop
								 */

							} // End of branch "destination"

// Start of branch "cause"
							if (cause != null) {

								/**
								 * [tUniqRow_3 main ] start
								 */

								currentComponent = "tUniqRow_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "cause");
								}

								row4 = null;
								finder_tUniqRow_3.id_cause = cause.id_cause;
								if (cause.desc_cause == null) {
									finder_tUniqRow_3.desc_cause = null;
								} else {
									finder_tUniqRow_3.desc_cause = cause.desc_cause.toLowerCase();
								}
								finder_tUniqRow_3.hashCodeDirty = true;
								if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
									KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

									new_tUniqRow_3.id_cause = cause.id_cause;
									if (cause.desc_cause == null) {
										new_tUniqRow_3.desc_cause = null;
									} else {
										new_tUniqRow_3.desc_cause = cause.desc_cause.toLowerCase();
									}

									keystUniqRow_3.add(new_tUniqRow_3);
									if (row4 == null) {

										row4 = new row4Struct();
									}
									row4.id_cause = cause.id_cause;
									row4.desc_cause = cause.desc_cause;
									nb_uniques_tUniqRow_3++;
								} else {
									nb_duplicates_tUniqRow_3++;
								}

								tos_count_tUniqRow_3++;

								/**
								 * [tUniqRow_3 main ] stop
								 */

								/**
								 * [tUniqRow_3 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_3";

								/**
								 * [tUniqRow_3 process_data_begin ] stop
								 */
// Start of branch "row4"
								if (row4 != null) {

									/**
									 * [tDBOutput_4 main ] start
									 */

									currentComponent = "tDBOutput_4";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
									}

									whetherReject_tDBOutput_4 = false;
									pstmt_tDBOutput_4.setInt(1, row4.id_cause);

									if (row4.desc_cause == null) {
										pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_4.setString(2, row4.desc_cause);
									}

									pstmt_tDBOutput_4.addBatch();
									nb_line_tDBOutput_4++;

									batchSizeCounter_tDBOutput_4++;
									if (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
										try {
											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
												countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED
														? 0
														: 1);
											}
											insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
												countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
														: countEach_tDBOutput_4);
											}
											insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
											System.err.println(e.getMessage());
										}

										batchSizeCounter_tDBOutput_4 = 0;
									}
									commitCounter_tDBOutput_4++;

									if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

										try {
											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
												countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : 1);
											}
											insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
												countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
														: countEach_tDBOutput_4);
											}
											insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
											System.err.println(e.getMessage());

										}
										conn_tDBOutput_4.commit();
										commitCounter_tDBOutput_4 = 0;

									}

									tos_count_tDBOutput_4++;

									/**
									 * [tDBOutput_4 main ] stop
									 */

									/**
									 * [tDBOutput_4 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_4";

									/**
									 * [tDBOutput_4 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_4 process_data_end ] start
									 */

									currentComponent = "tDBOutput_4";

									/**
									 * [tDBOutput_4 process_data_end ] stop
									 */

								} // End of branch "row4"

								/**
								 * [tUniqRow_3 process_data_end ] start
								 */

								currentComponent = "tUniqRow_3";

								/**
								 * [tUniqRow_3 process_data_end ] stop
								 */

							} // End of branch "cause"

// Start of branch "district"
							if (district != null) {

								/**
								 * [tUniqRow_4 main ] start
								 */

								currentComponent = "tUniqRow_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "district");
								}

								row5 = null;
								if (district.district == null) {
									finder_tUniqRow_4.district = null;
								} else {
									finder_tUniqRow_4.district = district.district.toLowerCase();
								}
								finder_tUniqRow_4.hashCodeDirty = true;
								if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
									KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

									if (district.district == null) {
										new_tUniqRow_4.district = null;
									} else {
										new_tUniqRow_4.district = district.district.toLowerCase();
									}

									keystUniqRow_4.add(new_tUniqRow_4);
									if (row5 == null) {

										row5 = new row5Struct();
									}
									row5.id_district = district.id_district;
									row5.district = district.district;
									nb_uniques_tUniqRow_4++;
								} else {
									nb_duplicates_tUniqRow_4++;
								}

								tos_count_tUniqRow_4++;

								/**
								 * [tUniqRow_4 main ] stop
								 */

								/**
								 * [tUniqRow_4 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_4";

								/**
								 * [tUniqRow_4 process_data_begin ] stop
								 */
// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tDBOutput_6 main ] start
									 */

									currentComponent = "tDBOutput_6";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
									}

									whetherReject_tDBOutput_6 = false;
									pstmt_tDBOutput_6.setInt(1, row5.id_district);

									if (row5.district == null) {
										pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_6.setString(2, row5.district);
									}

									pstmt_tDBOutput_6.addBatch();
									nb_line_tDBOutput_6++;

									batchSizeCounter_tDBOutput_6++;
									if (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6) {
										try {
											int countSum_tDBOutput_6 = 0;
											for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
												countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED
														? 0
														: 1);
											}
											insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_6 = 0;
											for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
												countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
														: countEach_tDBOutput_6);
											}
											insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
											System.err.println(e.getMessage());
										}

										batchSizeCounter_tDBOutput_6 = 0;
									}
									commitCounter_tDBOutput_6++;

									if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {

										try {
											int countSum_tDBOutput_6 = 0;
											for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
												countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : 1);
											}
											insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_6 = 0;
											for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
												countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
														: countEach_tDBOutput_6);
											}
											insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
											System.err.println(e.getMessage());

										}
										conn_tDBOutput_6.commit();
										commitCounter_tDBOutput_6 = 0;

									}

									tos_count_tDBOutput_6++;

									/**
									 * [tDBOutput_6 main ] stop
									 */

									/**
									 * [tDBOutput_6 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_6";

									/**
									 * [tDBOutput_6 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_6 process_data_end ] start
									 */

									currentComponent = "tDBOutput_6";

									/**
									 * [tDBOutput_6 process_data_end ] stop
									 */

								} // End of branch "row5"

								/**
								 * [tUniqRow_4 process_data_end ] start
								 */

								currentComponent = "tUniqRow_4";

								/**
								 * [tUniqRow_4 process_data_end ] stop
								 */

							} // End of branch "district"

// Start of branch "color"
							if (color != null) {

								/**
								 * [tUniqRow_5 main ] start
								 */

								currentComponent = "tUniqRow_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "color");
								}

								row6 = null;
								finder_tUniqRow_5.id_color = color.id_color;
								if (color.desc_color == null) {
									finder_tUniqRow_5.desc_color = null;
								} else {
									finder_tUniqRow_5.desc_color = color.desc_color.toLowerCase();
								}
								finder_tUniqRow_5.hashCodeDirty = true;
								if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
									KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

									new_tUniqRow_5.id_color = color.id_color;
									if (color.desc_color == null) {
										new_tUniqRow_5.desc_color = null;
									} else {
										new_tUniqRow_5.desc_color = color.desc_color.toLowerCase();
									}

									keystUniqRow_5.add(new_tUniqRow_5);
									if (row6 == null) {

										row6 = new row6Struct();
									}
									row6.id_color = color.id_color;
									row6.desc_color = color.desc_color;
									nb_uniques_tUniqRow_5++;
								} else {
									nb_duplicates_tUniqRow_5++;
								}

								tos_count_tUniqRow_5++;

								/**
								 * [tUniqRow_5 main ] stop
								 */

								/**
								 * [tUniqRow_5 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_5";

								/**
								 * [tUniqRow_5 process_data_begin ] stop
								 */
// Start of branch "row6"
								if (row6 != null) {

									/**
									 * [tDBOutput_5 main ] start
									 */

									currentComponent = "tDBOutput_5";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
									}

									whetherReject_tDBOutput_5 = false;
									pstmt_tDBOutput_5.setInt(1, row6.id_color);

									if (row6.desc_color == null) {
										pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_5.setString(2, row6.desc_color);
									}

									pstmt_tDBOutput_5.addBatch();
									nb_line_tDBOutput_5++;

									batchSizeCounter_tDBOutput_5++;
									if (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5) {
										try {
											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
												countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED
														? 0
														: 1);
											}
											insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
												countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
														: countEach_tDBOutput_5);
											}
											insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
											System.err.println(e.getMessage());
										}

										batchSizeCounter_tDBOutput_5 = 0;
									}
									commitCounter_tDBOutput_5++;

									if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

										try {
											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
												countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : 1);
											}
											insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
												countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
														: countEach_tDBOutput_5);
											}
											insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
											System.err.println(e.getMessage());

										}
										conn_tDBOutput_5.commit();
										commitCounter_tDBOutput_5 = 0;

									}

									tos_count_tDBOutput_5++;

									/**
									 * [tDBOutput_5 main ] stop
									 */

									/**
									 * [tDBOutput_5 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_5";

									/**
									 * [tDBOutput_5 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_5 process_data_end ] start
									 */

									currentComponent = "tDBOutput_5";

									/**
									 * [tDBOutput_5 process_data_end ] stop
									 */

								} // End of branch "row6"

								/**
								 * [tUniqRow_5 process_data_end ] start
								 */

								currentComponent = "tUniqRow_5";

								/**
								 * [tUniqRow_5 process_data_end ] stop
								 */

							} // End of branch "color"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/Users/ril/Desktop/AIBM/AIBM-TP/urgency_episodes_new.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "reason");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (batchSizeCounter_tDBOutput_8 != 0) {
						int countSum_tDBOutput_8 = 0;

						for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_8 = 0;
					for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_8 = 0;

				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");

				}
				resourceMap.put("statementClosed_tDBOutput_8", true);
				if (commitCounter_tDBOutput_8 > 0) {

					conn_tDBOutput_8.commit();

				}

				conn_tDBOutput_8.close();

				resourceMap.put("finish_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8 + deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED", nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED", nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "destination");
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (batchSizeCounter_tDBOutput_7 != 0) {
						int countSum_tDBOutput_7 = 0;

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_7 = 0;

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");

				}
				resourceMap.put("statementClosed_tDBOutput_7", true);
				if (commitCounter_tDBOutput_7 > 0) {

					conn_tDBOutput_7.commit();

				}

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7 + deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED", nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED", nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "cause");
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (batchSizeCounter_tDBOutput_4 != 0) {
						int countSum_tDBOutput_4 = 0;

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_4 = 0;

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");

				}
				resourceMap.put("statementClosed_tDBOutput_4", true);
				if (commitCounter_tDBOutput_4 > 0) {

					conn_tDBOutput_4.commit();

				}

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES", nb_duplicates_tUniqRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "district");
				}

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (batchSizeCounter_tDBOutput_6 != 0) {
						int countSum_tDBOutput_6 = 0;

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_6 = 0;

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");

				}
				resourceMap.put("statementClosed_tDBOutput_6", true);
				if (commitCounter_tDBOutput_6 > 0) {

					conn_tDBOutput_6.commit();

				}

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES", nb_duplicates_tUniqRow_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "color");
				}

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (batchSizeCounter_tDBOutput_5 != 0) {
						int countSum_tDBOutput_5 = 0;

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_5 = 0;

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");

				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				if (commitCounter_tDBOutput_5 > 0) {

					conn_tDBOutput_5.commit();

				}

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
						if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_8")) != null) {
							pstmtToClose_tDBOutput_8.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_8") == null) {
						java.sql.Connection ctn_tDBOutput_8 = null;
						if ((ctn_tDBOutput_8 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_8")) != null) {
							try {
								ctn_tDBOutput_8.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_8) {
								String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :"
										+ sqlEx_tDBOutput_8.getMessage();
								System.err.println(errorMessage_tDBOutput_8);
							}
						}
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

				/**
				 * [tUniqRow_5 finally ] start
				 */

				currentComponent = "tUniqRow_5";

				/**
				 * [tUniqRow_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final aibm_1_dim_rdcdc aibm_1_dim_rdcdcClass = new aibm_1_dim_rdcdc();

		int exitCode = aibm_1_dim_rdcdcClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = aibm_1_dim_rdcdc.class.getClassLoader()
					.getResourceAsStream("aibm/aibm_1_dim_rdcdc_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = aibm_1_dim_rdcdc.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : aibm_1_dim_rdcdc");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 172149 characters generated by Talend Open Studio for Big Data on the 2
 * February 2021 at 17:03:15 WET
 ************************************************************************************************/