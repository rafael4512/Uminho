<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int N = 5;           // Numero máximo de carros.
typedef int[0,N-1] id_c;

int busy = 0;  // Para saber se existe carros à espera na rua "minor"

chan arrive[N];
urgent chan leave[N];
chan notify, mitr, mjtr;
broadcast chan minor_to_red; // Switch do semáforo da rua "minor" para vermelho
broadcast chan major_to_red; // Switch do semáforo da rua "Major" para vermelho</declaration>
	<template>
		<name x="5" y="5">Major_Road_Sem</name>
		<declaration>// Place local declarations here.
clock x;</declaration>
		<location id="id0" x="-75" y="-60">
			<name x="-85" y="-90">Switching_GY</name>
			<label kind="invariant" x="-119" y="-51">x&lt;=1</label>
		</location>
		<location id="id1" x="-331" y="-212">
			<name x="-363" y="-244">Switching_RG</name>
			<label kind="invariant" x="-357" y="-263">x&lt;=1</label>
		</location>
		<location id="id2" x="77" y="-140">
			<name x="-27" y="-164">Switching_YR</name>
			<label kind="invariant" x="8" y="-144">x&lt;=1</label>
		</location>
		<location id="id3" x="77" y="-212" color="#ff00ff">
			<name x="85" y="-244">Red</name>
			<label kind="invariant" x="68" y="-263">x&lt;=29</label>
		</location>
		<location id="id4" x="77" y="-60" color="#ffff00">
			<name x="93" y="-60">Yellow</name>
			<label kind="invariant" x="93" y="-44">x&lt;=5</label>
		</location>
		<location id="id5" x="-331" y="-60" color="#00ff00">
			<name x="-323" y="-84">Green</name>
			<label kind="invariant" x="-476" y="-85">x&lt;=30 || busy==0</label>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="117" y="-180">x==1</label>
			<label kind="synchronisation" x="85" y="-196">major_to_red!</label>
			<label kind="assignment" x="85" y="-180">x:=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="85" y="-123">x==5</label>
			<label kind="synchronisation" x="85" y="-108">mjtr!</label>
			<label kind="assignment" x="85" y="-93">x:=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="guard" x="-275" y="-35">x&gt;30</label>
			<label kind="synchronisation" x="-275" y="-20">notify?</label>
			<label kind="assignment" x="-275" y="-5">x:=0</label>
			<nail x="-299" y="20"/>
			<nail x="-75" y="20"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="guard" x="-19" y="-62">x==1</label>
			<label kind="assignment" x="-19" y="-52">x:=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="guard" x="-251" y="-84">(x==30) &amp;&amp; (busy==1)</label>
			<label kind="assignment" x="-219" y="-60">x:=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-323" y="-156">minor_to_red?</label>
			<label kind="assignment" x="-323" y="-140">x:=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-219" y="-244">mitr?</label>
			<label kind="assignment" x="-219" y="-229">x:=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-403" y="-35">x &lt;=30</label>
			<label kind="synchronisation" x="-403" y="-20">notify?</label>
			<nail x="-411" y="-35"/>
			<nail x="-355" y="-35"/>
		</transition>
	</template>
	<template>
		<name>Minor_Road_Sem</name>
		<declaration>clock y;</declaration>
		<location id="id6" x="-328" y="-64">
			<name x="-312" y="-80">Switching_YR</name>
			<label kind="invariant" x="-312" y="-56">y&lt;=1</label>
		</location>
		<location id="id7" x="-512" y="-80">
			<name x="-616" y="-96">Switching_RG</name>
			<label kind="invariant" x="-569" y="-76">y&lt;=1</label>
		</location>
		<location id="id8" x="-340" y="-204">
			<name x="-380" y="-244">Switching_GY</name>
			<label kind="invariant" x="-356" y="-188">y&lt;=1</label>
		</location>
		<location id="id9" x="-512" y="-208" color="#00ff00">
			<name x="-536" y="-240">Green</name>
			<label kind="invariant" x="-576" y="-216">y &lt;= 23</label>
		</location>
		<location id="id10" x="-160" y="-208" color="#ffff00">
			<name x="-184" y="-240">Yellow</name>
			<label kind="invariant" x="-152" y="-200">y &lt;= 5</label>
		</location>
		<location id="id11" x="-512" y="80" color="#ff00ff">
			<name x="-528" y="88">Red</name>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="guard" x="-272" y="-246">y==1</label>
			<label kind="assignment" x="-272" y="-230">y:=0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-450" y="-246">y==23</label>
			<label kind="assignment" x="-450" y="-230">y:=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-608" y="-159">major_to_red?</label>
			<label kind="assignment" x="-608" y="-144">y:=0</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-552" y="-15">mjtr?</label>
			<label kind="assignment" x="-552" y="0">y:=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id11"/>
			<label kind="guard" x="-416" y="0">y==1</label>
			<label kind="synchronisation" x="-416" y="17">minor_to_red!</label>
			<label kind="assignment" x="-416" y="32">y:=0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id6"/>
			<label kind="guard" x="-224" y="-159">y==5</label>
			<label kind="synchronisation" x="-224" y="-144">mitr!</label>
			<label kind="assignment" x="-224" y="-129">y:=0</label>
		</transition>
	</template>
	<template>
		<name>Sensor</name>
		<declaration>id_c list[N+1];
int[0,N] len;

// Put an element at the end of the queue
void add(id_c element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void rem()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
id_c front()
{
   return list[0];
}

// Returns the last element of the queue
id_c tail()
{
   return list[len - 1];
}</declaration>
		<location id="id12" x="-352" y="-104">
			<urgent/>
		</location>
		<location id="id13" x="24" y="16" color="#a9a9a9">
			<name x="48" y="32">Innactive</name>
		</location>
		<location id="id14" x="-232" y="-160" color="#ff00ff">
			<name x="-264" y="-200">Occupied</name>
		</location>
		<location id="id15" x="-352" y="16" color="#00ffff">
			<name x="-400" y="24">Empty</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-400" y="-191">notify!</label>
			<label kind="assignment" x="-400" y="-176">busy=1</label>
			<nail x="-352" y="-160"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="select" x="-412" y="-89">c : id_c</label>
			<label kind="synchronisation" x="-412" y="-59">arrive[c]?</label>
			<label kind="assignment" x="-412" y="-44">add(c)</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="select" x="-264" y="-272">c : id_c</label>
			<label kind="synchronisation" x="-264" y="-256">arrive[c]?</label>
			<label kind="assignment" x="-264" y="-241">add(c)</label>
			<nail x="-320" y="-216"/>
			<nail x="-160" y="-216"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="select" x="0" y="65">c : id_c</label>
			<label kind="synchronisation" x="0" y="81">arrive[c]?</label>
			<label kind="assignment" x="0" y="96">add(c)</label>
			<nail x="-8" y="64"/>
			<nail x="48" y="64"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="select" x="153" y="-42">c : id_c</label>
			<label kind="guard" x="152" y="-25">c == front()</label>
			<label kind="synchronisation" x="152" y="-10">leave[c]?</label>
			<label kind="assignment" x="152" y="5">rem()</label>
			<nail x="80" y="-24"/>
			<nail x="136" y="-8"/>
			<nail x="96" y="32"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-112" y="-104">len &gt; 0</label>
			<label kind="synchronisation" x="-112" y="-120">minor_to_red?</label>
			<nail x="-120" y="-80"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="guard" x="-152" y="-8">len == 0</label>
			<label kind="synchronisation" x="-264" y="-8">minor_to_red?</label>
			<label kind="assignment" x="-152" y="16">busy = 0</label>
			<nail x="-16" y="16"/>
			<nail x="-24" y="16"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-136" y="-184">major_to_red?</label>
			<nail x="24" y="-160"/>
		</transition>
	</template>
	<template>
		<name>Cars</name>
		<parameter>const id_c id</parameter>
		<declaration>clock x;</declaration>
		<location id="id16" x="-144" y="-8">
			<name x="-136" y="-32">Stopped</name>
		</location>
		<location id="id17" x="-442" y="-8" color="#000000">
			<name x="-538" y="-32">Non_Existent</name>
		</location>
		<location id="id18" x="-323" y="-8">
			<name x="-366" y="-42">Enter_System</name>
			<label kind="invariant" x="-333" y="9">x&lt;=1</label>
		</location>
		<init ref="id17"/>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="-246" y="-42">x==1</label>
			<label kind="synchronisation" x="-255" y="-25">arrive[id]!</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="assignment" x="-391" y="-8">x=0</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-248" y="72">leave[id]!</label>
			<nail x="-144" y="72"/>
			<nail x="-328" y="72"/>
		</transition>
	</template>
	<system>system Major_Road_Sem, Minor_Road_Sem, Sensor, Cars;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; Minor_Road_Sem.Green</formula>
			<comment>Reachability: (1) the minor-road light can go green; </comment>
		</query>
		<query>
			<formula>E&lt;&gt; Major_Road_Sem.Red</formula>
			<comment>Reachability: (2) the major-road light can go red.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Sensor.Occupied </formula>
			<comment>Reachability: (3) Eventually sensor will be in occupied</comment>
		</query>
		<query>
			<formula> E&lt;&gt; Sensor.Innactive </formula>
			<comment>Rechability: (4)  Eventually sensor will be in Innactive</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Safety: (1) the system never enters in a deadlock state; </comment>
		</query>
		<query>
			<formula>A[] not(Minor_Road_Sem.Green &amp;&amp;  Major_Road_Sem.Green)</formula>
			<comment>Safety: (2) the minor-road and major-road lights cannot be green at the same time.</comment>
		</query>
		<query>
			<formula>A[] not(Minor_Road_Sem.Yellow &amp;&amp;  Major_Road_Sem.Yellow)</formula>
			<comment>Safety: (3) the minor-road and major-road lights cannot be Yellow at the same time.</comment>
		</query>
		<query>
			<formula>A[] Sensor.Innactive imply not (Major_Road_Sem.Green)
</formula>
			<comment>Safety: (4) Whenever the sensor allows cars to pass, the major road traffic lights are red</comment>
		</query>
		<query>
			<formula>A[] Sensor.Occupied imply  not (Minor_Road_Sem.Green)</formula>
			<comment>Safety: (5)   Whenever the sensor does not allow cars to pass, the minor road traffic lights aren't green.</comment>
		</query>
		<query>
			<formula>A[] not(Minor_Road_Sem.Red &amp;&amp;  Major_Road_Sem.Red)</formula>
			<comment>Safety: (6) - the minor-road and major-road lights cannot be red at the same time.</comment>
		</query>
		<query>
			<formula>Sensor.Occupied --&gt; Sensor.Innactive</formula>
			<comment>Liveness: (1) If there are cars waiting they will eventually have green light.</comment>
		</query>
		<query>
			<formula>Sensor.Innactive --&gt; Major_Road_Sem.Green</formula>
			<comment>Liveness: (2) If the sensor allows cars to pass then the major road will eventually have Green.</comment>
		</query>
		<query>
			<formula></formula>
			<comment>--- End ---</comment>
		</query>
	</queries>
</nta>
