<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int N = 5;           // Numero m치ximo de carros.
typedef int[0,N-1] id_c;

int trafficMajor = 0; // 0 -&gt; Sem Transito, 1 -&gt; Transito ligeiro, 2 -&gt; Transito forte. NA rua principal
int trafficMinor = 0; // 0 -&gt; Sem Transito, 1 -&gt; Transito ligeiro, 2 -&gt; Transito forte. NA rua secund치ria

int isMajorGreen = 1; // 0 -&gt; No, 1 -&gt; Yes
int isMinorGreen = 0; // 0 -&gt; No, 1 -&gt; Yes

chan arrive_major[N], arrive_minor[N];
urgent chan leave_major[N], leave_minor[N];
chan notifyMajor, notifyMinor, leave_last_major, leave_last_minor;
broadcast chan minor_to_red; // Switch do sem치foro da rua "minor" para vermelho.
broadcast chan major_to_red; // Switch do sem치foro da rua "Major" para vermelho.
broadcast chan initial_sync; // Broadcast para fazer sync do switch de luzes.</declaration>
	<template>
		<name>Minor_Road_Sem</name>
		<declaration>clock y; </declaration>
		<location id="id0" x="-4607" y="-4496">
			<name x="-4591" y="-4512">Switching_YR</name>
			<label kind="invariant" x="-4591" y="-4488">y&lt;=1</label>
		</location>
		<location id="id1" x="-5095" y="-4472">
			<name x="-5191" y="-4464">Switching_RG</name>
			<label kind="invariant" x="-5088" y="-4460">y&lt;=1</label>
		</location>
		<location id="id2" x="-4807" y="-4624">
			<name x="-4847" y="-4608">Switching_GY</name>
			<label kind="invariant" x="-4791" y="-4624">y&lt;=1</label>
		</location>
		<location id="id3" x="-5199" y="-4624" color="#00ff00">
			<name x="-5266" y="-4650">Green</name>
			<label kind="invariant" x="-5436" y="-4633">trafficMajor==0 || trafficMinor&gt;=1</label>
		</location>
		<location id="id4" x="-4607" y="-4624" color="#ffff00">
			<name x="-4639" y="-4656">Yellow</name>
			<label kind="invariant" x="-4663" y="-4624">y &lt;= 5</label>
		</location>
		<location id="id5" x="-4607" y="-4376" color="#ff00ff">
			<name x="-4623" y="-4368">Red</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-5317" y="-4582">trafficMinor&gt;=1</label>
			<label kind="synchronisation" x="-5317" y="-4565">notifyMinor?</label>
			<nail x="-5223" y="-4582"/>
			<nail x="-5274" y="-4582"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-5308" y="-4709">trafficMajor==0</label>
			<label kind="synchronisation" x="-5308" y="-4693">leave_last_minor?</label>
			<nail x="-5198" y="-4667"/>
			<nail x="-5249" y="-4667"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-5067" y="-4725">trafficMajor&gt;0</label>
			<label kind="synchronisation" x="-5083" y="-4709">leave_last_minor?</label>
			<label kind="assignment" x="-5091" y="-4693">y=0, isMinorGreen=0</label>
			<nail x="-5160" y="-4674"/>
			<nail x="-4854" y="-4674"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-5066" y="-4658">trafficMinor==0</label>
			<label kind="synchronisation" x="-5058" y="-4642">notifyMinor?</label>
			<label kind="assignment" x="-5074" y="-4626">y=0, isMinorGreen=0</label>
			<nail x="-5151" y="-4607"/>
			<nail x="-4879" y="-4607"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-5191" y="-4544">major_to_red?</label>
			<label kind="assignment" x="-5191" y="-4528">isMinorGreen=1</label>
			<nail x="-5199" y="-4472"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-4719" y="-4624">y==1</label>
			<label kind="assignment" x="-4719" y="-4608">y:=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-4839" y="-4400">initial_sync?</label>
			<label kind="assignment" x="-4807" y="-4375">y=0</label>
			<nail x="-4943" y="-4376"/>
			<nail x="-4943" y="-4472"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id5"/>
			<label kind="guard" x="-4599" y="-4455">y==1</label>
			<label kind="synchronisation" x="-4599" y="-4440">minor_to_red!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-4599" y="-4591">y==5</label>
			<label kind="synchronisation" x="-4599" y="-4576">initial_sync!</label>
			<label kind="assignment" x="-4599" y="-4561">y:=0</label>
		</transition>
	</template>
	<template>
		<name>Major_Road_Sem</name>
		<declaration>clock xUp; </declaration>
		<location id="id6" x="-8449" y="-8857" color="#ff00ff">
			<name x="-8433" y="-8881">Red</name>
		</location>
		<location id="id7" x="-8641" y="-8857">
			<name x="-8699" y="-8846">Switching_RG</name>
			<label kind="invariant" x="-8691" y="-8889">xUp&lt;=1</label>
		</location>
		<location id="id8" x="-8449" y="-8537" color="#ffff00">
			<name x="-8433" y="-8537">Yellow</name>
			<label kind="invariant" x="-8433" y="-8521">xUp&lt;=5</label>
		</location>
		<location id="id9" x="-8449" y="-8713">
			<name x="-8433" y="-8737">Switching_YR</name>
			<label kind="invariant" x="-8433" y="-8721">xUp&lt;=1</label>
		</location>
		<location id="id10" x="-8641" y="-8713">
			<name x="-8665" y="-8745">Switching_GY</name>
			<label kind="invariant" x="-8633" y="-8705">xUp&lt;=1</label>
		</location>
		<location id="id11" x="-8953" y="-8857" color="#00ff00">
			<name x="-9016" y="-8856">Green</name>
			<label kind="invariant" x="-9176" y="-8840">trafficMinor==0 || trafficMajor&gt;=1</label>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-9137" y="-8945">trafficMinor==0</label>
			<label kind="synchronisation" x="-9137" y="-8930">leave_last_major?</label>
			<nail x="-9041" y="-8905"/>
			<nail x="-9137" y="-8905"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-8930" y="-8692">trafficMinor&gt;=1</label>
			<label kind="synchronisation" x="-8930" y="-8677">leave_last_major?</label>
			<label kind="assignment" x="-8930" y="-8662">xUp=0, isMajorGreen=0</label>
			<nail x="-8972" y="-8806"/>
			<nail x="-8972" y="-8696"/>
			<nail x="-8692" y="-8696"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-9001" y="-8945">trafficMajor&gt;=1</label>
			<label kind="synchronisation" x="-8993" y="-8929">notifyMajor?</label>
			<nail x="-8929" y="-8905"/>
			<nail x="-8977" y="-8905"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-8930" y="-8768">trafficMajor==0</label>
			<label kind="synchronisation" x="-8930" y="-8753">notifyMajor?</label>
			<label kind="assignment" x="-8930" y="-8738">xUp=0, isMajorGreen=0</label>
			<nail x="-8955" y="-8713"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-8849" y="-8881">minor_to_red?</label>
			<label kind="assignment" x="-8849" y="-8857">isMajorGreen=1</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-8572" y="-8880">initial_sync?</label>
			<label kind="assignment" x="-8572" y="-8855">xUp=0</label>
			<nail x="-8457" y="-8857"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="-8393" y="-8793">xUp==1</label>
			<label kind="synchronisation" x="-8441" y="-8808">major_to_red!</label>
			<label kind="assignment" x="-8441" y="-8793">xUp=0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-8441" y="-8655">xUp==5</label>
			<label kind="synchronisation" x="-8441" y="-8640">initial_sync!</label>
			<label kind="assignment" x="-8441" y="-8625">xUp=0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-8633" y="-8577">xUp==1</label>
			<label kind="assignment" x="-8633" y="-8561">xUp=0</label>
			<nail x="-8641" y="-8537"/>
		</transition>
	</template>
	<template>
		<name>Sensor_Major</name>
		<declaration>id_c list[N+1];
int[0,N] len=0;
int check = 1;

void updateTrafficVar(){
	if(len == 0)
		trafficMajor = 0;
	if(len &gt; 0 &amp;&amp; len &lt; 3)
		trafficMajor = 1;
	if(len &gt;= 3)
		trafficMajor = 2;
}

// Put an element at the end of the queue
void add(id_c element)
{
        list[len++] = element;
	    if(check==1){updateTrafficVar();}
}

// Remove the front element of the queue 
void rem()
{
        int i = 0;
	    len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
	
	    if(len&gt;0 || isMajorGreen==0){updateTrafficVar();}
}

// Returns the front element of the queue
id_c front()
{
   return list[0];
}

// Returns the last element of the queue
id_c tail()
{
   return list[len - 1];
}</declaration>
		<location id="id12" x="-1112" y="-40">
			<committed/>
		</location>
		<location id="id13" x="-696" y="264">
			<committed/>
		</location>
		<location id="id14" x="-856" y="-40" color="#ffc0cb">
			<name x="-840" y="-64">Standby</name>
		</location>
		<location id="id15" x="-856" y="176" color="#0000ff">
			<name x="-918" y="161">Inactive</name>
		</location>
		<location id="id16" x="-1113" y="178" color="#00ffff">
			<name x="-1161" y="154">Empty</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-1000" y="41">len&gt;0</label>
			<label kind="synchronisation" x="-1000" y="56">major_to_red?</label>
			<nail x="-904" y="136"/>
			<nail x="-904" y="0"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-1079" y="-93">notifyMinor!</label>
			<label kind="assignment" x="-1079" y="-77">updateTrafficVar(),
check=1</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id12"/>
			<label kind="select" x="-1216" y="40">c : id_c</label>
			<label kind="synchronisation" x="-1216" y="56">arrive_major[c]?</label>
			<label kind="assignment" x="-1216" y="71">add(c)</label>
			<nail x="-1112" y="160"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-688" y="208">leave_last_major!</label>
			<label kind="assignment" x="-688" y="224">updateTrafficVar()</label>
			<nail x="-696" y="200"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="select" x="-792" y="266">c : id_c</label>
			<label kind="guard" x="-792" y="281">c==front() &amp;&amp; len==1 &amp;&amp; isMajorGreen==1</label>
			<label kind="synchronisation" x="-792" y="296">leave_major[c]?</label>
			<label kind="assignment" x="-792" y="311">rem()</label>
			<nail x="-800" y="264"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="select" x="-688" y="112">c : id_c</label>
			<label kind="guard" x="-688" y="128">c == front() &amp;&amp; (len&gt;1 || isMajorGreen==0) &amp;&amp; len&gt;0</label>
			<label kind="synchronisation" x="-688" y="144">leave_major[c]?</label>
			<label kind="assignment" x="-688" y="160">rem()</label>
			<nail x="-696" y="176"/>
			<nail x="-696" y="112"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="select" x="-952" y="264">c : id_c</label>
			<label kind="synchronisation" x="-952" y="280">arrive_major[c]?</label>
			<label kind="assignment" x="-952" y="296">add(c)</label>
			<nail x="-944" y="264"/>
			<nail x="-880" y="264"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="select" x="-896" y="-144">c : id_c</label>
			<label kind="synchronisation" x="-896" y="-128">arrive_major[c]?</label>
			<label kind="assignment" x="-896" y="-112">add(c)</label>
			<nail x="-880" y="-88"/>
			<nail x="-832" y="-88"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-1024" y="152">len==0</label>
			<label kind="synchronisation" x="-1048" y="176">major_to_red?</label>
			<label kind="assignment" x="-1032" y="192">check=0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-850" y="51">minor_to_red?</label>
		</transition>
	</template>
	<template>
		<name>Sensor_Minor</name>
		<declaration>id_c list[N+1];
int[0,N] len2=0;
int check = 0;

void updateTrafficVar(){
	if(len2 == 0)
		trafficMinor = 0;
	if(len2 &gt; 0 &amp;&amp; len2 &lt; 2)
		trafficMinor = 1;
	if(len2 &gt;= 2)
		trafficMinor = 2;
}

// Put an element at the end of the queue
void add(id_c element)
{
        list[len2++] = element;
	if(check==1){updateTrafficVar();}
}

// Remove the front element of the queue
void rem()
{
        int i = 0;
        len2 -= 1;
        while (i &lt; len2)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
	
	    if(len2&gt;0 || isMinorGreen==0){updateTrafficVar();}
}

// Returns the front element of the queue
id_c front()
{
   return list[0];
}

// Returns the last element of the queue
id_c tail()
{
   return list[len2 - 1];
}</declaration>
		<location id="id17" x="328" y="-256">
			<committed/>
		</location>
		<location id="id18" x="-184" y="48">
			<committed/>
		</location>
		<location id="id19" x="152" y="-144" color="#0000ff">
			<name x="88" y="-144">Inactive</name>
		</location>
		<location id="id20" x="-184" y="-144" color="#ffc0cb">
			<name x="-168" y="-144">Standby</name>
		</location>
		<location id="id21" x="-8" y="48" color="#00ffff">
			<name x="-24" y="16">Empty</name>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="select" x="136" y="-328">c : id_c</label>
			<label kind="guard" x="136" y="-312">c==front() &amp;&amp; len2==1 &amp;&amp; isMinorGreen==1</label>
			<label kind="synchronisation" x="136" y="-296">leave_minor[c]?</label>
			<label kind="assignment" x="136" y="-280">rem()</label>
			<nail x="112" y="-184"/>
			<nail x="112" y="-256"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="336" y="-192">leave_last_minor!</label>
			<label kind="assignment" x="336" y="-176">updateTrafficVar()</label>
			<nail x="328" y="-72"/>
			<nail x="176" y="-72"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id18"/>
			<label kind="select" x="-144" y="50">c : id_c</label>
			<label kind="synchronisation" x="-144" y="64">arrive_minor[c]?</label>
			<label kind="assignment" x="-144" y="79">add(c)</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-304" y="-64">notifyMajor!</label>
			<label kind="assignment" x="-304" y="-48">updateTrafficVar(),
check=1</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-51" y="-238">len2&gt;0</label>
			<label kind="synchronisation" x="-75" y="-222">minor_to_red?</label>
			<nail x="89" y="-199"/>
			<nail x="-127" y="-199"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="select" x="200" y="-152">c : id_c</label>
			<label kind="guard" x="200" y="-136">c==front() &amp;&amp; (len2&gt;1 || isMinorGreen==0) &amp;&amp; len2&gt;0</label>
			<label kind="synchronisation" x="200" y="-120">leave_minor[c]?</label>
			<label kind="assignment" x="200" y="-104">rem()</label>
			<nail x="192" y="-96"/>
			<nail x="192" y="-144"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="select" x="136" y="-240">c : id_c</label>
			<label kind="synchronisation" x="136" y="-224">arrive_minor[c]?</label>
			<label kind="assignment" x="136" y="-208">add(c)</label>
			<nail x="152" y="-184"/>
			<nail x="200" y="-184"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id20"/>
			<label kind="select" x="-248" y="-248">c : id_c</label>
			<label kind="synchronisation" x="-248" y="-232">arrive_minor[c]?</label>
			<label kind="assignment" x="-248" y="-216">add(c)</label>
			<nail x="-184" y="-192"/>
			<nail x="-232" y="-192"/>
			<nail x="-232" y="-144"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="guard" x="152" y="41">len2 == 0</label>
			<label kind="synchronisation" x="152" y="56">minor_to_red?</label>
			<label kind="assignment" x="152" y="72">check=0</label>
			<nail x="152" y="48"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-68" y="-170">major_to_red?</label>
		</transition>
	</template>
	<template>
		<name>Cars</name>
		<parameter>const id_c id</parameter>
		<declaration>clock cc;</declaration>
		<location id="id22" x="-153" y="-68" color="#0000ff">
			<name x="-177" y="-100">Waiting</name>
		</location>
		<location id="id23" x="-518" y="-68" color="#ffa500">
			<name x="-629" y="-93">Not_in_System</name>
		</location>
		<location id="id24" x="-399" y="-68" color="#a9a9a9">
			<name x="-484" y="-102">Enter_System</name>
			<label kind="invariant" x="-425" y="-59">cc&lt;=1</label>
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="assignment" x="-484" y="-68">cc=0</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="guard" x="-314" y="-34">cc==1</label>
			<label kind="synchronisation" x="-340" y="-59">arrive_minor[id]!</label>
			<nail x="-365" y="-34"/>
			<nail x="-204" y="-34"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="guard" x="-314" y="-119">cc==1</label>
			<label kind="synchronisation" x="-340" y="-102">arrive_major[id]!</label>
			<nail x="-365" y="-102"/>
			<nail x="-204" y="-102"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-365" y="42">leave_major[id]!</label>
			<nail x="-129" y="-20"/>
			<nail x="-129" y="44"/>
			<nail x="-542" y="44"/>
			<nail x="-542" y="-20"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-368" y="8">leave_minor[id]!</label>
			<nail x="-177" y="-20"/>
			<nail x="-177" y="28"/>
			<nail x="-494" y="28"/>
			<nail x="-494" y="-20"/>
		</transition>
	</template>
	<system>system Major_Road_Sem, Minor_Road_Sem, Sensor_Major, Sensor_Minor, Cars;</system>
	<queries>
		<query>
			<formula></formula>
			<comment>--- Deadlock Properties ---</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>There is no deadlock</comment>
		</query>
		<query>
			<formula>E&lt;&gt; deadlock	</formula>
			<comment>Exists deadlock (must be false)</comment>
		</query>
		<query>
			<formula></formula>
			<comment>--- Reachability, Safety, Liveness Properties ---</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Minor_Road_Sem.Green</formula>
			<comment>Reachability: (1) the minor-road light can go green; </comment>
		</query>
		<query>
			<formula>E&lt;&gt; Major_Road_Sem.Red</formula>
			<comment>Reachability: (2) the major-road light can go red.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Sensor_Major.Standby</formula>
			<comment>Reachability: (3) Eventually cars will arrive</comment>
		</query>
		<query>
			<formula> E&lt;&gt; Sensor_Minor.Inactive</formula>
			<comment>Rechability: (4) Eventually the minor road will have a green light</comment>
		</query>
		<query>
			<formula>A[] not(Minor_Road_Sem.Green &amp;&amp;  Major_Road_Sem.Green)</formula>
			<comment>Safety: (1) the minor-road and major-road lights cannot be green at the same time.</comment>
		</query>
		<query>
			<formula>A[] not(Minor_Road_Sem.Yellow &amp;&amp;  Major_Road_Sem.Yellow)</formula>
			<comment>Safety: (2) the minor-road and major-road lights cannot be Yellow at the same time.</comment>
		</query>
		<query>
			<formula>A[] not(Minor_Road_Sem.Red &amp;&amp;  Major_Road_Sem.Red)</formula>
			<comment>Safety: (3) the minor-road and major-road lights cannot be red at the same time.</comment>
		</query>
		<query>
			<formula>E[] Sensor_Minor.Inactive imply Major_Road_Sem.Red</formula>
			<comment>Safety: (4) If the minor road sensor is inactive, then that means the major road is red.</comment>
		</query>
		<query>
			<formula>A[] Sensor_Minor.Standby imply  not (Minor_Road_Sem.Green)</formula>
			<comment>Safety: (5) The sensor for the minor road cannot be awaiting to release cars whilst the minor road is green</comment>
		</query>
		<query>
			<formula>A[] Major_Road_Sem.Yellow imply trafficMinor &gt;0 </formula>
			<comment>Safety (6) Whenever a major roadlight is yellow it means that there are cars waiting  in the minor road</comment>
		</query>
		<query>
			<formula>A[] Minor_Road_Sem.Yellow imply trafficMajor &gt;0</formula>
			<comment>Safety (7) Whenever a minor roadlight is yellow it means that there are cars waiting  in the major road</comment>
		</query>
		<query>
			<formula>Sensor_Minor.Standby --&gt; Minor_Road_Sem.Green</formula>
			<comment>Liveness: (1) If there are cars waiting on the minor road they will eventually have green light.</comment>
		</query>
		<query>
			<formula>Sensor_Major.Standby --&gt; Major_Road_Sem.Green</formula>
			<comment>Liveness: (2) If there are cars waiting on the major road they will eventually have green light.</comment>
		</query>
		<query>
			<formula>( trafficMajor&lt;trafficMinor &amp;&amp; Major_Road_Sem.Green ) --&gt;  (Major_Road_Sem.Red)</formula>
			<comment>Liveness: (4) If the minor road has more traffic than the major road, and is red, then eventually, it is guaranteed to get a green light</comment>
		</query>
		<query>
			<formula>( trafficMinor &lt; trafficMajor &amp;&amp; Minor_Road_Sem.Green ) --&gt;  (Minor_Road_Sem.Red)</formula>
			<comment>Liveness: (5) If the major road has more traffic than the minor road, and is red, then eventually, it is guaranteed to get a green light</comment>
		</query>
		<query>
			<formula></formula>
			<comment>--- Extra ---</comment>
		</query>
		<query>
			<formula>E[] Minor_Road_Sem.Red</formula>
			<comment>There is a path where for all states the minor road light is always red, that is, it never gets any traffic  (Safety)</comment>
		</query>
		<query>
			<formula></formula>
			<comment>--- Bottom Line ---</comment>
		</query>
	</queries>
</nta>
