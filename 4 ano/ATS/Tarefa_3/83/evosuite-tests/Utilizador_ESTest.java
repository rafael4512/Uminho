/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:36:28 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("[ROrR]TptG,", "5O@g_u7qVu", "5O@g_u7qVu", (String) null, 2353.9350582, 0.0, arrayList0);
      String string0 = utilizador1.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("\n", "\n", "N\u00E3o existem encomendas recebidas\n", "N\u00E3o existem encomendas recebidas\n", 3561.1244, 3561.1244, arrayList0);
      String string0 = utilizador0.getNome();
      assertEquals("N\u00E3o existem encomendas recebidas\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      double double0 = utilizador0.getLongitude();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("\n", "\n", "N\u00E3o existem encomendas recebidas\n", "N\u00E3o existem encomendas recebidas\n", 3561.1244, 3561.1244, arrayList0);
      double double0 = utilizador0.getLongitude();
      assertEquals(3561.1244, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador(" <--- O utilizador \u00E9: \nUtilizador\n\nC\u00F3digo: xoB=\"dQ\nNome: Cw&!zg&fP2xAT+%k*Q\nLatitude: 0.0\nLongitude: 0.0\n", "x<nzD4&0xo;", "w'Q5", "\n", (-1883.47), (-1.0), arrayList0);
      double double0 = utilizador0.getLongitude();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      double double0 = utilizador0.getLatitude();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("Comprador: ", "Comprador: ", "M", "Comprador: ", 627.0482520400548, 0.0, arrayList0);
      double double0 = utilizador0.getLatitude();
      assertEquals(627.0482520400548, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("BpN$A", "BpN$A", "BpN$A", "BpN$A", (-4299.64734304919), (-4299.64734304919), arrayList0);
      double double0 = utilizador0.getLatitude();
      assertEquals((-4299.64734304919), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("", "", (String) null, (String) null, (-4508.98223465), (-1.0), arrayList0);
      String string0 = utilizador0.getCodigo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setCodigo("N\u00E3o existem encomendas recebidas\n");
      String string0 = utilizador0.getCodigo();
      assertEquals("N\u00E3o existem encomendas recebidas\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getCodigo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("7g0v:;V:dEnj&\"", "i^}:5b}+o}#]A>K[Kx3", "xoB=\"dQ", "7g0v:;V:dEnj&\"", 0.0, 0.0, arrayList0);
      boolean boolean0 = utilizador0.equals("i^}:5b}+o}#]A>K[Kx3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo("^y-.K9");
      utilizador0.updateEncomendaPronta(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      Encomenda encomenda1 = utilizador0.devolveEncomenda("^y-.K9");
      assertTrue(encomenda1.isPreparada());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo("5");
      encomenda0.setEncomendaMedica(false);
      utilizador0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      Encomenda encomenda1 = utilizador0.devolveEncomenda("5");
      assertTrue(encomenda1.isEntregue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso(316.31505885119304);
      encomenda0.setCodigo("8");
      utilizador0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      Encomenda encomenda1 = utilizador0.devolveEncomenda("8");
      assertTrue(encomenda1.isLevantada());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-4975.46264885));
      encomenda0.setCodigo("7");
      utilizador0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      Encomenda encomenda1 = utilizador0.devolveEncomenda("7");
      assertTrue(encomenda1.isEntregue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador((String) null, "\n", "\n", "\n", 3375.484308676137, 3375.484308676137, arrayList0);
      Utilizador utilizador2 = utilizador1.clone();
      assertEquals(3375.484308676137, utilizador2.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("Comprador: ", "Comprador: ", "M", "Comprador: ", 627.0482520400548, 0.0, arrayList0);
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("1?f!t2", "Comprador: ", "6C4Gyp^.YH'-1?V\"zzb", "rO_5i>i&Y?K#)>m(u", (-4075.78), (-4075.78), arrayList0);
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals("6C4Gyp^.YH'-1?V\"zzb", utilizador1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.updateEncomendaPronta((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setEncomendas((ArrayList<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo((String) null);
      utilizador0.updateEncomendaLoja(encomenda0);
      // Undeclared exception!
      try { 
        utilizador0.devolveEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("ZQFXA^}`*TQ}*F=iFi", "ZQFXA^}`*TQ}*F=iFi", "ZQFXA^}`*TQ}*F=iFi", "ZQFXA^}`*TQ}*F=iFi", 0.0, 0.0, (ArrayList<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UtilizadorSistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      arrayList0.add(encomenda0);
      utilizador0.setEncomendas(arrayList0);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.updateEncomendaLoja(encomenda0);
      try { 
        utilizador0.devolveEncomenda("8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.updateEncomendaLoja(encomenda0);
      encomenda0.setCodigo("7");
      utilizador0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isLevantada());
      assertTrue(encomenda0.isEntregue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.updateEncomendaLoja(encomenda0);
      utilizador0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isLevantada());
      assertTrue(encomenda0.isEntregue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.updateEncomendaLoja(encomenda0);
      encomenda0.setCodigo("7");
      utilizador0.updateEncomendaPronta(encomenda0);
      assertTrue(encomenda0.isLevantada());
      assertTrue(encomenda0.isPreparada());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.updateEncomendaLoja(encomenda0);
      utilizador0.updateEncomendaPronta(encomenda0);
      assertTrue(encomenda0.isLevantada());
      assertTrue(encomenda0.isPreparada());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.updateEncomendaLoja(encomenda0);
      encomenda0.setCodigo("7");
      utilizador0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.updateEncomendaLoja(encomenda0);
      utilizador0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.printEncomendasPorEntregar();
      assertEquals("N\u00E3o existem encomendas por entregar\n", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      String string0 = utilizador0.printEncomendasPorEntregar();
      assertEquals("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.printEncomendasRecebidas();
      assertEquals("N\u00E3o existem encomendas recebidas\n", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("Comprador: ", "Comprador: ", "M", "Comprador: ", 627.0482520400548, 0.0, arrayList0);
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Instant instant0 = MockInstant.ofEpochSecond((-1L));
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda("Xo", "Comprador: ", "6>bLvDnn*p", 0.0, "Xo", "M", hashMap0, true, localDateTime0, true, true, true);
      utilizador0.updateEncomendaPronta(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      String string0 = utilizador0.printEncomendasRecebidas();
      assertEquals("\nEncomenda: \nC\u00F3digo: Xo\nC\u00F3digo do utilizador: Comprador: \nC\u00F3digo da loja: 6>bLvDnn*p\nPeso: 0.0\nComprador: Xo\nVendedor: M\nData de emiss\u00E3o da encomenda: 1969-12-31T05:59:59\nProdutos: \n{}\n", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.updateEncomendaLoja(encomenda0);
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.toString();
      assertEquals(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo: \nNome: \nLatitude: 0.0\nLongitude: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals("", utilizador1.getTypeUser());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      utilizador0.addEncomenda(encomenda0);
      assertEquals(" ", encomenda0.getCodigo_user());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
  }
}
