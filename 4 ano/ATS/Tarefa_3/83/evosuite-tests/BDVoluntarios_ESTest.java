/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:40:48 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BDVoluntarios_ESTest extends BDVoluntarios_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setRaio_acao(785.7010041857253);
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis2(loja0, voluntario0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setRaio_acao(157.05525565164);
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveisMed(loja0, utilizador0);
      assertFalse(list0.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("]Ch)", "]Ch)", "]Ch)", "]Ch)", true, 1.0, 1.0, localDate0, 2096.854448930588, linkedList0, (-1607.8212364), (-1), true, (-4533), (-1));
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis(loja0, utilizador0);
      assertTrue(list0.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setRaio_acao(2464.50914764773);
      bDVoluntarios0.add(voluntario0);
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("", "");
      assertTrue(voluntario1.equals((Object)voluntario0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLatitude(2464.50914764773);
      bDVoluntarios0.add(voluntario0);
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("", "");
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setDisponibilidade(true);
      bDVoluntarios0.add(voluntario0);
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("", "");
      assertEquals("", voluntario1.getPassword());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.updateVoluntario(voluntario0, (-1178.9));
      assertEquals((-1178.9), voluntario0.getClassificacao(), 0.01);
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("", "");
      assertEquals((-1178.9), voluntario1.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.updateVoluntario(voluntario0, 1.0);
      assertEquals(1.0, voluntario0.getClassificacao(), 0.01);
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("", "");
      assertEquals(1.0, voluntario1.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      String string0 = bDVoluntarios0.getEmail("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Locale.IsoCountryCode locale_IsoCountryCode0 = Locale.IsoCountryCode.PART3;
      Set<String> set0 = Locale.getISOCountries(locale_IsoCountryCode0);
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      Set<String> set1 = bDVoluntarios0.getCodigos();
      assertEquals(31, set1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      // Undeclared exception!
      try { 
        bDVoluntarios0.voluntariosDisponíveisMed(loja0, (Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        bDVoluntarios0.voluntariosDisponíveis((Loja) null, utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.updateVoluntario2((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPassword((String) null);
      bDVoluntarios0.add(voluntario0);
      // Undeclared exception!
      try { 
        bDVoluntarios0.tryLogin("", "k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.setVoluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.setCodigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      // Undeclared exception!
      try { 
        bDVoluntarios0.printVoluntarioLoja((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("Produtos: \n", "C\u00F3digo do utilizador: ", (String) null, (String) null, false, 0.0, 0.0, localDate0, 1601.04, linkedList0, (-2784.91176), 75, true, 75, 75);
      hashMap0.put("C\u00F3digo do utilizador: ", voluntario0);
      bDVoluntarios0.setVoluntarios(hashMap0);
      // Undeclared exception!
      try { 
        bDVoluntarios0.getEmail("Total de Voluntarios: \n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.existe((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = null;
      try {
        bDVoluntarios0 = new BDVoluntarios((BDVoluntarios) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      bDVoluntarios0.setCodigos(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.setVoluntarios(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      boolean boolean0 = bDVoluntarios0.existeEnc("C\u00F3digo de produto: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      try { 
        bDVoluntarios0.encontraEnc("]a{;i#i4BL:+k");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      try { 
        bDVoluntarios0.getEmail("W]Ib-fhG*TN0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("]Ch)", "]Ch)", "]Ch)", "]Ch)", true, 1.0, 1.0, localDate0, 2096.854448930588, linkedList0, (-1607.8212364), (-1), true, (-4533), (-1));
      bDVoluntarios0.add(voluntario0);
      String string0 = bDVoluntarios0.getEmail("]Ch)");
      assertEquals("]Ch)", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setDisponibilidade(true);
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis2(loja0, voluntario0);
      assertFalse(list0.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Loja loja0 = new Loja("uQ+", "Tempo de espera: ", "Tempo de espera: ", "6L&vVL", 3163.487865, (-962.271055), 0.0, arrayList0, 0);
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis2(loja0, voluntario0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      // Undeclared exception!
      try { 
        bDVoluntarios0.voluntariosDisponíveis2(loja0, (Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setDisponibilidade(true);
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveisMed(loja0, utilizador0);
      assertFalse(list0.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setLatitude((-1601.04));
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveisMed(loja0, utilizador0);
      assertFalse(list0.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLongitude(2095.1432505201165);
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveisMed(loja0, utilizador0);
      assertFalse(list0.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setDisponibilidade(true);
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis(loja0, utilizador0);
      assertTrue(list0.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setLatitude((-1.0));
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis(loja0, utilizador0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("]Ch)", "]Ch)", "]Ch)", "]Ch)", true, 1.0, 1.0, localDate0, 2096.854448930588, linkedList0, (-1607.8212364), (-1), true, (-4533), (-1));
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      loja0.setLatitude(2235.9775212059);
      Utilizador utilizador0 = new Utilizador();
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis(loja0, utilizador0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis(loja0, utilizador0);
      assertFalse(list0.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      loja0.setLatitude(1291.144495132681);
      String string0 = bDVoluntarios0.printVoluntarioLoja(loja0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Loja loja0 = new Loja();
      String string0 = bDVoluntarios0.printVoluntarioLoja(loja0);
      assertEquals(" --->  RATE --> 0.0 KMS: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      String string0 = bDVoluntarios0.printVoluntario();
      assertEquals(" --->  || RATE --> 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      String string0 = bDVoluntarios0.printVoluntario();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("", "f");
      assertNull(voluntario1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = bDVoluntarios0.tryLogin("WzSKXq(28h\"hPH8EN\"", "WzSKXq(28h\"hPH8EN\"");
      assertNull(voluntario0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      boolean boolean0 = bDVoluntarios0.existeCodigo("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.existeCodigo("?-UD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      boolean boolean0 = bDVoluntarios0.existe(voluntario0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("Produtos: \n", "C\u00F3digo do utilizador: ", (String) null, (String) null, false, 0.0, 0.0, localDate0, 1601.04, linkedList0, (-2784.91176), 75, true, 75, 75);
      boolean boolean0 = bDVoluntarios0.existe(voluntario0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.existeEmail("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.equals("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.equals(bDVoluntarios0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.equals(bDVoluntarios1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      String string0 = bDVoluntarios0.toString();
      assertEquals("Total de Voluntarios: \n{}", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.updateVoluntario((Voluntario) null, 5535.3667595502);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      boolean boolean0 = bDVoluntarios0.existeEmail("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.updateVoluntario2(voluntario0);
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      BDVoluntarios bDVoluntarios0 = null;
      try {
        bDVoluntarios0 = new BDVoluntarios(hashMap0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
  }
}
