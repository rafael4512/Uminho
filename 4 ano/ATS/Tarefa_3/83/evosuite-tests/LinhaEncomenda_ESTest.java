/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:41:30 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      
      linhaEncomenda1.setQuantidade((-1.0));
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 30l", "Saco de lixo 30l", 2277.19, 2277.19);
      linhaEncomenda0.setPreco(1.0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      linhaEncomenda1.setPreco(2277.19);
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertEquals(2277.19, linhaEncomenda1.getPreco(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 0.0, 1269.11104);
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1269.11104, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(">", ">", (-1634.198634116746), (-1634.198634116746));
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals((-1634.198634116746), double0, 0.01);
      assertEquals((-1634.198634116746), linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(" ", linhaEncomenda0.getDescricao());
      assertEquals(" ", linhaEncomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(">", ">", (-1634.198634116746), (-1634.198634116746));
      double double0 = linhaEncomenda0.getPreco();
      assertEquals((-1634.198634116746), double0, 0.01);
      assertEquals((-1634.198634116746), linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 0.0, 1269.11104);
      linhaEncomenda0.getDescricao();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(1269.11104, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0, (-1.0));
      linhaEncomenda0.getDescricao();
      assertEquals((-1.0), linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(" ", linhaEncomenda0.getCodigo());
      
      linhaEncomenda0.setCodigo((String) null);
      linhaEncomenda0.getCodigo();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(" ", linhaEncomenda0.getDescricao());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(">", ">", (-1634.198634116746), (-1634.198634116746));
      linhaEncomenda0.setCodigo("");
      linhaEncomenda0.getCodigo();
      assertEquals((-1634.198634116746), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-1634.198634116746), linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(">", ">", (-1634.198634116746), (-1634.198634116746));
      linhaEncomenda0.setQuantidade(899.893469986);
      linhaEncomenda0.clone();
      assertEquals(899.893469986, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Produto: ", "Saco de lixo 30l", 0.0, 2365.68346756);
      linhaEncomenda0.clone();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(2365.68346756, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(">", ">", (-1634.198634116746), (-1634.198634116746));
      linhaEncomenda0.clone();
      assertEquals((-1634.198634116746), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-1634.198634116746), linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setCodigo((String) null);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      // Undeclared exception!
      try { 
        linhaEncomenda0.equals(linhaEncomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(">", ">", (-1634.198634116746), (-1634.198634116746));
      linhaEncomenda0.getCodigo();
      assertEquals((-1634.198634116746), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-1634.198634116746), linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(">", ">", (-1634.198634116746), (-1634.198634116746));
      linhaEncomenda0.getDescricao();
      assertEquals((-1634.198634116746), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-1634.198634116746), linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 30l", "Saco de lixo 30l", 2277.19, 2277.19);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(2277.19, double0, 0.01);
      assertEquals(2277.19, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 30l", "Saco de lixo 30l", 2277.19, 2277.19);
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(2277.19, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(2277.19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 30l", "Saco de lixo 30l", 1.0, 1.0);
      boolean boolean0 = linhaEncomenda0.isMed();
      assertTrue(boolean0);
      assertEquals(1.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(1.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.isMed();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(" ", linhaEncomenda0.getDescricao());
      assertEquals(" ", linhaEncomenda0.getCodigo());
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(" ", linhaEncomenda0.getDescricao());
      
      linhaEncomenda0.setDescricao("Alcool");
      boolean boolean0 = linhaEncomenda0.isMed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      linhaEncomenda1.setQuantidade(2277.19);
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertEquals(2277.19, linhaEncomenda1.getQuantidade(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
      
      linhaEncomenda1.setPreco(1.0);
      boolean boolean0 = linhaEncomenda1.equals(linhaEncomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(" ", linhaEncomenda0.getDescricao());
      
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      linhaEncomenda0.setDescricao("");
      boolean boolean0 = linhaEncomenda1.equals(linhaEncomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      assertEquals(" ", linhaEncomenda1.getCodigo());
      
      linhaEncomenda1.setCodigo(",9\r:tEKrIO,,p3d>M");
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals("Saco de lixo de 50l");
      assertEquals(" ", linhaEncomenda0.getCodigo());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(" ", linhaEncomenda0.getDescricao());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(" ", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(" ", linhaEncomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertTrue(boolean0);
      assertEquals(" ", linhaEncomenda0.getDescricao());
      assertEquals(" ", linhaEncomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(" ", linhaEncomenda1.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(" ", linhaEncomenda1.getCodigo());
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "Desinfetante", (-175.9), 0.0);
      boolean boolean0 = linhaEncomenda0.isMed();
      assertTrue(boolean0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-175.9), linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.toString();
      assertEquals("\nC\u00F3digo de produto:  \nProduto:  \nQuantidade: 0.0\nPre\u00E7o: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(" ", linhaEncomenda0.getDescricao());
      
      linhaEncomenda0.setDescricao("Saco de lixo de 50l");
      boolean boolean0 = linhaEncomenda0.isMed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertTrue(boolean0);
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
      assertEquals(" ", linhaEncomenda1.getCodigo());
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals(" ", linhaEncomenda1.getDescricao());
  }
}
