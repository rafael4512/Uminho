/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:44:17 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BDUtilizador_ESTest extends BDUtilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      String string0 = "c}0^\"@._)a~7\\u~";
      Utilizador utilizador0 = new Utilizador("47??rv'WjM8N#go>?", "Q~", string0, "Q~", 0.0, 1.0, arrayList0);
      bDUtilizador0.updateUser2(utilizador0);
      Utilizador utilizador1 = bDUtilizador0.tryLogin("47??rv'WjM8N#go>?", "Q~");
      assertEquals("c}0^\"@._)a~7\\u~", utilizador1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("C\u00F3digo de produto: ", "C\u00F3digo de produto: ", "N\u00E3o existem encomendas por entregar\n", "C\u00F3digo de produto: ", 976.892091941796, (-1.0), arrayList0);
      bDUtilizador0.updateUser2(utilizador0);
      Utilizador utilizador1 = bDUtilizador0.tryLogin("C\u00F3digo de produto: ", "C\u00F3digo de produto: ");
      assertEquals((-1.0), utilizador1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Utilizador utilizador0 = new Utilizador();
      bDUtilizador0.add(utilizador0);
      Utilizador utilizador1 = bDUtilizador0.tryLogin("", "");
      assertEquals("", utilizador1.getTypeUser());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("C\u00F3digo de produto: ", "C\u00F3digo de produto: ", "N\u00E3o existem encomendas por entregar\n", "C\u00F3digo de produto: ", 976.892091941796, (-1.0), arrayList0);
      bDUtilizador0.updateUser2(utilizador0);
      Map<String, Utilizador> map0 = bDUtilizador0.getUsers();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, "eyf~aU^n63?~3", "eyf~aU^n63?~3", 0.0, 0.0, arrayList0);
      bDUtilizador0.updateUser2(utilizador0);
      String string0 = bDUtilizador0.getEmail("eyf~aU^n63?~3");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("-tb[:@e ", "C\u00F3digo: ", "-tb[:@e ", "C\u00F3digo: ", 0.0, 0.0, arrayList0);
      hashMap0.put(")#=;J{NWK}HP", utilizador0);
      BDUtilizador bDUtilizador0 = new BDUtilizador(hashMap0, linkedHashSet0);
      String string0 = bDUtilizador0.getEmail("-tb[:@e ");
      assertFalse(linkedHashSet0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Set<String> set0 = hashMap0.keySet();
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put("", utilizador0);
      BDUtilizador bDUtilizador0 = new BDUtilizador(hashMap0, set0);
      Set<String> set1 = bDUtilizador0.getCodigos();
      assertTrue(set1.contains(""));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      // Undeclared exception!
      try { 
        bDUtilizador0.updateUser2((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      // Undeclared exception!
      try { 
        bDUtilizador0.updateUser((Encomenda) null, (Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("GcP:B:QF-}ex`Gh7b", (String) null, (String) null, "GcP:B:QF-}ex`Gh7b", 2361.5, 2361.5, arrayList0);
      bDUtilizador0.updateUser2(utilizador0);
      // Undeclared exception!
      try { 
        bDUtilizador0.tryLogin("GcP:B:QF-}ex`Gh7b", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      // Undeclared exception!
      try { 
        bDUtilizador0.setUsers((Map<String, Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      // Undeclared exception!
      try { 
        bDUtilizador0.setCodigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (String) null, (-2800.1214), (-2800.1214), arrayList0);
      bDUtilizador0.updateUser2(utilizador0);
      // Undeclared exception!
      try { 
        bDUtilizador0.getEmail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      // Undeclared exception!
      try { 
        bDUtilizador0.existe((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      // Undeclared exception!
      try { 
        bDUtilizador0.add((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDUtilizador bDUtilizador0 = null;
      try {
        bDUtilizador0 = new BDUtilizador((Map<String, Utilizador>) null, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDUtilizador bDUtilizador0 = null;
      try {
        bDUtilizador0 = new BDUtilizador((BDUtilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Set<String> set0 = bDUtilizador0.getCodigos();
      bDUtilizador0.setCodigos(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Map<String, Utilizador> map0 = bDUtilizador0.getUsers();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      BDUtilizador bDUtilizador1 = new BDUtilizador(bDUtilizador0);
      assertTrue(bDUtilizador1.equals((Object)bDUtilizador0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      bDUtilizador0.setUsers(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Encomenda encomenda0 = new Encomenda();
      Utilizador utilizador0 = new Utilizador();
      bDUtilizador0.updateUser(encomenda0, utilizador0);
      String string0 = bDUtilizador0.getEmail("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      String string0 = "c}0^\"@._)a~7\\u~";
      Utilizador utilizador0 = new Utilizador("47??rv'WjM8N#go>?", "Q~", string0, "Q~", 0.0, 1.0, arrayList0);
      bDUtilizador0.updateUser2(utilizador0);
      try { 
        bDUtilizador0.getEmail((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("M4DY}w", "M4DY}w", "", "", (-13.713841602473575), 0.0, arrayList0);
      bDUtilizador0.updateUser2(utilizador0);
      Utilizador utilizador1 = bDUtilizador0.tryLogin("M4DY}w", "M4DY}w");
      assertEquals("", utilizador1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("Peso: ", "Peso: ", "Peso: ", "Peso: ", 1.0, 0.0, arrayList0);
      bDUtilizador0.updateUser2(utilizador0);
      Utilizador utilizador1 = bDUtilizador0.tryLogin("Peso: ", " 3&Pu");
      assertNull(utilizador1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Utilizador utilizador0 = bDUtilizador0.tryLogin("Z.u}~2{7bxhTsXfR<8`", "Password incorreta");
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("", "", "", "", 283.62234439583, 304.7037, arrayList0);
      bDUtilizador0.add(utilizador0);
      boolean boolean0 = bDUtilizador0.existeCodigo("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      boolean boolean0 = bDUtilizador0.existeCodigo(">i-~)#,Ow'G8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("Peso: ", "Peso: ", "Peso: ", "Peso: ", 1.0, 0.0, arrayList0);
      boolean boolean0 = bDUtilizador0.existe(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      boolean boolean0 = bDUtilizador0.existeEmail("5sbPKq:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = bDUtilizador0.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      BDUtilizador bDUtilizador1 = new BDUtilizador();
      boolean boolean0 = bDUtilizador0.equals(bDUtilizador1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      boolean boolean0 = bDUtilizador0.equals(bDUtilizador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      boolean boolean0 = bDUtilizador0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      String string0 = bDUtilizador0.toString();
      assertEquals("Total de utilizadores: \n{}", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Encomenda encomenda0 = new Encomenda();
      Utilizador utilizador0 = new Utilizador();
      bDUtilizador0.updateUser(encomenda0, utilizador0);
      boolean boolean0 = bDUtilizador0.existe(utilizador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("", "", "", "", 283.62234439583, 304.7037, arrayList0);
      bDUtilizador0.add(utilizador0);
      boolean boolean0 = bDUtilizador0.existeEmail("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      BDUtilizador bDUtilizador1 = bDUtilizador0.clone();
      assertNotSame(bDUtilizador0, bDUtilizador1);
  }
}
