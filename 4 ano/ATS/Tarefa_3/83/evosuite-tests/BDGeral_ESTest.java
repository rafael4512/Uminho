/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:30:37 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.StreamCorruptedException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BDGeral_ESTest extends BDGeral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Voluntario voluntario0 = new Voluntario();
      Double double0 = new Double(2689.76174942);
      bDGeral0.updateVoluntario(double0, voluntario0);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Utilizador utilizador0 = new Utilizador();
      bDGeral0.updateUser2(utilizador0);
      assertEquals("", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Encomenda encomenda0 = new Encomenda();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("dc{@u)/W<vlKj6E", "Vendedor: ", "Vendedor: ", "dc{@u)/W<vlKj6E", (-2133.39983), (-3947.0380249554914), arrayList0);
      bDGeral0.updateUser(encomenda0, utilizador0);
      assertEquals("Vendedor: ", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Loja loja0 = new Loja();
      bDGeral0.updateLoja2((Encomenda) null, loja0);
      assertEquals("", loja0.getEmail());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      bDGeral0.gravarFicheiro("Total de Produtos: \n");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Voluntario voluntario0 = new Voluntario();
      bDGeral0.addVoluntarioDisponivel(voluntario0);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Encomenda encomenda0 = new Encomenda();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Loja loja0 = new Loja("d},", "d},", (String) null, "'^S\"Nk-h7x", 1222.80957653562, 1222.80957653562, 1222.80957653562, arrayList0, 0);
      bDGeral0.updateLoja(encomenda0, loja0);
      Loja loja1 = bDGeral0.loginLoja("d},", "d},");
      assertEquals(0, loja1.getNrPessoasEmFila());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Encomenda encomenda0 = new Encomenda();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Loja loja0 = new Loja("d},", "d},", (String) null, "'^S\"Nk-h7x", 1222.80957653562, 1222.80957653562, 1222.80957653562, arrayList0, 1);
      bDGeral0.updateLoja(encomenda0, loja0);
      Loja loja1 = bDGeral0.loginLoja("d},", "d},");
      assertEquals("Loja", loja1.getTypeUser());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setCusto_km(0.2);
      bDGeral0.addTransporte(empresaTransportes0);
      EmpresaTransportes empresaTransportes1 = bDGeral0.loginEmpresa("", "");
      assertEquals("", empresaTransportes1.getTypeUser());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Set<String> set0 = bDUtilizador0.getCodigos();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      BDLojas bDLojas0 = new BDLojas();
      BDTransportes bDTransportes0 = new BDTransportes();
      BDProdutos bDProdutos0 = new BDProdutos();
      EncomendasAceites encomendasAceites0 = new EncomendasAceites();
      BDGeral bDGeral0 = new BDGeral(bDVoluntarios0, bDUtilizador0, bDLojas0, bDTransportes0, bDProdutos0, encomendasAceites0);
      EncomendasAceites encomendasAceites1 = bDGeral0.getEncomendasAceites();
      assertNotSame(encomendasAceites1, encomendasAceites0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDLojas bDLojas0 = new BDLojas();
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      BDTransportes bDTransportes0 = new BDTransportes();
      BDProdutos bDProdutos0 = new BDProdutos();
      EncomendasAceites encomendasAceites0 = new EncomendasAceites();
      BDGeral bDGeral0 = new BDGeral(bDVoluntarios0, bDUtilizador0, bDLojas0, bDTransportes0, bDProdutos0, encomendasAceites0);
      BDGeral bDGeral1 = bDGeral0.clone();
      assertNotSame(bDGeral0, bDGeral1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.updateVoluntario2((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.updateTransportes2((EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        bDGeral0.updateTransportes(double0, (EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.updateLoja3((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDLojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        bDGeral0.updateLoja(encomenda0, (Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDLojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Encomenda encomenda0 = new Encomenda();
      try { 
        bDGeral0.updateEncomendaVoluntario(encomenda0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Encomenda encomenda0 = new Encomenda();
      try { 
        bDGeral0.updateEncomendaTransportes(encomenda0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.lerFicheiro((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("<");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "e&$m<");
      BDGeral bDGeral0 = new BDGeral();
      try { 
        bDGeral0.lerFicheiro("<");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 6526246D
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-------------Empresas de transportes------------ \n");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BDGeral bDGeral0 = new BDGeral();
      try { 
        bDGeral0.lerFicheiro("-------------Empresas de transportes------------ \n");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.gravarFicheiro((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.addVoluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.addUser((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.addTransporte((EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.addProduto((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.addLoja((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDLojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.addEmpresaDisponivel((EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      BDLojas bDLojas0 = new BDLojas();
      BDTransportes bDTransportes0 = new BDTransportes();
      BDProdutos bDProdutos0 = new BDProdutos();
      EncomendasAceites encomendasAceites0 = new EncomendasAceites();
      BDGeral bDGeral0 = null;
      try {
        bDGeral0 = new BDGeral((BDVoluntarios) null, bDUtilizador0, bDLojas0, bDTransportes0, bDProdutos0, encomendasAceites0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      BDGeral bDGeral1 = null;
      try {
        bDGeral1 = new BDGeral(bDGeral0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      try { 
        bDGeral0.loginUser("dzCDa-qKO 3S3W", "dzCDa-qKO 3S3W");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.updateEncomendaVoluntario((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.getEncomendasAceites();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      BDLojas bDLojas0 = bDGeral0.getLojas();
      assertNotNull(bDLojas0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      BDUtilizador bDUtilizador0 = bDGeral0.getUtilizadores();
      assertNotNull(bDUtilizador0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      BDTransportes bDTransportes0 = bDGeral0.getTransportes();
      assertNotNull(bDTransportes0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      BDProdutos bDProdutos0 = bDGeral0.getProdutos();
      assertNotNull(bDProdutos0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      BDVoluntarios bDVoluntarios0 = bDGeral0.getVoluntarios();
      assertNotNull(bDVoluntarios0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      bDGeral0.addTransporte(empresaTransportes0);
      Set<Pair> set0 = bDGeral0.top10KmsPercorridos();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.addEncomenda(encomenda0);
      bDGeral0.addTransporte(empresaTransportes0);
      Set<Pair> set0 = bDGeral0.top10Encomendas();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      bDGeral0.addTransporte(empresaTransportes0);
      Set<Pair> set0 = bDGeral0.top10Encomendas();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.addEncomenda(encomenda0);
      bDGeral0.updateVoluntario2(voluntario0);
      Set<Pair> set0 = bDGeral0.top10Encomendas();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Voluntario voluntario0 = new Voluntario();
      bDGeral0.updateVoluntario2(voluntario0);
      Set<Pair> set0 = bDGeral0.top10Encomendas();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      try { 
        bDGeral0.loginEmpresa("sS[g]w,F{ES-]dp{_", "sS[g]w,F{ES-]dp{_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Set<String> set0 = bDUtilizador0.getCodigos();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      BDLojas bDLojas0 = new BDLojas();
      BDTransportes bDTransportes0 = new BDTransportes();
      BDProdutos bDProdutos0 = new BDProdutos();
      EncomendasAceites encomendasAceites0 = new EncomendasAceites();
      BDGeral bDGeral0 = new BDGeral(bDVoluntarios0, bDUtilizador0, bDLojas0, bDTransportes0, bDProdutos0, encomendasAceites0);
      try { 
        bDGeral0.loginLoja("-------------Lojas------------------------------\n", "-------------Lojas------------------------------\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      try { 
        bDGeral0.loginVoluntario("", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      bDGeral0.addProduto(linhaEncomenda0);
      bDGeral0.addProduto(linhaEncomenda0);
      assertFalse(linhaEncomenda0.isMed());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Loja loja0 = new Loja();
      Encomenda encomenda0 = new Encomenda();
      bDGeral0.updateLoja(encomenda0, loja0);
      bDGeral0.addLoja(loja0);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Loja loja0 = new Loja();
      bDGeral0.addLoja(loja0);
      assertEquals("", loja0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      bDGeral0.addTransporte(empresaTransportes0);
      EmpresaTransportes empresaTransportes1 = bDGeral0.loginEmpresa("", "");
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Utilizador utilizador0 = new Utilizador();
      bDGeral0.addUser(utilizador0);
      bDGeral0.addUser(utilizador0);
      assertEquals("", utilizador0.getTypeUser());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Voluntario voluntario0 = new Voluntario();
      bDGeral0.addVoluntario(voluntario0);
      bDGeral0.addVoluntario(voluntario0);
      assertEquals("", voluntario0.getEmail());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.updateUser2((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.addVoluntarioDisponivel((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Voluntario voluntario0 = new Voluntario();
      bDGeral0.updateVoluntario2(voluntario0);
      Voluntario voluntario1 = bDGeral0.loginVoluntario("", "");
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Loja loja0 = new Loja();
      bDGeral0.updateLoja3(loja0);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.updateLoja2((Encomenda) null, (Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDLojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        bDGeral0.updateVoluntario(double0, (Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      try { 
        bDGeral0.gravarFicheiro("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      try { 
        bDGeral0.lerFicheiro("-------------Empresas de transportes------------ \n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.updateEncomendaTransportes((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        bDGeral0.updateUser(encomenda0, (Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDUtilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      bDGeral0.addEmpresaDisponivel(empresaTransportes0);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      EncomendasAceites encomendasAceites0 = new EncomendasAceites();
      bDGeral0.setEncomendasAceites(encomendasAceites0);
      bDGeral0.updateAceites("S+kzN4|+Dth}bp");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      bDGeral0.updateTransportes2(empresaTransportes0);
      bDGeral0.addTransporte(empresaTransportes0);
      assertEquals("", empresaTransportes0.getEmail());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      Encomenda encomenda0 = new Encomenda();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Loja loja0 = new Loja("d},", "d},", (String) null, "'^S\"Nk-h7x", 1222.80957653562, 1222.80957653562, 1222.80957653562, arrayList0, (-1));
      bDGeral0.updateLoja(encomenda0, loja0);
      Loja loja1 = bDGeral0.loginLoja("d},", "d},");
      assertNull(loja1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      String string0 = bDGeral0.toString();
      assertEquals("=================== TOTAL DE UTILIZADORES REGISTADOS NO SISTEMA ===================-------------Utilizadores----------------------- \nTotal de utilizadores: \n{}\n-------------Empresas de transportes------------ \nTotal de Empresas de transporte: \n{}\n-------------Volunt\u00E1rios------------------------ \nTotal de Voluntarios: \n{}\n-------------Lojas------------------------------\nTotal de Lojas: \n{}\n-------------Produtos------------------------------\nTotal de Produtos: \n{}\n", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        bDGeral0.updateAceites("S+kzN4|+Dth}bp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      Set<String> set0 = bDUtilizador0.getCodigos();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      BDLojas bDLojas0 = new BDLojas();
      BDTransportes bDTransportes0 = new BDTransportes();
      BDProdutos bDProdutos0 = new BDProdutos();
      EncomendasAceites encomendasAceites0 = new EncomendasAceites();
      BDGeral bDGeral0 = new BDGeral(bDVoluntarios0, bDUtilizador0, bDLojas0, bDTransportes0, bDProdutos0, encomendasAceites0);
      BDGeral bDGeral1 = new BDGeral(bDGeral0);
      assertFalse(bDGeral1.equals((Object)bDGeral0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BDGeral bDGeral0 = new BDGeral();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Double double0 = new Double((-906.208697228));
      bDGeral0.updateTransportes(double0, empresaTransportes0);
      assertEquals("", empresaTransportes0.getCodigo());
  }
}
