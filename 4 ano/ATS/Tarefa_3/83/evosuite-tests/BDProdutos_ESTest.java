/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:46:19 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BDProdutos_ESTest extends BDProdutos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "RH&85k5RMk\"]p'6", (-3216.48), (-3216.48));
      bDProdutos0.add(linhaEncomenda0);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      bDProdutos0.setCodigos(linkedHashSet0);
      Set<String> set0 = bDProdutos0.getCodigos();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      // Undeclared exception!
      try { 
        bDProdutos0.setProdutos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      // Undeclared exception!
      try { 
        bDProdutos0.setCodigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      // Undeclared exception!
      try { 
        bDProdutos0.getProdMedicos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      // Undeclared exception!
      try { 
        bDProdutos0.add((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BDProdutos bDProdutos0 = null;
      try {
        bDProdutos0 = new BDProdutos((Map<String, LinhaEncomenda>) null, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDProdutos bDProdutos0 = null;
      try {
        bDProdutos0 = new BDProdutos((BDProdutos) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 30l", "Saco de lixo 30l", (-3216.48), (-1170.613875));
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      hashMap0.put("Saco de lixo 30l", linhaEncomenda0);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      hashMap0.put("Alcool", linhaEncomenda0);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>(1331, 1331);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 1043.9, 2270.790936);
      hashMap0.put("Saco de lixo 50l", linhaEncomenda0);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("`jQaY9iJ#K=>{.i", "=~ZDE<cQ#3@~#FQEu", (-344.5785), (-1.0));
      hashMap0.put("`jQaY9iJ#K=>{.i", linhaEncomenda0);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      hashMap0.put("Desinfetante", linhaEncomenda0);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      bDProdutos0.setProdutos(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Set<String> set0 = bDProdutos0.getCodigos();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 30l", "Saco de lixo 30l", (-2954.05), (-2954.05));
      bDProdutos0.add(linhaEncomenda0);
      boolean boolean0 = bDProdutos0.existeProd("Saco de lixo 30l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      try { 
        bDProdutos0.existeProd("s+IzAiLF6IBhA2I(;(+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      hashMap0.put("S\"H'o[5RW9ZS/)@6", linhaEncomenda0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDProdutos bDProdutos0 = new BDProdutos(hashMap0, linkedHashSet0);
      String string0 = bDProdutos0.listProdutosNormais();
      assertEquals("LISTA DE PRODUTOS\n--> S\"H'o[5RW9ZS/)@6\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 50l", "Saco de lixo 50l", 1.036758408592255, (-1738.0074653588629));
      bDProdutos0.add(linhaEncomenda0);
      String string0 = bDProdutos0.listProdutosNormais();
      assertEquals("LISTA DE PRODUTOS\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      hashMap0.put("Alcool", linhaEncomenda0);
      BDProdutos bDProdutos0 = new BDProdutos(hashMap0, linkedHashSet0);
      String string0 = bDProdutos0.listProdutosNormais();
      assertEquals("LISTA DE PRODUTOS\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("vwRZN:<{mHir0", "Desinfetante", (-559.773043104601), (-1.0));
      bDProdutos0.add(linhaEncomenda0);
      String string0 = bDProdutos0.listProdutosNormais();
      assertEquals("LISTA DE PRODUTOS\n", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 30l", "Saco de lixo 30l", (-3216.48), (-1170.613875));
      bDProdutos0.add(linhaEncomenda0);
      String string0 = bDProdutos0.listProdutosNormais();
      assertEquals("LISTA DE PRODUTOS\n", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Quantidade: ", "Quantidade: ", (-1736.8673768276803), (-1736.8673768276803));
      bDProdutos0.add(linhaEncomenda0);
      boolean boolean0 = bDProdutos0.existe("Quantidade: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      boolean boolean0 = bDProdutos0.existe("RH&85k5RMk\"]p'6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = bDProdutos0.equals(linhaEncomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      boolean boolean0 = bDProdutos0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      boolean boolean0 = bDProdutos0.equals(bDProdutos0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      boolean boolean0 = bDProdutos0.equals(bDProdutos1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 50l", "Saco de lixo 50l", 0.0, (-1738.0074653588629));
      bDProdutos0.add(linhaEncomenda0);
      String string0 = bDProdutos0.listProdutosMedicos();
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n--> Saco de lixo 50l\n", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      String string0 = bDProdutos0.toString();
      assertEquals("Total de Produtos: \n{}", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      assertNotSame(bDProdutos0, bDProdutos1);
  }
}
