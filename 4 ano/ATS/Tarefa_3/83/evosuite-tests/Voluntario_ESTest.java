/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:35:41 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Random.setNextRandom((-3193));
      int int0 = voluntario0.calculaAtrasos();
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(30, int0);
      assertFalse(voluntario0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Random.setNextRandom(75);
      int int0 = voluntario0.calculaAtrasos();
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, int0);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime1 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      String string0 = voluntario0.getInfoEncomendas(localDateTime0, localDateTime1);
      assertEquals("Entre as datas 14/2/2014 e 15/2/2014 foram realizadas 1 encomendas pelo volunt\u00E1rio \nEfetuou encomendas em 1 lojas", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Double double0 = new Double((-851.455473));
      voluntario0.updateRate(double0);
      voluntario0.updateRate(double0);
      assertEquals(2, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      
      voluntario1.setRaio_acao(1.0);
      boolean boolean0 = voluntario1.equals(voluntario0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      voluntario0.removeEncomenda(" ");
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      Instant instant0 = MockInstant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneId0);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("1ILN72e", "LinhaEnc\"omenda", "LinhaEnc\"omenda", 1.0, "LinhaEnc\"omenda", "LinhaEnc\"omenda", map0, false, localDateTime0, false, false, false);
      voluntario0.updateEncomendaLoja(encomenda1);
      assertTrue(encomenda1.isLevantada());
      
      voluntario0.removeEncomenda("1ILN72e");
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("Yhs`&&0W2)", "Yhs`&&0W2)", (String) null, (-3658), (String) null, "15&fx*feJL", hashMap0, false, (LocalDateTime) null, false, false, false);
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      voluntario0.removeEncomenda("Yhs`&&0W2)");
      assertEquals(0, voluntario0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      int int0 = voluntario0.getVelocidade();
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, int0);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("~8s0s*kcGJyY$(0", "BA[~'a<}; ]~", "~8s0s*kcGJyY$(0", "", false, 0, 0, localDate0, 0, linkedList0, (-1335.8150355979387), 0, true, (-1), 94);
      int int0 = voluntario0.getVelocidade();
      assertFalse(voluntario0.getDisponibilidade());
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals((-1335.8150355979387), voluntario0.getClassificacao(), 0.01);
      assertEquals((-1), int0);
      assertEquals(94, voluntario0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      
      voluntario0.setRaio_acao(1.0);
      double double0 = voluntario0.getRaio_acao();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      List<Encomenda> list0 = List.of();
      Voluntario voluntario0 = new Voluntario("", "\n", "", "k", false, 1.0, (-2526.26088), (LocalDate) null, (-2815.6858700551747), list0, 0.0, 0, true, 1066, (-2412));
      double double0 = voluntario0.getRaio_acao();
      assertEquals((-2815.6858700551747), double0, 0.01);
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(1066, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals((-2412), voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setNome((String) null);
      voluntario0.getNome();
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("+yVvt", "+yVvt", ">{l>yij", "+yVvt", false, 0.0, 252.9471085, localDate0, (-4417.119578), list0, (-4417.119578), 1088, true, 1088, 1088);
      voluntario1.getNome();
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals((-4417.119578), voluntario1.getRaio_acao(), 0.01);
      assertEquals(1088, voluntario1.getAvaliacoes());
      assertEquals(1088, voluntario1.getMinutosDeEspera());
      assertEquals((-4417.119578), voluntario1.getClassificacao(), 0.01);
      assertEquals(1088, voluntario1.getVelocidade());
      assertFalse(voluntario1.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertTrue(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNome();
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setMinutosDeEspera(1085);
      int int0 = voluntario0.getMinutosDeEspera();
      assertEquals(1085, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("O6", "2a*fo`JR0", "O6", "2a*fo`JR0", false, 0.0, 891.47648533, localDate0, 891.47648533, list0, (-419.811), 32, false, 32, (-1619176615));
      int int0 = voluntario1.getMinutosDeEspera();
      assertEquals(32, voluntario1.getAvaliacoes());
      assertEquals(891.47648533, voluntario1.getRaio_acao(), 0.01);
      assertEquals((-419.811), voluntario1.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals((-1619176615), int0);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(32, voluntario1.getVelocidade());
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getLongitude();
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(204, 1);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("}Yd`", "Quantidade: ", "}Yd`", ";y=^RJq", false, (-1.0), 434.333040616, localDate0, (-1.0), list0, 1, 204, false, 60, 60);
      voluntario1.getLongitude();
      assertFalse(voluntario1.getDisponibilidade());
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals((-1.0), voluntario1.getRaio_acao(), 0.01);
      assertEquals(60, voluntario1.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(1.0, voluntario1.getClassificacao(), 0.01);
      assertEquals(60, voluntario1.getVelocidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(204, voluntario1.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("ZI?eu2dfk<=sB37|~", "ZI?eu2dfk<=sB37|~", "ZI?eu2dfk<=sB37|~", "ZI?eu2dfk<=sB37|~", true, (-1.0), (-1.0), localDate0, (-2418.4), list0, (-1.0), (-1431655763), true, (-1431655763), (-1431655763));
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.getLongitude();
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals((-1431655763), voluntario1.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals((-1431655763), voluntario1.getVelocidade());
      assertTrue(voluntario2.getDisponibilidade());
      assertEquals((-2418.4), voluntario2.getRaio_acao(), 0.01);
      assertEquals((-1431655763), voluntario1.getAvaliacoes());
      assertTrue(voluntario2.aceitoTransporteMedicamentos());
      assertEquals((-1.0), voluntario2.getClassificacao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getLatitude();
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLatitude(1.0);
      voluntario0.getLatitude();
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLatitude((-1890.761));
      voluntario0.getLatitude();
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      Encomenda encomenda1 = voluntario0.getEncomenda(" ");
      assertTrue(encomenda1.isPreparada());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = Clock.tickMillis(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("X", "4#", "X", 1.0134961779163405, "tx3#w", "Ww)teM1W 4Mqq5Y7", map0, false, localDateTime0, true, true, true);
      voluntario0.updateEncomendaLoja(encomenda1);
      Encomenda encomenda2 = voluntario0.getEncomenda("X");
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertTrue(encomenda2.isLevantada());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: []", " <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: []", " <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: []", (-1.96), " <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: []", " <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: []", hashMap0, false, localDateTime0, false, false, false);
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      voluntario0.getEncomenda(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: []");
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("Nome: ", (String) null, "Nome: ", "Y!qh:J3tKcyfW", true, 234.6, 234.6, localDate0, 1, list0, 0.0, 0, true, 1, 1);
      boolean boolean0 = voluntario1.getDisponibilidade();
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(1, voluntario1.getVelocidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertTrue(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(1.0, voluntario1.getRaio_acao(), 0.01);
      assertEquals(1, voluntario1.getMinutosDeEspera());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertTrue(boolean0);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (String) null, (String) null, false, 3801.660451337255, 0.0, localDate0, 3411.36577357569, linkedList0, 0.0, 0, true, 0, (-2034676019));
      voluntario0.getCodigo();
      assertEquals(0, voluntario0.getAvaliacoes());
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals((-2034676019), voluntario0.getMinutosDeEspera());
      assertEquals(3411.36577357569, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setCodigo("C\u00F3digo do utilizador: ");
      voluntario0.getCodigo();
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getCodigo();
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(746L);
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario(" lojas", ">HB", ">HB", ">HB", true, 2616.3401, 2616.3401, localDate0, 0, list0, 1985, 0, false, (-2438), 0);
      double double0 = voluntario1.getClassificacao();
      assertEquals(1985.0, double0, 0.01);
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertTrue(voluntario1.getDisponibilidade());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals((-2438), voluntario1.getVelocidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario1.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds((-1), (-1), 0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("", "8).]5^%/=?Og%", "/7@)VK1Z(*DG", "/7@)VK1Z(*DG", false, (-1.0), (-1.0), localDate0, 0, linkedList0, (-1750.0), 0, false, 0, 0);
      double double0 = voluntario0.getClassificacao();
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals((-1750.0), double0, 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Double double0 = Double.valueOf(0.8010287991952995);
      voluntario0.updateRate(double0);
      int int0 = voluntario0.getAvaliacoes();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setAvaliacoes((-2034897519));
      int int0 = voluntario0.getAvaliacoes();
      assertEquals((-2034897519), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      List<Encomenda> list0 = List.of();
      Voluntario voluntario0 = new Voluntario("", "\n", "", "k", false, 1.0, (-2526.26088), (LocalDate) null, (-2815.6858700551747), list0, 0.0, 0, true, 1066, (-2412));
      Voluntario voluntario1 = voluntario0.clone();
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(1066, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals((-2412), voluntario0.getMinutosDeEspera());
      assertTrue(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals((-2815.6858700551747), voluntario0.getRaio_acao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("", (String) null, (String) null, "Saco de lixo de 50l", true, 4144.670230787456, (-1890.761), (LocalDate) null, 4144.670230787456, list0, (-1890.761), (-886), true, (-886), 0);
      Voluntario voluntario2 = voluntario1.clone();
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals((-1890.761), voluntario2.getClassificacao(), 0.01);
      assertEquals((-886), voluntario1.getAvaliacoes());
      assertTrue(voluntario2.aceitoTransporteMedicamentos());
      assertEquals(4144.670230787456, voluntario2.getRaio_acao(), 0.01);
      assertEquals((-886), voluntario1.getVelocidade());
      assertEquals(0, voluntario2.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertTrue(voluntario2.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1992L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("B!NR*=&LwanNYDHW", (String) null, (String) null, (String) null, false, 650.25772285, 1.0, localDate0, (-1992L), list0, 1.0, (-2147483645), false, (-948), (-1520));
      Voluntario voluntario2 = new Voluntario(voluntario1);
      Voluntario voluntario3 = voluntario2.clone();
      assertEquals((-1520), voluntario3.getMinutosDeEspera());
      assertFalse(voluntario3.aceitoTransporteMedicamentos());
      assertEquals((-2147483645), voluntario3.getAvaliacoes());
      assertEquals((-948), voluntario3.getVelocidade());
      assertEquals((-1992.0), voluntario3.getRaio_acao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario3.getDisponibilidade());
      assertEquals(1.0, voluntario2.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setAvaliacoes(938);
      voluntario0.clone();
      assertEquals(938, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("m+KUW}77J{q", ":r&P`", "C\u00F3digo: ", "HK_=", false, (-4624.022964181926), 1.0, (LocalDate) null, (-1694.007995), list0, (-0.08753779714008296), (-1858), false, (-1858), (-1858));
      Voluntario voluntario2 = new Voluntario(voluntario1);
      Voluntario voluntario3 = voluntario2.clone();
      assertEquals((-1858), voluntario3.getVelocidade());
      assertFalse(voluntario3.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals((-1694.007995), voluntario2.getRaio_acao(), 0.01);
      assertEquals((-0.08753779714008296), voluntario2.getClassificacao(), 0.01);
      assertEquals((-1858), voluntario3.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario3.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals((-1858), voluntario3.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("~8s0s*kcGJyY$(0", "BA[~'a<}; ]~", "~8s0s*kcGJyY$(0", "", false, 0, 0, localDate0, 0, linkedList0, (-1335.8150355979387), 0, true, (-1), 94);
      Voluntario voluntario1 = voluntario0.clone();
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(94, voluntario0.getMinutosDeEspera());
      assertEquals((-1335.8150355979387), voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertTrue(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals((-1), voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      
      voluntario0.aceitaMedicamentos(true);
      boolean boolean0 = voluntario0.aceitoTransporteMedicamentos();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      // Undeclared exception!
      try { 
        voluntario0.updateRate((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      // Undeclared exception!
      try { 
        voluntario0.updateEncomendaPreparada((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      // Undeclared exception!
      try { 
        voluntario0.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      // Undeclared exception!
      try { 
        voluntario0.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      // Undeclared exception!
      try { 
        voluntario0.setHistorico((List<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      // Undeclared exception!
      try { 
        voluntario0.removeEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      // Undeclared exception!
      try { 
        voluntario0.getInfoEncomendas((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      // Undeclared exception!
      try { 
        voluntario0.getEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo((String) null);
      voluntario0.updateEncomendaLoja(encomenda0);
      // Undeclared exception!
      try { 
        voluntario0.existe((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPassword((String) null);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      // Undeclared exception!
      try { 
        voluntario1.equals(voluntario0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UtilizadorSistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      // Undeclared exception!
      try { 
        voluntario0.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario("C\u00F3digo de volunt\u00E1rio: ", "C\u00F3digo de volunt\u00E1rio: ", "C\u00F3digo de volunt\u00E1rio: ", (String) null, true, (-347.5019138953), (-347.5019138953), (LocalDate) null, 252.9471085, (List<Encomenda>) null, (-0.08753779714008296), 1, true, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UtilizadorSistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setHistorico(list0);
      assertEquals(0, voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.getDisponibilidade();
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.aceitoTransporteMedicamentos();
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getInicio_transporte();
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      int int0 = voluntario0.getAvaliacoes();
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, int0);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      int int0 = voluntario0.getMinutosDeEspera();
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, int0);
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getClassificacao();
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, double0, 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("&Tr^SaBN", "x9$uD<pc5%YDKV(t", "x9$uD<pc5%YDKV(t", "C\u00F3digo do utilizador: ", true, 404.862315127591, (-123.998704), (LocalDate) null, 404.862315127591, linkedList0, (-1.0), 521, true, 521, (-1596));
      int int0 = voluntario0.getVelocidade();
      assertEquals(521, int0);
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals((-1.0), voluntario0.getClassificacao(), 0.01);
      assertEquals(404.862315127591, voluntario0.getRaio_acao(), 0.01);
      assertEquals((-1596), voluntario0.getMinutosDeEspera());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(521, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getRaio_acao();
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Random.setNextRandom(94);
      int int0 = voluntario0.calculaAtrasos();
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(30, int0);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      int int0 = voluntario0.calculaAtrasos();
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, int0);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Random.setNextRandom((-2021525695));
      int int0 = voluntario0.calculaAtrasos();
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(60, int0);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      int int0 = voluntario0.porLevantar();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      int int0 = voluntario0.porLevantar();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      int int0 = voluntario0.porLevantar();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      int int0 = voluntario0.porEntregar();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      int int0 = voluntario0.porEntregar();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("UtilizadorSistema", "0", "UtilizadorSistema", (-1.0), "0", "0", hashMap0, true, localDateTime0, false, true, true);
      voluntario0.updateEncomendaLoja(encomenda0);
      int int0 = voluntario0.porEntregar();
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Instant instant0 = MockInstant.ofEpochSecond(924L);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      String string0 = voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      assertEquals("Entre as datas 1/1/1970 e 1/1/1970 foram realizadas 0 encomendas pelo volunt\u00E1rio \nEfetuou encomendas em 0 lojas", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = Clock.tickMillis(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      String string0 = voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      assertEquals("Entre as datas 11/1/2021 e 11/1/2021 foram realizadas 0 encomendas pelo volunt\u00E1rio \nEfetuou encomendas em 0 lojas", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("UtilizadorSistema", "0", "UtilizadorSistema", (-1.0), "0", "0", hashMap0, true, localDateTime0, false, true, true);
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      String string0 = voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals("Entre as datas 14/2/2014 e 14/2/2014 foram realizadas 1 encomendas pelo volunt\u00E1rio \nEfetuou encomendas em 1 lojas", string0);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      boolean boolean0 = voluntario0.existe(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      boolean boolean0 = voluntario0.existe("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.addEncomenda(encomenda0);
      String string0 = voluntario0.getPreparadas();
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("0", string0);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      String string0 = voluntario0.getPreparadas();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      String string0 = voluntario0.getPreparadas();
      assertEquals("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      String string0 = voluntario0.getNaoEntregue();
      assertEquals("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      String string0 = voluntario0.getNaoEntregue();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Instant instant0 = MockInstant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneId0);
      Encomenda encomenda1 = new Encomenda("0", "0", "0", 0, "0", "0", hashMap0, false, localDateTime0, true, false, true);
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      voluntario0.updateEncomendaPreparada(encomenda1);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda1 = new Encomenda("KLu[V#UZ~pp", "KLu[V#UZ~pp", "KLu[V#UZ~pp", 555.64288405132, "KLu[V#UZ~pp", "KLu[V#UZ~pp", map0, false, localDateTime0, false, false, false);
      voluntario0.updateEncomendaLoja(encomenda1);
      assertTrue(encomenda1.isLevantada());
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Instant instant0 = MockInstant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneId0);
      Encomenda encomenda1 = new Encomenda("0", "0", "0", 0, "0", "0", hashMap0, false, localDateTime0, true, false, true);
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      voluntario0.updateEncomenda(encomenda1);
      assertFalse(voluntario0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isLevantada());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      String string0 = voluntario0.getPreparadas();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      try { 
        voluntario0.getEncomenda("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Instant instant0 = MockInstant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneId0);
      Encomenda encomenda0 = new Encomenda("0", "0", "0", 0, "0", "0", hashMap0, false, localDateTime0, true, false, true);
      voluntario0.updateEncomendaPreparada(encomenda0);
      Encomenda encomenda1 = voluntario0.removeEncomenda("0");
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertNotNull(encomenda1);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertTrue(encomenda1.isPreparada());
      assertFalse(voluntario0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      voluntario0.removeEncomenda("0");
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      Voluntario voluntario1 = new Voluntario();
      boolean boolean0 = voluntario0.equals(voluntario1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setRaio_acao(1510.3263379);
      boolean boolean0 = voluntario0.equals(voluntario1);
      assertEquals(1510.3263379, voluntario1.getRaio_acao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = voluntario0.equals(encomenda0);
      assertFalse(boolean0);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.equals((Object) null);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(boolean0);
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.equals(voluntario0);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertTrue(boolean0);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("6Lq8>@yYMr", "}^jRq`", ")[2r'nHl", "}^jRq`", true, 2368.38403211492, 2368.38403211492, (LocalDate) null, 2368.38403211492, linkedList0, 1.0, (-1627), true, 111, 712);
      voluntario0.getInicio_transporte();
      assertEquals(111, voluntario0.getVelocidade());
      assertEquals((-1627), voluntario0.getAvaliacoes());
      assertTrue(voluntario0.getDisponibilidade());
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(1.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(2368.38403211492, voluntario0.getRaio_acao(), 0.01);
      assertEquals(712, voluntario0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setDisponibilidade(true);
      Voluntario voluntario1 = new Voluntario();
      boolean boolean0 = voluntario0.equals(voluntario1);
      assertTrue(voluntario0.getDisponibilidade());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setInicio_Transporte((LocalDate) null);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1275));
      assertEquals((-1275), voluntario0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.addEncomenda(encomenda0);
      String string0 = voluntario0.getNaoEntregue();
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("0", string0);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      assertTrue(voluntario1.equals((Object)voluntario0));
      
      voluntario1.setEmail("FLh*j[ev2");
      boolean boolean0 = voluntario1.equals(voluntario0);
      assertFalse(voluntario1.equals((Object)voluntario0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario();
      boolean boolean0 = voluntario0.equals(voluntario1);
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertTrue(boolean0);
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals(0, voluntario1.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setClassificacao(0.0);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = voluntario0.toString();
      assertEquals(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: []", string0);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
  }
}
