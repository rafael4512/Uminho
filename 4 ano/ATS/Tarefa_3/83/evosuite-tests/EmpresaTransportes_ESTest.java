/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:33:37 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EmpresaTransportes_ESTest extends EmpresaTransportes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      Encomenda encomenda0 = new Encomenda();
      arrayList0.add(encomenda0);
      arrayList0.add(encomenda0);
      arrayList0.add(encomenda0);
      BDGeral bDGeral0 = new BDGeral();
      int int0 = empresaTransportes0.distanciaEntreLojas(arrayList0, bDGeral0);
      assertEquals(0, int0);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Random.setNextRandom((-1976));
      int int0 = empresaTransportes0.calculaAtrasos();
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(30, int0);
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Random.setNextRandom(2175);
      int int0 = empresaTransportes0.calculaAtrasos();
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, int0);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda(",", ",", ",", 831.28747, "o5rI\"r?jxWj\"Q?S9,", "o5rI\"r?jxWj\"Q?S9,", hashMap0, false, localDateTime0, false, false, false);
      empresaTransportes0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      BDGeral bDGeral0 = new BDGeral();
      String string0 = empresaTransportes0.getFaturacao(localDateTime0, localDateTime0, bDGeral0);
      assertEquals("A sua empresa faturou 166.257494 entre as datas 14/2/2014 e 14/2/2014", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BDGeral bDGeral0 = new BDGeral();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-332));
      Clock clock0 = Clock.tickMillis(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LocalDateTime localDateTime1 = MockLocalDateTime.of(localDate0, localTime0);
      String string0 = empresaTransportes0.getFaturacao(localDateTime0, localDateTime1, bDGeral0);
      assertEquals("A sua empresa faturou 0.0 entre as datas 14/2/2014 e 11/1/2021", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BDGeral bDGeral0 = new BDGeral();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime1 = MockLocalDateTime.ofEpochSecond((-2000L), 783, zoneOffset0);
      String string0 = empresaTransportes0.getFaturacao(localDateTime1, localDateTime0, bDGeral0);
      assertEquals("A sua empresa faturou 0.0 entre as datas 31/12/1969 e 14/2/2014", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = Clock.tickMillis(zoneOffset0);
      LocalDateTime localDateTime1 = MockLocalDateTime.now(clock0);
      String string0 = empresaTransportes0.getInfoEncomendas(localDateTime0, localDateTime1);
      assertEquals("Entre as datas 14/2/2014 e 12/1/2021 foram realizadas 1 encomendas pela empresa \nEfetuou encomendas em 1 lojas", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes((String) null, (String) null, (String) null, "SOM0QEx~7>q$T*%zv", 0, (-1847.62), "SOM0QEx~7>q$T*%zv", (-1405.252), 1.0, (-1847.62), arrayList0, false, 0.0, (-923), false, 832, 1209);
      Double double0 = new Double((-495.5269));
      empresaTransportes1.updateRate(double0);
      assertEquals((-922), empresaTransportes1.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      empresaTransportes1.setNif(2336);
      boolean boolean0 = empresaTransportes0.equals(empresaTransportes1);
      assertEquals(2336, empresaTransportes1.getNif());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      BDGeral bDGeral0 = new BDGeral();
      int int0 = empresaTransportes0.getKms(bDGeral0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      boolean boolean0 = empresaTransportes0.isDisponivel();
      assertFalse(boolean0);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes((String) null, "UserNotFoundException", "LinhaEncomenda", "&\"hXOj]lzg", (-2848), (-609.6271422124), "UserNotFoundException", (-2848), (-609.6271422124), (-609.6271422124), arrayList0, false, (-1.0), (-2118), false, (-2118), (-2118));
      int int0 = empresaTransportes1.getVelocidade();
      assertEquals((-2118), int0);
      assertEquals((-609.6271422124), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals((-2118), empresaTransportes1.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-2118), empresaTransportes1.getAvaliacoes());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals((-609.6271422124), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals((-2848), empresaTransportes1.getNif());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-1.0), empresaTransportes1.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.addEncomenda(encomenda0);
      empresaTransportes0.getRegistos();
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("1", "1", "os+$", "os+$", (-1879), (-1.0), "User not found", (-1.0), (-1.0), (-1879), arrayList0, false, 1.0, (-1879), false, (-1879), (-1));
      double double0 = empresaTransportes0.getRaioDeAcao();
      assertEquals((-1.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-1879), empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1879.0), double0, 0.01);
      assertEquals((-1879), empresaTransportes0.getNif());
      assertEquals(1.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-1), empresaTransportes0.getVelocidade());
      assertEquals((-1879), empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("Local: ", (String) null, (String) null, (String) null, 75, 2460.0, "Local: ", 75, (-408.2562017070422), 2460.0, arrayList0, false, (-1.0), 75, true, 94, 2584);
      EmpresaTransportes empresaTransportes2 = new EmpresaTransportes(empresaTransportes1);
      empresaTransportes2.getNome();
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals((-1.0), empresaTransportes2.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(2460.0, empresaTransportes2.getCusto_km(), 0.01);
      assertEquals(75, empresaTransportes1.getNif());
      assertTrue(empresaTransportes2.isDisponivel());
      assertFalse(empresaTransportes2.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(75, empresaTransportes1.getAvaliacoes());
      assertEquals(2460.0, empresaTransportes2.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(2584, empresaTransportes1.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(94, empresaTransportes1.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes((String) null, "UserNotFoundException", "LinhaEncomenda", "&\"hXOj]lzg", (-2848), (-609.6271422124), "UserNotFoundException", (-2848), 1.0, 1.0, arrayList0, false, (-1.0), (-2118), false, (-2118), (-2118));
      empresaTransportes1.getNome();
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-609.6271422124), empresaTransportes1.getCusto_km(), 0.01);
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals((-2118), empresaTransportes1.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals((-1.0), empresaTransportes1.getClassificao(), 0.01);
      assertEquals((-2118), empresaTransportes1.getVelocidade());
      assertEquals((-2848), empresaTransportes1.getNif());
      assertEquals(1.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-2118), empresaTransportes1.getAvaliacoes());
      assertFalse(empresaTransportes1.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.getNome();
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("Q]J6&D%J)E|9", " ----> DIST:  ", "\"k", (String) null, 9, (-1.0), "Q]J6&D%J)E|9", 0.0, 9, 0.2, arrayList0, true, 0.2, 94, false, 9, (-1932963273));
      int int0 = empresaTransportes0.getNif();
      assertEquals(0.2, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(94, empresaTransportes0.getAvaliacoes());
      assertEquals(0.2, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertTrue(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(9, int0);
      assertEquals((-1.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-1932963273), empresaTransportes0.getVelocidade());
      assertEquals(9, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setNif((-4460));
      int int0 = empresaTransportes0.getNif();
      assertEquals((-4460), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("Tb<qEf0!:2Bbu", "u]=5xr_syYU@!P+fQ", "Tb<qEf0!:2Bbu", "", 0, 0, "", (-2401.7610305589), 2844.43, 156.0, arrayList0, true, 0.0, 100, true, 30, 1543);
      int int0 = empresaTransportes1.getMinutosDeEspera();
      assertEquals(0, empresaTransportes1.getNif());
      assertTrue(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(1543, empresaTransportes1.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(100, empresaTransportes1.getAvaliacoes());
      assertEquals(156.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(30, int0);
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertTrue(empresaTransportes1.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes((String) null, "<J72 Hji6[dr^N(`", "];2Jn", "Z^J4,'.|", (-2594), 1, "^t;H=Tmi}xKFm,Hv&", 30, 858.098526659093, 0.0, arrayList0, false, 0, 1332, false, (-2594), 1332);
      int int0 = empresaTransportes1.getMinutosDeEspera();
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(1332, empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals((-2594), empresaTransportes1.getNif());
      assertEquals(1332, empresaTransportes1.getAvaliacoes());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(1.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals((-2594), int0);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.getLongitude();
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("M", " ---> ", "Local: ", "Data de emiss\u00E3o da encomenda: ", 1036, (-535.15), "uto>ySHZ}wWu3<#@'P", 128.47456998363, 0.2, 128.47456998363, arrayList0, false, 128.47456998363, (-3300), true, (-2028409689), 1036);
      empresaTransportes1.getLongitude();
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals((-3300), empresaTransportes1.getAvaliacoes());
      assertEquals(1036, empresaTransportes1.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals((-2028409689), empresaTransportes1.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-535.15), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(128.47456998363, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(1036, empresaTransportes1.getNif());
      assertTrue(empresaTransportes1.isDisponivel());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(128.47456998363, empresaTransportes1.getRaioDeAcao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("}", "0", "C\u00F3digo de empresa: ", (String) null, 0, 0, "z0D{y/oj", 0.0, (-1055.95892), (-1055.95892), arrayList0, false, 535.01705009, 0, false, (-1073741822), 1);
      empresaTransportes1.getLongitude();
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals((-1055.95892), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals((-1073741822), empresaTransportes1.getMinutosDeEspera());
      assertEquals(1, empresaTransportes1.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(535.01705009, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("=================== TOTAL DE UTILIZADORES REGISTADOS NO SISTEMA ===================", "A+^Os^s}usfP|f4u", "WhK3P%b$<cYQ!zh0Q", "-~w", (-2321), 1139.918607964543, (String) null, (-2321), 1139.918607964543, 0.0, arrayList0, false, 879.1048250123, 2131, true, 2131, (-2321));
      empresaTransportes0.getLocal();
      assertEquals(2131, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-2321), empresaTransportes0.getVelocidade());
      assertEquals(1139.918607964543, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(879.1048250123, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(2131, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals((-2321), empresaTransportes0.getNif());
      assertTrue(empresaTransportes0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.getLatitude();
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes((String) null, (String) null, "bTQD&sqN|($f4", "!U.A~ll,Kr%", 1262, (-609.6271422124), "rs|}<p+AD%", 1262, 1262, (-609.6271422124), arrayList0, true, (-609.6271422124), 1262, true, 1262, (-397));
      empresaTransportes1.getLatitude();
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(1262, empresaTransportes1.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals((-609.6271422124), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals((-609.6271422124), empresaTransportes1.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(1262, empresaTransportes1.getAvaliacoes());
      assertEquals((-609.6271422124), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals((-397), empresaTransportes1.getVelocidade());
      assertTrue(empresaTransportes1.isDisponivel());
      assertTrue(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(1262, empresaTransportes1.getNif());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes((String) null, "UserNotFoundException", "LinhaEncomenda", "&\"hXOj]lzg", (-2848), (-609.6271422124), "UserNotFoundException", (-2848), (-609.6271422124), (-609.6271422124), arrayList0, false, (-1.0), (-2118), false, (-2118), (-2118));
      empresaTransportes1.getLatitude();
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-2118), empresaTransportes1.getMinutosDeEspera());
      assertEquals((-2118), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-609.6271422124), empresaTransportes1.getCusto_km(), 0.01);
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals((-2118), empresaTransportes1.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals((-609.6271422124), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals((-1.0), empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals((-2848), empresaTransportes1.getNif());
      assertEquals(" ", empresaTransportes0.getLocal());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("kuu0M!~=1,8tZ", "Transportadora", "JOY%[1", 0.0, "Transportadora", "kuu0M!~=1,8tZ", map0, true, localDateTime0, true, true, false);
      empresaTransportes0.updateEncomendaLoja(encomenda1);
      Encomenda encomenda2 = empresaTransportes0.getEncomenda("kuu0M!~=1,8tZ");
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertTrue(encomenda2.isLevantada());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      empresaTransportes0.getEncomenda(" ");
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda("0", "0", "0", (-0.5533360142627), "0", "0", hashMap0, false, localDateTime0, false, false, false);
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      empresaTransportes0.getEncomenda("0");
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      double double0 = empresaTransportes0.getCusto_km();
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("0", "D99MUU<i1,t", "0", "D99MUU<i1,t", (-1881731948), (-506.9273), "Uu~g3Fs9#r@Wrq|Q$b", (-0.5533360142627), (-215.5927560457573), (-1864.710271121), arrayList0, false, 0.0, (-1881731948), false, (-550), (-1881731948));
      double double0 = empresaTransportes1.getCusto_km();
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals((-1881731948), empresaTransportes1.getNif());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals((-1864.710271121), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals((-550), empresaTransportes1.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals((-1881731948), empresaTransportes1.getAvaliacoes());
      assertEquals((-506.9273), double0, 0.01);
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals((-1881731948), empresaTransportes1.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes((String) null, (String) null, (String) null, "SOM0QEx~7>q$T*%zv", 0, (-1847.62), "SOM0QEx~7>q$T*%zv", (-1405.252), 1.0, (-1847.62), arrayList0, false, 0.0, (-923), false, 832, 1209);
      empresaTransportes1.getCodigo();
      assertEquals((-1847.62), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals((-923), empresaTransportes1.getAvaliacoes());
      assertEquals(1209, empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes1.isDisponivel());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(832, empresaTransportes1.getMinutosDeEspera());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals((-1847.62), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes1.getNif());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes((String) null, "UserNotFoundException", "LinhaEncomenda", "&hXOj]lzg", (-2848), (-609.6271422124), "UserNotFoundException", (-2848), 1.0, 1.0, arrayList0, false, (-1.0), (-2118), false, (-2118), (-2118));
      empresaTransportes1.getCodigo();
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1.0), empresaTransportes1.getClassificao(), 0.01);
      assertEquals(1.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-2118), empresaTransportes1.getVelocidade());
      assertEquals((-2118), empresaTransportes1.getAvaliacoes());
      assertFalse(empresaTransportes1.isDisponivel());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals((-609.6271422124), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals((-2848), empresaTransportes1.getNif());
      assertEquals((-2118), empresaTransportes1.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.getCodigo();
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Double double0 = new Double(1617.43);
      empresaTransportes0.updateRate(double0);
      double double1 = empresaTransportes0.getClassificao();
      assertEquals(1, empresaTransportes0.getAvaliacoes());
      assertEquals(1617.43, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("S5", "S5", "3\"Ilw+mU", "0", (-1073741822), (-1073741822), "UIYG7$.", (-1073741822), (-1073741822), (-2450.489), arrayList0, false, (-1393.44961), (-1073741822), true, (-1073741822), 2147483645);
      double double0 = empresaTransportes1.getClassificao();
      assertEquals((-1073741822), empresaTransportes1.getNif());
      assertEquals((-1.073741822E9), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertTrue(empresaTransportes1.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(2147483645, empresaTransportes1.getVelocidade());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals((-1073741822), empresaTransportes1.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-1393.44961), double0, 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals((-1073741822), empresaTransportes1.getMinutosDeEspera());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals((-2450.489), empresaTransportes1.getRaioDeAcao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      
      empresaTransportes0.setAvaliacoes(1);
      int int0 = empresaTransportes0.getAvaliacoes();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes((String) null, "UserNotFoundException", "LinhaEncomenda", "&hXOj]lzg", (-2848), (-609.6271422124), "UserNotFoundException", (-2848), 1.0, 1.0, arrayList0, false, (-1.0), (-2118), false, (-2118), (-2118));
      int int0 = empresaTransportes1.getAvaliacoes();
      assertEquals((-2118), empresaTransportes1.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals((-609.6271422124), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(1.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals((-2118), int0);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-2848), empresaTransportes1.getNif());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals((-1.0), empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals((-2118), empresaTransportes1.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setVelocidade(618);
      empresaTransportes0.clone();
      assertEquals(618, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("0", "a1{", "0", "I<", (-2541), 998, "a1{", (-1851.1715), 0.0, (-1851.1715), arrayList0, true, 699.01587, 100, true, (-3724), (-2541));
      EmpresaTransportes empresaTransportes2 = empresaTransportes1.clone();
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(100, empresaTransportes1.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals((-2541), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-3724), empresaTransportes1.getMinutosDeEspera());
      assertEquals(998.0, empresaTransportes2.getCusto_km(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertTrue(empresaTransportes2.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals((-2541), empresaTransportes1.getNif());
      assertTrue(empresaTransportes2.aceitoTransporteMedicamentos());
      assertEquals((-1851.1715), empresaTransportes2.getRaioDeAcao(), 0.01);
      assertEquals(699.01587, empresaTransportes2.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("AY7!*,", "", "k,", "k,", 60, 60, " || RATE --> ", 0.0, 1248.6880873, 0.0, arrayList0, true, 707.4431131947, 0, true, 60, 0);
      EmpresaTransportes empresaTransportes1 = empresaTransportes0.clone();
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertTrue(empresaTransportes1.isDisponivel());
      assertEquals(707.4431131947, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(60, empresaTransportes0.getMinutosDeEspera());
      assertTrue(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(60, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes1.getVelocidade());
      assertEquals(60.0, empresaTransportes0.getCusto_km(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("R(54]>5`}mTL", "uXFe8N0", "uXFe8N0", "I'", (-2134702604), (-2134702604), "ieh(e", (-2134702604), (-2134702604), 1060.50526, arrayList0, true, 1625.91842345, 60, false, 4123, (-2134702604));
      EmpresaTransportes empresaTransportes1 = empresaTransportes0.clone();
      assertEquals(60, empresaTransportes0.getAvaliacoes());
      assertTrue(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals((-2134702604), empresaTransportes0.getNif());
      assertEquals(4123, empresaTransportes0.getMinutosDeEspera());
      assertEquals(1060.50526, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(1625.91842345, empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-2.134702604E9), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-2134702604), empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Double double0 = new Double((-1073741822));
      empresaTransportes0.updateRate(double0);
      empresaTransportes0.clone();
      assertEquals(1, empresaTransportes0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setAvaliacoes((-2134702604));
      empresaTransportes0.clone();
      assertEquals((-2134702604), empresaTransportes0.getAvaliacoes());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("Entre as datas 14/2/2014 e 14/2/2014 foram realizadas 1 encomendas pela empresa \nEfetuou encomendas em 1 lojas", "CmCU%Z&J", "l", "l", 2841, 0.0, "CmCU%Z&J", 2841, 2910.2560827656557, 0.0, arrayList0, true, 2841, 1, false, 2841, (-817));
      EmpresaTransportes empresaTransportes1 = empresaTransportes0.clone();
      assertEquals(2841, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(1, empresaTransportes0.getAvaliacoes());
      assertEquals(2841.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(2841, empresaTransportes0.getNif());
      assertTrue(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals((-817), empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes1.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      
      empresaTransportes0.aceitaMedicamentos(true);
      boolean boolean0 = empresaTransportes0.aceitoTransporteMedicamentos();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      // Undeclared exception!
      try { 
        empresaTransportes0.updateRate((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      // Undeclared exception!
      try { 
        empresaTransportes0.updateEncomendaPreparada((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      // Undeclared exception!
      try { 
        empresaTransportes0.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      // Undeclared exception!
      try { 
        empresaTransportes0.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      // Undeclared exception!
      try { 
        empresaTransportes0.setRegistos((ArrayList<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      // Undeclared exception!
      try { 
        empresaTransportes0.getInfoEncomendas((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      // Undeclared exception!
      try { 
        empresaTransportes0.getFaturacao((LocalDateTime) null, (LocalDateTime) null, (BDGeral) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      // Undeclared exception!
      try { 
        empresaTransportes0.getEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes();
      empresaTransportes1.setLocal((String) null);
      // Undeclared exception!
      try { 
        empresaTransportes1.equals(empresaTransportes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      BDGeral bDGeral0 = new BDGeral();
      // Undeclared exception!
      try { 
        empresaTransportes0.distanciaEntreLojas((ArrayList<Encomenda>) null, bDGeral0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = null;
      try {
        empresaTransportes0 = new EmpresaTransportes("9+,qiuf9T=", "9+,qiuf9T=", "9+,qiuf9T=", "HyI/mnUl K,/U7e`", 1334, 1334, "O_:bc;Ma9", 1334, (-1976.0), (-1976.0), (ArrayList<Encomenda>) null, false, 1371.64722, (-39), false, (-39), (-39));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = null;
      try {
        empresaTransportes0 = new EmpresaTransportes((EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UtilizadorSistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      Encomenda encomenda0 = new Encomenda();
      arrayList0.add(encomenda0);
      empresaTransportes0.setRegistos(arrayList0);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      double double0 = empresaTransportes0.getRaioDeAcao();
      assertEquals(0.0, double0, 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      int int0 = empresaTransportes0.getVelocidade();
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      String string0 = empresaTransportes0.getLocal();
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      double double0 = empresaTransportes0.getClassificao();
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("Apta para transportes m\u00E9dicos: ", "Apta para transportes m\u00E9dicos: ", "|],4t", "Apta para transportes m\u00E9dicos: ", 75, 75, "Lqn|q%", 0.2, 75, 0.2, arrayList0, true, 1244.7918, 75, true, (-1560), (-2089505285));
      boolean boolean0 = empresaTransportes0.isDisponivel();
      assertEquals(0.2, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(75, empresaTransportes0.getAvaliacoes());
      assertEquals(75, empresaTransportes0.getNif());
      assertEquals(75.0, empresaTransportes0.getCusto_km(), 0.01);
      assertTrue(boolean0);
      assertEquals(1244.7918, empresaTransportes0.getClassificao(), 0.01);
      assertTrue(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals((-1560), empresaTransportes0.getMinutosDeEspera());
      assertEquals((-2089505285), empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      int int0 = empresaTransportes0.getNif();
      assertEquals(0, int0);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      int int0 = empresaTransportes0.getMinutosDeEspera();
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, int0);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      boolean boolean0 = empresaTransportes0.aceitoTransporteMedicamentos();
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, empresaTransportes0.getNif());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("Longitude: ", "<xK\u0002ta1UQi78a", "Nif: ", (String) null, 0, 192L, "^TD,Zs<", 0, (-1292.054060794034), (-154.57), arrayList0, true, (-1292.054060794034), (-681), false, 1231, (-681));
      double double0 = empresaTransportes0.getCusto_km();
      assertEquals((-154.57), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(192.0, double0, 0.01);
      assertEquals(1231, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals((-681), empresaTransportes0.getAvaliacoes());
      assertTrue(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals((-681), empresaTransportes0.getVelocidade());
      assertEquals((-1292.054060794034), empresaTransportes0.getClassificao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      int int0 = empresaTransportes0.getAvaliacoes();
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, int0);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      BDGeral bDGeral0 = new BDGeral();
      int int0 = empresaTransportes0.distanciaEntreLojas(arrayList0, bDGeral0);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, int0);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Random.setNextRandom(94);
      int int0 = empresaTransportes0.calculaAtrasos();
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(30, int0);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      int int0 = empresaTransportes0.calculaAtrasos();
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Random.setNextRandom((-1096));
      int int0 = empresaTransportes0.calculaAtrasos();
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(60, int0);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      int int0 = empresaTransportes0.porLevantar();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      int int0 = empresaTransportes0.porLevantar();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      int int0 = empresaTransportes0.porLevantar();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      int int0 = empresaTransportes0.porEntregar();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      int int0 = empresaTransportes0.porEntregar();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      empresaTransportes0.getRota();
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo(")");
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      boolean boolean0 = empresaTransportes0.existe(")");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      boolean boolean0 = empresaTransportes0.existe(")");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda1 = new Encomenda(",", ",", ",", 831.28747, "o5rI\"r?jxWj\"Q?S9,", "o5rI\"r?jxWj\"Q?S9,", hashMap0, false, localDateTime0, false, false, false);
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      empresaTransportes0.updateEncomendaPreparada(encomenda1);
      assertTrue(encomenda1.isPreparada());
      assertEquals(0, empresaTransportes0.getNif());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      empresaTransportes0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      assertEquals(0, empresaTransportes0.getNif());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda1 = new Encomenda("0", "0", "0", (-0.5533360142627), "0", "0", hashMap0, false, localDateTime0, false, false, false);
      empresaTransportes0.updateEncomendaLoja(encomenda1);
      empresaTransportes0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      empresaTransportes0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      int int0 = empresaTransportes0.porEntregar();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      empresaTransportes0.addEncomenda(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      String string0 = empresaTransportes0.getNaoEntregue();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      String string0 = empresaTransportes0.getNaoEntregue();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      String string0 = empresaTransportes0.getNaoEntregue();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda1 = new Encomenda("0", "0", "0", (-0.55333601426266), "0", "0", hashMap0, false, localDateTime0, false, false, false);
      empresaTransportes0.updateEncomendaLoja(encomenda1);
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda(",", ",", ",", 831.28747, "o5rI\"r?jxWj\"Q?S9,", "o5rI\"r?jxWj\"Q?S9,", hashMap0, false, localDateTime0, false, false, false);
      empresaTransportes0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      empresaTransportes0.getEncomenda(",");
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      try { 
        empresaTransportes0.getEncomenda(",");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      String string0 = empresaTransportes0.getPreparadas();
      assertEquals("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      String string0 = empresaTransportes0.getPreparadas();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomenda(encomenda0);
      assertTrue(encomenda0.isEntregue());
      
      String string0 = empresaTransportes0.getPreparadas();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.addEncomenda(encomenda0);
      String string0 = empresaTransportes0.getPreparadas();
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("0", string0);
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaPreparada(encomenda0);
      // Undeclared exception!
      try { 
        empresaTransportes0.getKms((BDGeral) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      BDGeral bDGeral0 = new BDGeral();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime1 = MockLocalDateTime.ofEpochSecond(1L, 60, zoneOffset0);
      String string0 = empresaTransportes0.getFaturacao(localDateTime0, localDateTime1, bDGeral0);
      assertEquals("A sua empresa faturou 0.0 entre as datas 14/2/2014 e 1/1/1970", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(75);
      Clock clock0 = Clock.tickMillis(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      String string0 = empresaTransportes0.getFaturacao(localDateTime0, localDateTime0, (BDGeral) null);
      assertEquals("A sua empresa faturou 0.0 entre as datas 11/1/2021 e 11/1/2021", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      String string0 = empresaTransportes0.getInfoEncomendas(localDateTime0, localDateTime0);
      assertEquals("Entre as datas 14/2/2014 e 14/2/2014 foram realizadas 0 encomendas pela empresa \nEfetuou encomendas em 0 lojas", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3143);
      LocalDateTime localDateTime1 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      String string0 = empresaTransportes0.getInfoEncomendas(localDateTime1, localDateTime0);
      assertEquals("Entre as datas 14/2/2014 e 14/2/2014 foram realizadas 0 encomendas pela empresa \nEfetuou encomendas em 0 lojas", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes();
      empresaTransportes1.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      boolean boolean0 = empresaTransportes0.equals(empresaTransportes1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes();
      assertEquals(" ", empresaTransportes1.getLocal());
      
      empresaTransportes1.setLocal("9J~x|?Cgms*qfZr");
      boolean boolean0 = empresaTransportes0.equals(empresaTransportes1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      empresaTransportes1.setCusto_km((-451.1807895));
      boolean boolean0 = empresaTransportes1.equals(empresaTransportes0);
      assertEquals((-451.1807895), empresaTransportes1.getCusto_km(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      empresaTransportes1.setNif(15);
      boolean boolean0 = empresaTransportes1.equals(empresaTransportes0);
      assertEquals(15, empresaTransportes1.getNif());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("0", "D99MUU<i1,t", "0", "D99MUU<i1,t", (-1881731948), (-506.9273), "Uu~g3Fs9#r@Wrq|Q$b", (-0.5533360142627), (-215.5927560457573), (-1864.710271121), arrayList0, false, 0.0, (-1881731948), false, (-550), (-1881731948));
      boolean boolean0 = empresaTransportes1.equals(empresaTransportes0);
      assertEquals((-1864.710271121), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals((-1881731948), empresaTransportes1.getVelocidade());
      assertFalse(boolean0);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-1881731948), empresaTransportes1.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals((-1881731948), empresaTransportes1.getNif());
      assertEquals((-550), empresaTransportes1.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-506.9273), empresaTransportes1.getCusto_km(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = empresaTransportes0.equals(encomenda0);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(boolean0);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      boolean boolean0 = empresaTransportes0.equals((Object) null);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(boolean0);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      boolean boolean0 = empresaTransportes0.equals(empresaTransportes0);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes();
      boolean boolean0 = empresaTransportes0.equals(empresaTransportes1);
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertTrue(boolean0);
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(0, empresaTransportes1.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      Encomenda encomenda0 = new Encomenda();
      empresaTransportes0.updateEncomendaLoja(encomenda0);
      assertTrue(encomenda0.isLevantada());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      String string0 = empresaTransportes0.getInfoEncomendas(localDateTime0, localDateTime0);
      assertEquals("Entre as datas 14/2/2014 e 14/2/2014 foram realizadas 1 encomendas pela empresa \nEfetuou encomendas em 1 lojas", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setClassificao(0.0);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setRaioDeAcao(4011.1858817);
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes();
      boolean boolean0 = empresaTransportes0.equals(empresaTransportes1);
      assertEquals(4011.1858817, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("UgKRsUL", "0", "", "CSCl*vmZ^-Uhle+hO", 648, 0.0, "0", 45.41701760914989, 1332.118577, 648, arrayList0, false, 1244.7918, 648, false, 648, 648);
      double double0 = empresaTransportes1.getRaioDeAcao();
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(648, empresaTransportes1.getVelocidade());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(648.0, double0, 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(1244.7918, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(648, empresaTransportes1.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(648, empresaTransportes1.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(648, empresaTransportes1.getNif());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      
      empresaTransportes0.setTransporteMedico(true);
      assertTrue(empresaTransportes0.aceitoTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      String string0 = empresaTransportes0.toString();
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo de empresa: \nNome: \nNif: 0\nCusto por km: 0.0\nLocal:  \nLatitude: 0.0\nLongitude: 0.0\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: []N\u00FAmero m\u00EDnimo de encomendas: Apta para transportes m\u00E9dicos: false\n", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setDisponivel(false);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.aceitaMedicamentos(true);
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes();
      boolean boolean0 = empresaTransportes0.equals(empresaTransportes1);
      assertTrue(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setMinutosDeEspera((-2147483645));
      assertEquals((-2147483645), empresaTransportes0.getMinutosDeEspera());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      // Undeclared exception!
      try { 
        empresaTransportes0.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EmpresaTransportes", e);
      }
  }
}
