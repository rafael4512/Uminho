/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:32:03 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Lojas_ESTest extends Lojas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas("Ponto", "Ponto", "Lojas", ponto0, 4362, hashMap0);
      lojas0.setRegistoEncomendas(hashMap0);
      assertEquals(4362, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Encomenda encomenda0 = new Encomenda();
      lojas0.addEncomenda(encomenda0);
      lojas0.historicoL();
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas((String) null, (String) null, (String) null, ponto0, (-1), hashMap0);
      lojas0.getPW();
      assertEquals((-1), lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas(",", ",", "^dUv|G^Gj12pPK'd", ponto0, 1089, hashMap0);
      lojas0.getPW();
      assertEquals(1089, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas("Ponto", "Ponto", "Lojas", ponto0, 4362, hashMap0);
      int int0 = lojas0.getNumeroEncomendas();
      assertEquals(4362, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas("", "", "", ponto0, (-1), hashMap0);
      int int0 = lojas0.getNumeroEncomendas();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas((String) null, (String) null, (String) null, ponto0, (-764), hashMap0);
      lojas0.getNome();
      assertEquals((-764), lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas("Ponto", "Ponto", "Lojas", ponto0, 4362, hashMap0);
      lojas0.getNome();
      assertEquals(4362, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Ponto ponto0 = new Ponto(3701.09F, 3701.09F);
      lojas0.setGPS(ponto0);
      lojas0.getGPS();
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Lojas lojas0 = new Lojas();
      ponto0.setX(1.0F);
      Map<String, Encomenda> map0 = lojas0.getRegistoEncomendas();
      Lojas lojas1 = new Lojas(" UDpfo>R$3", " UDpfo>R$3", "", ponto0, 0, map0);
      lojas1.getGPS();
      assertEquals(0, lojas0.getNumeroEncomendas());
      assertEquals(0, lojas1.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ponto ponto0 = new Ponto((-1.0F), (-1.0F));
      Lojas lojas0 = new Lojas();
      Map<String, Encomenda> map0 = lojas0.getRegistoEncomendas();
      Lojas lojas1 = new Lojas("v'Di,M@0-Nj< ", "v'Di,M@0-Nj< ", "v'Di,M@0-Nj< ", ponto0, 0, map0);
      lojas1.getGPS();
      assertEquals(0, lojas0.getNumeroEncomendas());
      assertEquals(0, lojas1.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas((String) null, (String) null, (String) null, ponto0, (-1), hashMap0);
      lojas0.getCodigo();
      assertEquals((-1), lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.setCodigo("(-180.88, 0.0)");
      lojas0.getCodigo();
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas(",", ",", "^dUv|G^Gj12pPK'd", ponto0, 1089, hashMap0);
      lojas0.clone();
      assertEquals(1089, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas("", "", "", ponto0, (-1), hashMap0);
      lojas0.clone();
      assertEquals((-1), lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.setGPS((Ponto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Encomenda encomenda0 = new Encomenda();
      lojas0.addEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        lojas0.historicoLdata((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda0).clone();
      List<LinhaEncomenda> list0 = List.of(linhaEncomenda0, linhaEncomenda0, linhaEncomenda0, linhaEncomenda0, linhaEncomenda0, linhaEncomenda0, linhaEncomenda0, linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda((String) null, "Peso total: ", "DG", 934.109F, (LocalDateTime) null, list0);
      lojas0.addEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        lojas0.historicoL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda0).clone();
      List<LinhaEncomenda> list0 = List.of(linhaEncomenda0, linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("On 1NC^?.&", "On 1NC^?.&", "(0.0, 0.0)", 0.0F, (LocalDateTime) null, list0);
      lojas0.addEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        lojas0.getRegistoEncomendas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Map<String, Encomenda> map0 = lojas0.getRegistoEncomendas();
      Ponto ponto0 = new Ponto(0.0F, (-1016.3437F));
      Lojas lojas1 = new Lojas((String) null, "]VQ5^~", (String) null, ponto0, 1, map0);
      Lojas lojas2 = new Lojas(lojas1);
      // Undeclared exception!
      try { 
        lojas1.equals(lojas2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda1).clone();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0, linhaEncomenda0, linhaEncomenda0, linhaEncomenda0, linhaEncomenda1).when(linhaEncomenda2).clone();
      List<LinhaEncomenda> list0 = List.of(linhaEncomenda2, linhaEncomenda2, linhaEncomenda2, linhaEncomenda2, linhaEncomenda2, linhaEncomenda2, linhaEncomenda2, linhaEncomenda2);
      Encomenda encomenda0 = new Encomenda((String) null, "Peso total: ", "DG", 934.109F, (LocalDateTime) null, list0);
      lojas0.addEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        lojas0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = null;
      try {
        lojas0 = new Lojas("~i^nf4B", "~i^nf4B", "~i^nf4B", (Ponto) null, 1, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lojas lojas0 = null;
      try {
        lojas0 = new Lojas((Lojas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Encomenda encomenda0 = new Encomenda();
      lojas0.addEncomenda(encomenda0);
      lojas0.getRegistoEncomendas();
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.getNome();
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.getCodigo();
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.getGPS();
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      int int0 = lojas0.getNumeroEncomendas();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.setRegistoEncomendas((Map<String, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.getPW();
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis(39L);
      Lojas lojas0 = new Lojas();
      Encomenda encomenda0 = new Encomenda();
      lojas0.addEncomenda(encomenda0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1809L, 0, zoneOffset0);
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime1 = MockLocalDateTime.of(0, month0, 1, 1, 0);
      List<Encomenda> list0 = lojas0.historicoLdata(localDateTime1, localDateTime0);
      assertEquals(0, lojas0.getNumeroEncomendas());
      assertTrue(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Encomenda encomenda0 = new Encomenda();
      lojas0.addEncomenda(encomenda0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      lojas0.historicoLdata(localDateTime0, localDateTime0);
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Encomenda encomenda0 = new Encomenda();
      lojas0.addEncomenda(encomenda0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1809L, 0, zoneOffset0);
      List<Encomenda> list0 = lojas0.historicoLdata(localDateTime0, localDateTime0);
      assertEquals(0, lojas0.getNumeroEncomendas());
      assertFalse(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Ponto ponto0 = new Ponto((-1.0F), (-1.0F));
      Lojas lojas0 = new Lojas();
      Map<String, Encomenda> map0 = lojas0.getRegistoEncomendas();
      Lojas lojas1 = new Lojas("v'Di,M@0-Nj< ", "v'Di,M@0-Nj< ", "v'Di,M@0-Nj< ", ponto0, 0, map0);
      boolean boolean0 = lojas1.equals(lojas0);
      assertEquals(0, lojas1.getNumeroEncomendas());
      assertEquals(0, lojas0.getNumeroEncomendas());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      boolean boolean0 = lojas0.equals((Object) null);
      assertEquals(0, lojas0.getNumeroEncomendas());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      boolean boolean0 = lojas0.equals(lojas0);
      assertTrue(boolean0);
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      boolean boolean0 = lojas0.equals("C\u00F3digo: \nNome: \nGPS: (0.0, 0.0)\nN\u00FAmero de pessoas em fila: 0\n");
      assertEquals(0, lojas0.getNumeroEncomendas());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Lojas lojas0 = new Lojas((String) null, (String) null, (String) null, ponto0, (-764), hashMap0);
      lojas0.setNumeroEncomendas((-1));
      assertEquals((-1), lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.setNome("+00:00:01");
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.historicoL();
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      String string0 = lojas0.toString();
      assertEquals("C\u00F3digo: \nNome: \nGPS: (0.0, 0.0)\nN\u00FAmero de pessoas em fila: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Encomenda encomenda0 = new Encomenda();
      lojas0.addEncomenda(encomenda0);
      Lojas lojas1 = lojas0.clone();
      assertEquals(0, lojas1.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.setPW(", ");
      assertEquals(0, lojas0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      String string0 = lojas0.toStringCSV();
      assertEquals("Loja:,,0.0,0.0", string0);
      assertEquals(0, lojas0.getNumeroEncomendas());
  }
}
