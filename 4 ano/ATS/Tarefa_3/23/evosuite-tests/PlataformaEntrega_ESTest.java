/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:35:13 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PlataformaEntrega_ESTest extends PlataformaEntrega_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios("qViO~c:Q", "qViO~c:Q", "", ponto0, 1470.0548540729283, true, true, linkedList0, map0);
      Integer integer0 = new Integer(2147483645);
      voluntarios1.adicionaClassificacao(integer0);
      voluntarios1.adicionaClassificacao(integer0);
      Transportadoras transportadoras0 = new Transportadoras("qViO~c:Q", "qViO~c:Q", ",O,|x", ponto0, 2147483645, false, true, linkedList0, map0, "@hn1U^R;_':*G", 0.0, 2147483645);
      String string0 = transportadoras0.toString();
      assertFalse(voluntarios0.getDisponivel());
      assertEquals("C\u00F3digo: qViO~c:Q\nNome: ,O,|x\nGPS: (0.0, 0.0)\nRaio: 2.147483645E9\nTransporte medicamentos: false\nNIF: @hn1U^R;_':*G\nPreco por KM: 0.0\nCapacidade : 2147483645\nClassificac\u00E3o: -3.0\nDisponivel: true\n", string0);
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.tipoPlataformaEntrega();
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertFalse(transportadoras0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      List<Integer> list0 = voluntarios0.getClassificacoes();
      double double0 = voluntarios0.mediaClassificacao(list0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getDisponivel());
      assertFalse(voluntarios0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios("qViO~c:Q", "qViO~c:Q", "", ponto0, 1470.0548540729283, false, false, linkedList0, map0);
      Integer integer0 = new Integer(2147483645);
      voluntarios1.adicionaClassificacao(integer0);
      Transportadoras transportadoras0 = new Transportadoras("qViO~c:Q", "", "", ponto0, 2147483645, false, false, linkedList0, map0, "b:c+4w", (-1.0), 236);
      double double0 = transportadoras0.mediaClassificacao(linkedList0);
      assertEquals(2.147483645E9, double0, 0.01);
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(transportadoras0.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
      assertEquals(2.147483645E9, transportadoras0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1132));
      linkedList0.addFirst(integer0);
      double double0 = voluntarios0.mediaClassificacao(linkedList0);
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertEquals((-1132.0), double0, 0.01);
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      List<Integer> list0 = transportadoras0.getClassificacoes();
      Encomenda encomenda0 = new Encomenda();
      Ponto ponto0 = new Ponto();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Voluntarios voluntarios0 = new Voluntarios((String) null, ",", "?ez`SfPrSMUN4#xkr;C", ponto0, 0.0, true, false, list0, map0);
      voluntarios0.adicionarEncomenda(encomenda0);
      voluntarios0.historicoPE();
      assertFalse(voluntarios0.getDisponivel());
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertTrue(voluntarios0.getTransporteMedicamentos());
      assertFalse(transportadoras0.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Voluntarios voluntarios0 = new Voluntarios("R/$<;PQH|dZv", (String) null, "R/$<;PQH|dZv", ponto0, 0.0, true, true, linkedList0, map0);
      boolean boolean0 = voluntarios0.getTransporteMedicamentos();
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertFalse(transportadoras0.getDisponivel());
      assertTrue(voluntarios0.getDisponivel());
      assertTrue(boolean0);
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      double double0 = transportadoras0.getRaio();
      assertFalse(transportadoras0.getDisponivel());
      assertEquals(0.0, double0, 0.01);
      assertFalse(transportadoras0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios("qViO~c:Q", "qViO~c:Q", "", ponto0, 1470.0548540729283, false, false, linkedList0, map0);
      double double0 = voluntarios1.getRaio();
      assertFalse(voluntarios1.getDisponivel());
      assertFalse(voluntarios1.getTransporteMedicamentos());
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertEquals(1470.0548540729283, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Transportadoras transportadoras0 = new Transportadoras("", "", "", ponto0, (-1708.48778883), true, false, linkedList0, map0, "", 0.0, (-2674));
      double double0 = transportadoras0.getRaio();
      assertTrue(transportadoras0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
      assertEquals((-1708.48778883), double0, 0.01);
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(transportadoras0.getDisponivel());
      assertFalse(voluntarios0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Ponto ponto0 = new Ponto();
      List<Integer> list0 = transportadoras0.getClassificacoes();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Voluntarios voluntarios0 = new Voluntarios("qViO~c:Q", "qViO~c:Q", "qViO~c:Q", ponto0, (-1113.84037), true, true, list0, map0);
      voluntarios0.getPW();
      assertTrue(voluntarios0.getTransporteMedicamentos());
      assertFalse(transportadoras0.getDisponivel());
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertEquals((-1113.84037), voluntarios0.getRaio(), 0.01);
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertTrue(voluntarios0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ponto ponto0 = new Ponto(435.6397F, 0.0F);
      Voluntarios voluntarios0 = new Voluntarios();
      List<Integer> list0 = voluntarios0.getClassificacoes();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios((String) null, (String) null, (String) null, ponto0, (-1337.828577215), true, true, list0, map0);
      voluntarios1.getNome();
      assertEquals((-1337.828577215), voluntarios1.getRaio(), 0.01);
      assertTrue(voluntarios1.getDisponivel());
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertTrue(voluntarios1.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.setNome("C\u00F3digo: ");
      voluntarios0.getNome();
      assertFalse(voluntarios0.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.getNome();
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertFalse(transportadoras0.getDisponivel());
      assertFalse(transportadoras0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.getGPS();
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertFalse(transportadoras0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ponto ponto0 = new Ponto(1.0F, 1.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Voluntarios voluntarios0 = new Voluntarios(">&1uPgICttM)uQb", "3&~L%'?-B-pl0{yt2", (String) null, ponto0, 0.0, true, true, linkedList0, map0);
      voluntarios0.getGPS();
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertTrue(voluntarios0.getTransporteMedicamentos());
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertTrue(voluntarios0.getDisponivel());
      assertFalse(transportadoras0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Ponto ponto0 = new Ponto(0.0F, (-1.0F));
      ponto0.setX((-1.0F));
      transportadoras0.setGPS(ponto0);
      transportadoras0.getGPS();
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertFalse(transportadoras0.getDisponivel());
      assertFalse(transportadoras0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ponto ponto0 = new Ponto(282.9492F, 3501.0F);
      Transportadoras transportadoras0 = new Transportadoras();
      List<Integer> list0 = transportadoras0.getClassificacoes();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Transportadoras transportadoras1 = new Transportadoras("(p", "$th%&n", "$th%&n", ponto0, 282.9492F, false, true, list0, map0, "(p", 3501.0F, (-1));
      boolean boolean0 = transportadoras1.getDisponivel();
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertFalse(transportadoras1.getTransporteMedicamentos());
      assertFalse(transportadoras0.getDisponivel());
      assertTrue(boolean0);
      assertEquals(282.9491882324219, transportadoras1.getRaio(), 0.01);
      assertFalse(transportadoras0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      boolean boolean0 = transportadoras0.getDisponivel();
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertFalse(boolean0);
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.setCodigo((String) null);
      voluntarios0.getCodigo();
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios("qViO~c:Q", "qViO~c:Q", "", ponto0, 1470.0548540729283, true, true, linkedList0, map0);
      voluntarios1.getCodigo();
      assertFalse(voluntarios0.getDisponivel());
      assertTrue(voluntarios1.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertTrue(voluntarios1.getTransporteMedicamentos());
      assertEquals(1470.0548540729283, voluntarios1.getRaio(), 0.01);
      assertFalse(voluntarios0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.getCodigo();
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getDisponivel());
      assertFalse(voluntarios0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.adicionaClassificacao((Integer) null);
      transportadoras0.getClassificacoes();
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertFalse(transportadoras0.getDisponivel());
      assertFalse(transportadoras0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Ponto ponto0 = new Ponto();
      List<Integer> list0 = transportadoras0.getClassificacoes();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Voluntarios voluntarios0 = new Voluntarios("qViO~c:Q", "qViO~c:Q", "qViO~c:Q", ponto0, (-1113.84037), true, true, list0, map0);
      voluntarios0.compareTo((PlataformaEntrega) transportadoras0);
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertTrue(voluntarios0.getTransporteMedicamentos());
      assertTrue(voluntarios0.getDisponivel());
      assertEquals((-1113.84037), voluntarios0.getRaio(), 0.01);
      assertFalse(transportadoras0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios("qViO~c:Q", "qViO~c:Q", "", ponto0, 1470.0548540729283, false, false, linkedList0, map0);
      Voluntarios voluntarios2 = new Voluntarios(voluntarios1);
      voluntarios0.compareTo((PlataformaEntrega) voluntarios2);
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getDisponivel());
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(voluntarios2.getTransporteMedicamentos());
      assertFalse(voluntarios2.getDisponivel());
      assertEquals(1470.0548540729283, voluntarios2.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      assertFalse(voluntarios0.getTransporteMedicamentos());
      
      voluntarios0.setTransporteMedicamentos(true);
      voluntarios0.clone();
      assertTrue(voluntarios0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Transportadoras transportadoras0 = new Transportadoras("qViO~c:Q", "", "", ponto0, 2147483645, false, false, linkedList0, map0, "b:c+4w", (-1.0), 236);
      PlataformaEntrega plataformaEntrega0 = transportadoras0.clone();
      assertFalse(plataformaEntrega0.getDisponivel());
      assertFalse(voluntarios0.getDisponivel());
      assertFalse(plataformaEntrega0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertEquals(2.147483645E9, plataformaEntrega0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Ponto ponto0 = new Ponto();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Voluntarios voluntarios0 = new Voluntarios("Voluntario:,,0.0,0.0,0.0", "Voluntario:,,0.0,0.0,0.0", "Voluntario:,,0.0,0.0,0.0", ponto0, (-2), false, false, linkedList0, map0);
      PlataformaEntrega plataformaEntrega0 = voluntarios0.clone();
      assertFalse(transportadoras0.getDisponivel());
      assertFalse(plataformaEntrega0.getTransporteMedicamentos());
      assertFalse(transportadoras0.getTransporteMedicamentos());
      assertFalse(plataformaEntrega0.getDisponivel());
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertEquals((-2.0), plataformaEntrega0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      assertFalse(voluntarios0.getDisponivel());
      
      voluntarios0.setDisponivel(true);
      voluntarios0.clone();
      assertTrue(voluntarios0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.adicionaClassificacao((Integer) null);
      // Undeclared exception!
      try { 
        transportadoras0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.setGPS((Ponto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.setEncomendasGuardadas((Map<String, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.mediaClassificacao((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.adicionarEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        voluntarios0.historicoPEdata((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Voluntarios voluntarios0 = new Voluntarios((String) null, (String) null, (String) null, ponto0, 2444.75, true, true, (List<Integer>) null, hashMap0);
      // Undeclared exception!
      try { 
        voluntarios0.getClassificacoes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.setNIF((String) null);
      PlataformaEntrega plataformaEntrega0 = transportadoras0.clone();
      // Undeclared exception!
      try { 
        plataformaEntrega0.equals(transportadoras0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Ponto ponto0 = new Ponto();
      List<Integer> list0 = transportadoras0.getClassificacoes();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Voluntarios voluntarios0 = new Voluntarios((String) null, "qViO~c:Q", "qViO~c:Q", ponto0, (-1113.84037), false, false, list0, map0);
      // Undeclared exception!
      try { 
        voluntarios0.compareTo((PlataformaEntrega) transportadoras0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Ponto ponto0 = new Ponto((-1843.5786F), (-1843.5786F));
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios("Descri\u00E7\u00E3o: ", "!*", "!*", ponto0, (-1843.5786F), false, false, (List<Integer>) null, map0);
      // Undeclared exception!
      try { 
        voluntarios1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.adicionarEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-3));
      Ponto ponto0 = new Ponto();
      List<Integer> list0 = List.of();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Transportadoras transportadoras0 = new Transportadoras("pB!:4&9v", "pB!:4&9v", "l}C4aW", ponto0, 0.0, true, true, list0, hashMap0, "EMw1>,8Zf?", 0.0, (-3));
      // Undeclared exception!
      try { 
        transportadoras0.adicionaClassificacao(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer((-1486));
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Transportadoras transportadoras0 = new Transportadoras("\"e1Dv", "\"e1Dv", "\"e1Dv", ponto0, (-1486), true, true, (List<Integer>) null, hashMap0, "\"e1Dv", 351.226401030667, (-1486));
      // Undeclared exception!
      try { 
        transportadoras0.adicionaClassificacao(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      voluntarios0.adicionarEncomenda(encomenda0);
      voluntarios0.getEncomendasGuardadas();
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      boolean boolean0 = transportadoras0.getTransporteMedicamentos();
      assertEquals(0.0, transportadoras0.getRaio(), 0.01);
      assertFalse(transportadoras0.getDisponivel());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      voluntarios0.setEncomendasGuardadas(map0);
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      String string0 = voluntarios0.toStringCSV();
      assertEquals("Voluntario:,,0.0,0.0,0.0", string0);
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.getPW();
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Encomenda encomenda0 = new Encomenda();
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.adicionarEncomenda(encomenda0);
      List<Encomenda> list0 = voluntarios0.historicoPEdata(localDateTime0, localDateTime0);
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(list0.contains(encomenda0));
      assertFalse(voluntarios0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(658);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Encomenda encomenda0 = new Encomenda();
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.adicionarEncomenda(encomenda0);
      List<Encomenda> list0 = voluntarios0.historicoPEdata(localDateTime0, localDateTime0);
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getDisponivel());
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.historicoPE();
      assertFalse(voluntarios0.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios("qViO~c:Q", "qViO~c:Q", "", ponto0, 1470.0548540729283, true, true, linkedList0, map0);
      Voluntarios voluntarios2 = new Voluntarios(voluntarios1);
      Voluntarios voluntarios3 = new Voluntarios();
      boolean boolean0 = voluntarios2.equals(voluntarios3);
      assertTrue(voluntarios2.getTransporteMedicamentos());
      assertEquals(0.0, voluntarios3.getRaio(), 0.01);
      assertTrue(voluntarios2.getDisponivel());
      assertFalse(voluntarios3.getTransporteMedicamentos());
      assertFalse(boolean0);
      assertEquals(1470.0548540729283, voluntarios2.getRaio(), 0.01);
      assertFalse(voluntarios3.getDisponivel());
      assertTrue(voluntarios3.equals((Object)voluntarios0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.setPW((String) null);
      voluntarios0.getPW();
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Integer integer0 = new Integer(658);
      transportadoras0.adicionaClassificacao(integer0);
      String string0 = transportadoras0.toString();
      assertEquals("C\u00F3digo: \nNome: \nGPS: (0.0, 0.0)\nRaio: 0.0\nTransporte medicamentos: false\nNIF: \nPreco por KM: 0.0\nCapacidade : 0\nClassificac\u00E3o: 658.0\nDisponivel: false\n", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      boolean boolean0 = voluntarios1.equals(voluntarios0);
      assertTrue(boolean0);
      assertFalse(voluntarios1.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios1.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.compareTo((PlataformaEntrega) voluntarios0);
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
      assertFalse(voluntarios0.getDisponivel());
      assertFalse(voluntarios0.getTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.setRaio(0.0);
      assertFalse(voluntarios0.getTransporteMedicamentos());
      assertFalse(voluntarios0.getDisponivel());
      assertEquals(0.0, voluntarios0.getRaio(), 0.01);
  }
}
