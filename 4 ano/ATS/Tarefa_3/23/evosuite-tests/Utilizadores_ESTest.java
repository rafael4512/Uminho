/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:33:41 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Utilizadores_ESTest extends Utilizadores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Encomenda encomenda0 = new Encomenda();
      utilizadores0.adicionarEncomenda(encomenda0);
      List<Encomenda> list0 = utilizadores0.historicoEncomenda();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Utilizadores utilizadores0 = new Utilizadores();
      Map<String, Encomenda> map0 = utilizadores0.getEncomendasGuardadas();
      Utilizadores utilizadores1 = new Utilizadores((String) null, (String) null, "", (String) null, ponto0, map0);
      String string0 = utilizadores1.getPW();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ponto ponto0 = new Ponto((-976.12415F), (-976.12415F));
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores((String) null, (String) null, (String) null, "+K&|:w7@I#|SP5vHW", ponto0, hashMap0);
      String string0 = utilizadores0.getPW();
      assertEquals("+K&|:w7@I#|SP5vHW", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ponto ponto0 = new Ponto((-1718.8F), (-1718.8F));
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores("Nome: ", "Nome: ", "[QSBz~R@IcUiA", "Nome: ", ponto0, hashMap0);
      String string0 = utilizadores0.getNome();
      assertEquals("Nome: ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      String string0 = utilizadores0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ponto ponto0 = new Ponto((-2210.696F), (-2210.696F));
      Utilizadores utilizadores0 = new Utilizadores();
      Map<String, Encomenda> map0 = utilizadores0.getEncomendasGuardadas();
      Utilizadores utilizadores1 = new Utilizadores("GF03'7mp;m$", (String) null, "GF03'7mp;m$", (String) null, ponto0, map0);
      Ponto ponto1 = utilizadores1.getGPS();
      assertNotSame(ponto1, ponto0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ponto ponto0 = new Ponto(1870.24F, 1870.24F);
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores("", "$5!,pK<dOx:kv:l@Y", "", "'", ponto0, hashMap0);
      Ponto ponto1 = utilizadores0.getGPS();
      assertTrue(ponto1.equals((Object)ponto0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Ponto ponto0 = new Ponto((-1892.6697F), 3135.661F);
      utilizadores0.setGPS(ponto0);
      Ponto ponto1 = utilizadores0.getGPS();
      assertTrue(ponto1.equals((Object)ponto0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Encomenda encomenda0 = new Encomenda();
      utilizadores0.adicionarEncomenda(encomenda0);
      Map<String, Encomenda> map0 = utilizadores0.getEncomendasGuardadas();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores("WzDm CZ/4cJ]HF3YWDx", "Y%C", (String) null, "WzDm CZ/4cJ]HF3YWDx", ponto0, hashMap0);
      String string0 = utilizadores0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      String string0 = utilizadores0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores("WzDm CZ/4cJ]HF3YWDx", "Y%C", (String) null, "WzDm CZ/4cJ]HF3YWDx", ponto0, hashMap0);
      String string0 = utilizadores0.getCodigo();
      assertEquals("WzDm CZ/4cJ]HF3YWDx", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      String string0 = utilizadores0.getCodigo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.setEncomendasGuardadas((Map<String, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1, 1);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda0).clone();
      List<LinhaEncomenda> list0 = List.of(linhaEncomenda0, linhaEncomenda0, linhaEncomenda0, linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("L!@ga", "GPS: ", "GPS: ", 647.0185F, localDateTime0, list0);
      utilizadores0.adicionarEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        utilizadores0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.adicionarEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizadores utilizadores0 = null;
      try {
        utilizadores0 = new Utilizadores("", "", "", "", (Ponto) null, (Map<String, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizadores utilizadores0 = null;
      try {
        utilizadores0 = new Utilizadores((Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda1).clone();
      List<LinhaEncomenda> list0 = List.of(linhaEncomenda0, linhaEncomenda0, linhaEncomenda1, linhaEncomenda0, linhaEncomenda0, linhaEncomenda0, linhaEncomenda1, linhaEncomenda0, linhaEncomenda1, linhaEncomenda1);
      Encomenda encomenda0 = new Encomenda("Email: ", "I8@B2f5j4G", "Email: ", 1783.6F, (LocalDateTime) null, list0);
      utilizadores0.adicionarEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        utilizadores0.getEncomendasGuardadas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores("{2mpRz>38Ukk", "{2mpRz>38Ukk", "Nome: ", "Nome: ", ponto0, hashMap0);
      String string0 = utilizadores0.getEmail();
      assertEquals("Nome: ", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Ponto ponto0 = utilizadores0.getGPS();
      assertEquals(0.0F, ponto0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Map<String, Encomenda> map0 = utilizadores0.getEncomendasGuardadas();
      utilizadores0.setEncomendasGuardadas(map0);
      assertEquals("", utilizadores0.getNome());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ponto ponto0 = new Ponto((-976.12415F), (-976.12415F));
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores((String) null, (String) null, (String) null, "+K&|:w7@I#|SP5vHW", ponto0, hashMap0);
      String string0 = utilizadores0.getCodigo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores((String) null, (String) null, (String) null, "Ponto", ponto0, hashMap0);
      String string0 = utilizadores0.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      String string0 = utilizadores0.getPW();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores1 = new Utilizadores("WzDm CZ/4cJ]HF3YWDx", "Y%C", (String) null, "WzDm CZ/4cJ]HF3YWDx", ponto0, hashMap0);
      boolean boolean0 = utilizadores1.equals(utilizadores0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores("", "", "REAUOpu{A.W4?s3", "", ponto0, hashMap0);
      boolean boolean0 = utilizadores0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      boolean boolean0 = utilizadores0.equals(utilizadores0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores((String) null, (String) null, (String) null, "Ponto", ponto0, hashMap0);
      boolean boolean0 = utilizadores0.equals(ponto0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.setGPS((Ponto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      utilizadores0.setNome("");
      assertEquals("", utilizadores0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores((String) null, (String) null, (String) null, "Ponto", ponto0, hashMap0);
      utilizadores0.setCodigo("5");
      assertNull(utilizadores0.getEmail());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores((String) null, (String) null, (String) null, "Ponto", ponto0, hashMap0);
      Encomenda encomenda0 = new Encomenda();
      utilizadores0.adicionarEncomenda(encomenda0);
      Utilizadores utilizadores1 = utilizadores0.clone();
      assertNull(utilizadores1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Ponto ponto0 = new Ponto((-1718.8F), (-1718.8F));
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores("Nome: ", "Nome: ", "[QSBz~R@IcUiA", "Nome: ", ponto0, hashMap0);
      List<Encomenda> list0 = utilizadores0.historicoEncomenda();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Utilizadores utilizadores0 = new Utilizadores((String) null, (String) null, (String) null, "Ponto", ponto0, hashMap0);
      String string0 = utilizadores0.toString();
      assertEquals("C\u00F3digo: null\nNome: null\nEmail: null\nGPS: (0.0, 0.0)\n", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      String string0 = utilizadores0.toStringCSV();
      assertEquals("Utilizador:,,0.0,0.0", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      utilizadores0.setEmail((String) null);
      assertNull(utilizadores0.getEmail());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizadores utilizadores1 = new Utilizadores(utilizadores0);
      assertEquals("", utilizadores1.getEmail());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      utilizadores0.setPW((String) null);
      assertEquals("", utilizadores0.getNome());
  }
}
