/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:42:26 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Voluntarios_ESTest extends Voluntarios_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Voluntarios voluntarios0 = new Voluntarios();
      List<Integer> list0 = voluntarios0.getClassificacoes();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios("e(2Y^xUCI", "e(2Y^xUCI", "e(2Y^xUCI", ponto0, (-3423.257083927996), false, false, list0, map0);
      Voluntarios voluntarios2 = new Voluntarios(voluntarios1);
      Voluntarios voluntarios3 = voluntarios2.clone();
      assertNotSame(voluntarios3, voluntarios1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      voluntarios1.setCodigo((String) null);
      // Undeclared exception!
      try { 
        voluntarios0.equals(voluntarios1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ponto ponto0 = new Ponto((-452.0F), (-452.0F));
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Voluntarios voluntarios0 = new Voluntarios("JUGT5ppCZS8)QdiXv", "JUGT5ppCZS8)QdiXv", "JUGT5ppCZS8)QdiXv", ponto0, (-452.0F), false, false, (List<Integer>) null, hashMap0);
      // Undeclared exception!
      try { 
        voluntarios0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Voluntarios voluntarios0 = new Voluntarios();
      List<Integer> list0 = voluntarios0.getClassificacoes();
      Voluntarios voluntarios1 = null;
      try {
        voluntarios1 = new Voluntarios("Q]$_H*LpLxH0]\\=30", "Q]$_H*LpLxH0]\\=30", "Q]$_H*LpLxH0]\\=30", ponto0, 2928.9991540244673, true, true, list0, (Map<String, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ponto ponto0 = new Ponto((-452.0F), (-452.0F));
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Voluntarios voluntarios0 = new Voluntarios("JUGT5ppCZS8)QdiXv", "JUGT5ppCZS8)QdiXv", "JUGT5ppCZS8)QdiXv", ponto0, (-452.0F), false, false, (List<Integer>) null, hashMap0);
      Voluntarios voluntarios1 = null;
      try {
        voluntarios1 = new Voluntarios(voluntarios0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      boolean boolean0 = voluntarios0.equals(voluntarios1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      boolean boolean0 = voluntarios0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      boolean boolean0 = voluntarios0.equals(voluntarios0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      boolean boolean0 = voluntarios0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      String string0 = voluntarios0.toStringCSV();
      assertEquals("Voluntario:,,0.0,0.0,0.0", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Voluntarios voluntarios0 = new Voluntarios();
      List<Integer> list0 = voluntarios0.getClassificacoes();
      Map<String, Encomenda> map0 = voluntarios0.getEncomendasGuardadas();
      Voluntarios voluntarios1 = new Voluntarios(",2.GcNv", ",2.GcNv", "Voluntario", ponto0, 888.15824, true, true, list0, map0);
      Voluntarios voluntarios2 = voluntarios1.clone();
      assertEquals("Voluntario", voluntarios2.getNome());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      String string0 = voluntarios0.tipoPlataformaEntrega();
      assertEquals("Voluntario", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = voluntarios0.clone();
      assertEquals("Voluntario", voluntarios1.tipoPlataformaEntrega());
  }
}
