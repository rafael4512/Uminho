/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:36:38 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Transportadoras_ESTest extends Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.setPrecoPorKM(3070.067221024578);
      double double0 = transportadoras0.getPrecoPorKM();
      assertEquals(3070.067221024578, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ponto ponto0 = new Ponto(1811.138F, 1811.138F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Transportadoras transportadoras1 = new Transportadoras("t.~#)=^", "t.~#)=^", "_5P", ponto0, 1.0, true, true, linkedList0, map0, "", (-5098.6), 3760);
      double double0 = transportadoras1.getPrecoPorKM();
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
      assertEquals(3760, transportadoras1.getCapacidade());
      assertEquals(0, transportadoras0.getCapacidade());
      assertEquals((-5098.6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Transportadoras transportadoras0 = new Transportadoras();
      List<Integer> list0 = transportadoras0.getClassificacoes();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Transportadoras transportadoras1 = new Transportadoras("", "", "", ponto0, 465.8595, false, false, list0, hashMap0, (String) null, 465.8595, 0);
      transportadoras1.getNIF();
      assertEquals(0, transportadoras1.getCapacidade());
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
      assertEquals(0, transportadoras0.getCapacidade());
      assertEquals(465.8595, transportadoras1.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.setNIF("t.~#)=^");
      transportadoras0.getNIF();
      assertEquals(0, transportadoras0.getCapacidade());
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      assertEquals(0, transportadoras0.getCapacidade());
      
      transportadoras0.setCapacidade(1);
      int int0 = transportadoras0.getCapacidade();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Transportadoras transportadoras0 = new Transportadoras();
      List<Integer> list0 = transportadoras0.getClassificacoes();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Transportadoras transportadoras1 = new Transportadoras("", "C\u00F3digo: ", "C\u00F3digo: ", ponto0, 1409.431038654551, false, true, list0, map0, "", (-2771.59836), (-14));
      int int0 = transportadoras1.getCapacidade();
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
      assertEquals((-2771.59836), transportadoras1.getPrecoPorKM(), 0.01);
      assertEquals(0, transportadoras0.getCapacidade());
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ponto ponto0 = new Ponto(1811.138F, 1811.138F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Transportadoras transportadoras1 = new Transportadoras("A!y'O&a(%KabqM&u]v", "A!*'R&a(%KabNM&u]v", "A!y'O&a(%KabqM&u]v", ponto0, (-5098.6), false, true, linkedList0, map0, "A!y'O&a(%KabqM&u]v", 1.0, (-2034458190));
      Transportadoras transportadoras2 = transportadoras1.clone();
      assertEquals((-2034458190), transportadoras1.getCapacidade());
      assertEquals(0, transportadoras0.getCapacidade());
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
      assertEquals(1.0, transportadoras2.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.setCapacidade(563);
      transportadoras0.clone();
      assertEquals(563, transportadoras0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ponto ponto0 = new Ponto((-1911.1085F), (-1805.81F));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Transportadoras transportadoras0 = new Transportadoras("E:,@i", ">\"jOe>Marurb(H!'", "~Q", ponto0, 0.0, true, true, linkedList0, hashMap0, "E:,@i", (-1490.1279), (-2485));
      transportadoras0.clone();
      assertEquals((-2485), transportadoras0.getCapacidade());
      assertEquals((-1490.1279), transportadoras0.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.adicionaClassificacao((Integer) null);
      // Undeclared exception!
      try { 
        transportadoras0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Ponto ponto0 = new Ponto(0.0F, 266.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Transportadoras transportadoras1 = new Transportadoras((String) null, (String) null, (String) null, ponto0, 0.0F, true, true, linkedList0, map0, (String) null, 0.0, (-1453));
      // Undeclared exception!
      try { 
        transportadoras0.equals(transportadoras1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ponto ponto0 = new Ponto((-1262.6F), 0.0F);
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Transportadoras transportadoras0 = new Transportadoras("$O,{M^uE}1.BV ", "Transportadoras", "$O,{M^uE}1.BV ", ponto0, 0.0F, true, true, (List<Integer>) null, hashMap0, "8(fI/- rCAS0W7_", (-1262.6F), (-1092906089));
      // Undeclared exception!
      try { 
        transportadoras0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Transportadoras transportadoras1 = null;
      try {
        transportadoras1 = new Transportadoras("((SJ0V", "((SJ0V", "((SJ0V", (Ponto) null, (-1315.6054482800346), true, true, (List<Integer>) null, map0, "((SJ0V", (-1315.6054482800346), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PlataformaEntrega", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      assertEquals(0, transportadoras1.getCapacidade());
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      double double0 = transportadoras0.getPrecoPorKM();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, transportadoras0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.getNIF();
      assertEquals(0, transportadoras0.getCapacidade());
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      int int0 = transportadoras0.getCapacidade();
      assertEquals(0, int0);
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras();
      assertTrue(transportadoras1.equals((Object)transportadoras0));
      
      transportadoras1.setNIF("L)qyhm[wIeWR|7s2{");
      boolean boolean0 = transportadoras0.equals(transportadoras1);
      assertFalse(transportadoras1.equals((Object)transportadoras0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.setCodigo(", ");
      Transportadoras transportadoras1 = new Transportadoras();
      boolean boolean0 = transportadoras0.equals(transportadoras1);
      assertFalse(boolean0);
      assertEquals(0, transportadoras1.getCapacidade());
      assertEquals(0.0, transportadoras1.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      boolean boolean0 = transportadoras0.equals("Transportadora:,,0.0,0.0,A!y'O&a(%KabqM&u]v,878.68110981,649.6748521421961");
      assertFalse(boolean0);
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
      assertEquals(0, transportadoras0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras();
      boolean boolean0 = transportadoras1.equals(transportadoras0);
      assertTrue(boolean0);
      assertEquals(0.0, transportadoras1.getPrecoPorKM(), 0.01);
      assertEquals(0, transportadoras1.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      boolean boolean0 = transportadoras0.equals(transportadoras0);
      assertTrue(boolean0);
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
      assertEquals(0, transportadoras0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      boolean boolean0 = transportadoras0.equals((Object) null);
      assertEquals(0, transportadoras0.getCapacidade());
      assertFalse(boolean0);
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      String string0 = transportadoras0.tipoPlataformaEntrega();
      assertEquals("Transportadora", string0);
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
      assertEquals(0, transportadoras0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      String string0 = transportadoras0.toString();
      assertEquals("C\u00F3digo: \nNome: \nGPS: (0.0, 0.0)\nRaio: 0.0\nTransporte medicamentos: false\nNIF: \nPreco por KM: 0.0\nCapacidade : 0\nClassificac\u00E3o: 0.0\nDisponivel: false\n", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ponto ponto0 = new Ponto(1811.138F, 1811.138F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Encomenda> map0 = transportadoras0.getEncomendasGuardadas();
      Transportadoras transportadoras1 = new Transportadoras("t.~#)=^", "t.~#)=^", "_5P", ponto0, 1.0, true, true, linkedList0, map0, "", (-5098.6), 3760);
      Transportadoras transportadoras2 = transportadoras1.clone();
      assertEquals(0, transportadoras0.getCapacidade());
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
      assertEquals(3760, transportadoras1.getCapacidade());
      assertEquals((-5098.6), transportadoras2.getPrecoPorKM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      String string0 = transportadoras0.toStringCSV();
      assertEquals(0, transportadoras0.getCapacidade());
      assertEquals("Transportadora:,,0.0,0.0,,0.0,0.0", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertEquals(0.0, transportadoras0.getPrecoPorKM(), 0.01);
      assertEquals(0, transportadoras1.getCapacidade());
  }
}
