/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 23:32:43 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "7)F$6apJSLG", 0.0F, (-312.9738F));
      linhaEncomenda0.setValorUnitario(1197.08F);
      float float0 = linhaEncomenda0.getValorUnitario();
      assertEquals(1197.08F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
      
      linhaEncomenda0.setValorUnitario((-1.0F));
      float float0 = linhaEncomenda0.getValorUnitario();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      float float0 = linhaEncomenda0.getQuantidade();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Valor unit\u00E1rio: ", "Valor unit\u00E1rio: ", 1.0F, (-1653.6302F));
      float float0 = linhaEncomenda0.getQuantidade();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals((-1653.6302F), linhaEncomenda0.getValorUnitario(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(",{pP#vOFik%VKGQFLx", (String) null, 0.0F, 0.0F);
      linhaEncomenda0.getDescricao();
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
      assertEquals(0.0F, linhaEncomenda0.getQuantidade(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setDescricao("UYCp^L= ]");
      linhaEncomenda0.getDescricao();
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
      assertEquals(0.0F, linhaEncomenda0.getQuantidade(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "C\u00F3digo: ", 3758.2F, 3758.2F);
      linhaEncomenda0.getCodProduto();
      assertEquals(3758.2F, linhaEncomenda0.getValorUnitario(), 0.01F);
      assertEquals(3758.2F, linhaEncomenda0.getQuantidade(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Y78oP5V", "Y78oP5V", (-179.0F), (-179.0F));
      linhaEncomenda0.getCodProduto();
      assertEquals((-179.0F), linhaEncomenda0.getValorUnitario(), 0.01F);
      assertEquals((-179.0F), linhaEncomenda0.getQuantidade(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "7)F$6apJSLG", 0.0F, (-312.9738F));
      linhaEncomenda0.setValorUnitario(1197.08F);
      linhaEncomenda0.clone();
      assertEquals(1197.08F, linhaEncomenda0.getValorUnitario(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Valor unit\u00E1rio: ", "Valor unit\u00E1rio: ", 1.0F, (-1653.6302F));
      linhaEncomenda0.clone();
      assertEquals(1.0F, linhaEncomenda0.getQuantidade(), 0.01F);
      assertEquals((-1653.6302F), linhaEncomenda0.getValorUnitario(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setQuantidade((-1681.8F));
      linhaEncomenda0.clone();
      assertEquals((-1681.8F), linhaEncomenda0.getQuantidade(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("4 ~&<<", "4 ~&<<", 0.0F, 0.0F);
      linhaEncomenda0.setCodProduto((String) null);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      // Undeclared exception!
      try { 
        linhaEncomenda0.equals(linhaEncomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.getCodProduto();
      assertEquals(0.0F, linhaEncomenda0.getQuantidade(), 0.01F);
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("\n", "", (-150.0F), (-150.0F));
      float float0 = linhaEncomenda0.getQuantidade();
      assertEquals((-150.0F), float0, 0.01F);
      assertEquals((-150.0F), linhaEncomenda0.getValorUnitario(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.getDescricao();
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
      assertEquals(0.0F, linhaEncomenda0.getQuantidade(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      float float0 = linhaEncomenda0.getValorUnitario();
      assertEquals(0.0F, linhaEncomenda0.getQuantidade(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("4 ~&<<", "4 ~&<<", 0.0F, 0.0F);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      linhaEncomenda1.equals(linhaEncomenda0);
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
      assertEquals(0.0F, linhaEncomenda0.getQuantidade(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals((Object) null);
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
      assertEquals(0.0F, linhaEncomenda0.getQuantidade(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda0);
      assertEquals(0.0F, linhaEncomenda0.getQuantidade(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals("");
      assertFalse(boolean0);
      assertEquals(0.0F, linhaEncomenda0.getValorUnitario(), 0.01F);
      assertEquals(0.0F, linhaEncomenda0.getQuantidade(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.toStringCSV();
      assertEquals(",,0.0,0.0,", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.toString();
      assertEquals("C\u00F3digo: \nDescri\u00E7\u00E3o: \nQuantidade: 0.0\nValor unit\u00E1rio: 0.0\n", string0);
  }
}
