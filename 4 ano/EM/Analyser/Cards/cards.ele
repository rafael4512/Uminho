// Modelo abstracto de um sistema de emissão de cartões bancários

abstract sig Status {}
one sig Unissued, Issued, Cancelled extends Status {}

sig Card {
	var status : one Status
}

sig Client {
	var cards : set Card
}

// Algumas das propriedades desejadas para o sistema
//safety
assert NoUnissuedCards {
  	always Unissued not in Client.cards.status
}
//safety
assert NoSharedCards {
	always all disj x, y : Client, c : x.cards | always (c not in y.cards)
}
//liveness
assert AllCancelled {
	all c : Card | always (c.status = Issued implies eventually c.status = Cancelled)
}

// Especifique as condições iniciais do sistema

fact Init {
	Card.status in  Unissued
	no cards
}

// Especifique as operações do sistema por forma a garantir as propriedades
// de segurança

check NoUnissuedCards
check NoSharedCards

// Operação de emitir um cartão para um cliente
pred emit [c : Card, a : Client] {
 
--efeito
	c.status in Unissued
       c.status' = Issued
	a.cards' = a.cards +c
	//cards' = cards + a->c

--manter todos os outros estados inalteraveis.	
	all c1:Card -c | c1.status' = c1.status
	all p:Client -a | p.cards'   = p.cards 

}

// Operação de cancelar um cartão
pred cancel [c : Card] {
	--efeito
	c.status in Issued
	c.status' = Cancelled
	(Client->c) not in cards'  
	(cards.c).cards'=(cards.c).cards -c
	
	--manter o estado do resto
	all c1:Card-c | c1.status' = c1.status // OU cards' = cards - Client->c
	all cl:(Client - cards.c) | cl.cards' = cl.cards // OU 
	// o estado passa de issued para cancelled

}

pred nop {
	status' = status
	cards' = cards
}

fact Traces {
	//always (nop or some c : Card | some a : Client | emit[c,a])
	always (nop or some c : Card | cancel[c] or some a : Client | emit[c,a])
}

// Especifique um cenário onde 3 cartões são emitidos a pelo menos 2
// clientes e são todos inevitavelmente cancelados, usando os scopes
// para controlar a cardinalidade das assinaturas
// Tente também definir um theme onde os cartões emitidos são verdes
// e os cancelados são vermelhos, ocultando depois toda a informação que
// seja redundante 
// Pode introduzir definições auxiliares no modelo se necessário

/*Objetivo destas funções é atribuir as cores ao conjunto cartões*/
fun c_issued:set Card{
	status.Issued
}

fun c_unissued:set Card{
	status.Unissued
}

fun c_cancelled:set Card{
	status.Cancelled
}


run Exemplo {	
	eventually always allCancelled and  
	eventually (some disj cl1,cl2:Client |some cl1.cards  and some cl2.cards ) 
}for exactly 3 Card , exactly 2 Client


// Especifique as condições de justiça estritamente necessárias para garantir a
// propriedade de animação


pred allCancelled{
	Card.status in Cancelled
}

fact Fairness {-- ou é strong ou weak condition
	all c:Card | {  
		--sempre que um cartão fica para sempre issued implica que exista um estado, que se repete,  onde este fica cancelado.
		(eventually  always c.status = Issued  implies  always eventually  c.status = Cancelled)
	}
}

-- eventually always   -> apartir de um certo momento vai ser sempre verdade
-- always  eventually  -> vai aconter um padrão .

check AllCancelled
