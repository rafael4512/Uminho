// Model of a train station

sig Track {
	prox : set Track,
	signal : lone Signal
}
sig Junction extends Track {}
sig Entry, Exit in Track {}

sig Signal {}
var sig Green in Signal {}

sig Train {
	var pos : lone Track
}

fact Layout {
	// A track is a junction iff it has more than one successor or more than one predecessor
	all t : Track | t not in Junction iff (lone t.prox and lone prox.t)
	// No cycles
	no t : Track | t in t.^prox
	// Signals belong to one and only one track
	all s : Signal | one signal.s
	// All tracks before junctions have signals
	all j : Junction, t : prox.j | some t.signal
	// Entry tracks are those without predecessors and exit tracks are those without no successors
	all t : Track | t in Entry iff no prox.t
	all t : Track | t in Exit iff no t.prox
}


pred prop1 {
	// Intially all signals are red
	no s:Green| s in Signal 
  	//no (Signal & Green)
}


pred prop2 {
	// Every signal will eventually become green
	//eventually (Signal in Green)
  	all s:Signal | eventually s in Green
}


pred prop3 {
	// Trains never move
	always all t:Train | t.pos' = t.pos
}


pred prop4 {
	// There are no collisions between trains
	always all disj t1,t2:Train | no (t1.pos & t2.pos ) 
}


pred prop5 {
	// A train inside the station can only move to one of the next tracks (or exit the station if it is in an exit track)
 /* all t:Train| {
	always (t.pos in Exit  implies eventually no t.pos)
    always (t.pos in (Track-Exit)  implies  t.pos' in t.pos.prox)
  }*/
}


pred prop6 {
	// Signals are always alternating , nÃ£o necessariamente no estado seguinte .
  	always (all s:(Signal-Green)  | eventually s in Green) 
	always (all s:Green  | eventually s in (Signal-Green)) 
	/*always (all s:Signal | always (s in Green) implies eventually (s not in Green ) or 
			 			always s not in Green implies  eventually (s in  Green) )*/
}

pred prop7 {
	// All trains inside the station will eventually leave the station
  always ( all t:Train | some t.pos implies eventually no t.pos )

}


pred prop8 {
	// A train at a track with a red signal can only move after the signal becomes green
	always ( all t:Train | some t.pos.signal and (t.pos.signal  in Signal-Green) implies t.pos' = t.pos )


}


pred prop9 {
	// All trains will eventually enter the station in entry tracks
	 // all t:Train | some t.pos and (t.pos not in Entry implies before no t.pos and eventually ( some t.pos & Entry)   )
}


pred prop10 {
	// It is always the case that at most one signal before a junction can be green
  	//no maximo um sinal antes de uma junction pode ser verde
	always (all j:Junction |  lone((prox.j).signal :> Green))
}


pred prop11 {
	// It is always the case that trains inside the station where previously at a an entry track
	//always ( all t:Train| some t.pos implies  once ( some t.pos and t.pos in Entry) )
  	always ( all t:Train | some t.pos implies once some t.pos :> Entry)

}	


pred prop12 {
	// A train positioned in a track previously passed through all tracks that connect it to an entry track
//	always ( all t:Train| historically some t.pos and
}


pred prop13 {
	// Trains that left the station never return
	always (all t:Train | (once some t.pos and no t.pos ) => always no t.pos)   
}


pred prop14 {
	// Immediately after a train leaves a track with a green signal the signal turns red

}


pred prop15 {
	// Trains cannot remain forever stopped in same position
	always eventually (all t:Train | (no t.pos => eventually some t.pos ) and some t.pos => eventually (t.pos !=t.pos') )

}


pred prop16 {
	// A train in an exit track was always inside the station since it arrived at an entry track
	always (all t:Train | one (t.pos:>Exit) => (some t.pos since one (t.pos:>Entry )))

}


pred prop17 {
	// The first train to be inside the station will be the first to arrive at an exit track

}


pred prop18 {
	//  When several trains are trying to enter a junction the first that arrived will have priority

}



//http://alloy4fun.inesctec.pt/rdWWL58rP3igvB9qg