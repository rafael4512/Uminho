/**
 * Relational logic revision exercises based on a simple model of a 
 * classroom management system.
 * 
 * The model has 5 unary predicates (sets), Person, Student, Teacher,
 * Group and Class, Student and Teacher a sub-set of Person. There are 
 * two binary predicates, Tutors a sub-set of Person x Person, and 
 * Teaches a sub-set of Person x Teaches. There is also a ternary 
 * predicate Groups, sub-set of Class x Person x Group.
 *
 * Solve the following exercises using Alloy's relational logic, which
 * extends first-order logic with:
 *	- expression comparisons 'e1 in e2' and 'e1 = e2'
 *	- expression multiplicity tests 'some e', 'lone e', 'no e' and 'one e'
 *	- binary relational operators '.', '->', '&', '+', '-', ':>' and '<:' 
 *	- unary relational operators '~', '^' and '*'
 *	- definition of relations by comprehension
 **/

/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}

/* The registered groups. */
sig Group {}

/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}

/* Some persons are teachers. */
sig Teacher in Person  {}

/* Some persons are students. */
sig Student in Person  {}

/* Every person is a student. */
pred inv1 {
	Person in Student
}

/* There are no teachers. */
pred inv2 {
 	no Teacher
}

/* No person is both a student and a teacher. */
pred inv3 {
	no(Student & Teacher)
}

/* No person is neither a student nor a teacher. */
pred inv4 {
	/*all p:Person | (p  in Student or p  in Teacher)*/
    Person  in (Teacher + Student) 
}

/* There are some classes assigned to teachers. */
pred inv5 {

	some t:Teacher | some t.Teaches
	/*  some Teacher.Teaches  */

}
/* Every teacher has classes assigned. */
pred inv6 {
	all t:Teacher | some t.Teaches
  	/*  Teacher in Teaches.Class  */
}

/* Every class has teachers assigned. */
pred inv7 {
	all c:Class | some ( Teaches.c  & Teacher)
	/* Class in Teacher.Teaches */
}

/* Teachers are assigned at most one class. */
pred inv8 {
	/*all t:Teacher | lone t.Teaches */
	~(Teacher <: Teaches).(Teacher <: Teaches) in iden
}

/* No class has more than a teacher assigned. */
pred inv9 {
	/* all c:Class |  lone (Teaches.c & Teacher) */
  	lone (Teacher <: Teaches)  
}

/* For every class, every student has a group assigned. */
pred inv10 {
	/*all c:Class |all s:Student|some g:Group |c->s->g in Groups */
  	all c:Class |all s:Student | some (s <: c.Groups)
}

/* A class only has groups if it has a teacher assigned. */
pred inv11 {
 	all c:Class | some c.Groups   implies some (Teaches.c & Teacher)
}

/* Each teacher is responsible for some groups. */
pred inv12 {
	/*all t:Teacher | some t.Teaches in Class */
	all t: Teacher | some t.Teaches.Groups 

}

/* Only teachers tutor, and only students are tutored. */
pred inv13 {
  	all p1,p2:Person | p1.Tutors in Student and Tutors.p2 in Teacher
 /*	all t,s:Person | some  Tutors.s <:t implies s in Student and t in Teacher */
}

/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	 	/*all s :Student, c:Class | (some g:Group | c->s->g in Groups) implies  (all t:Teacher| t->c in Teaches implies t->s in Tutors)*/
	all s:Student ,c:Class |  some (s <:c.Groups) implies  no((Teacher & Teaches.c) - (Tutors.s) )/*implies  t.Tutors.s) 
  */
 
  	
}

/* The tutoring chain of every person eventually reaches a Teacher. */ /* Todas as cadeiras de tutores tem pelo menos um professor */
pred inv15 {
 	all s:Person | some  ((^Tutors.s) & Teacher) 
}

